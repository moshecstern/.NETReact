{"version":3,"sources":["App/api/agent.ts","App/common/util/util.ts","App/stores/activityStore.ts","App/stores/userStore.ts","App/stores/commonStore.ts","App/stores/modalStore.ts","App/stores/profileStore.ts","App/stores/jobStore.ts","App/stores/blogStore.ts","App/stores/experienceStore.ts","App/stores/businessStore.ts","App/stores/postStore.ts","App/stores/messageStore.ts","App/stores/productStore.ts","App/stores/rootStore.ts","App/features/nav/NavBar.tsx","App/common/form/TextInput.tsx","App/common/form/ErrorMessage.tsx","App/features/user/SocialLogin.tsx","App/features/user/LoginForm.tsx","App/features/user/RegisterForm.tsx","App/features/home/HomePage.tsx","App/features/activities/dashboard/ActivityListItemAttendees.tsx","App/features/activities/dashboard/ActivityListItem.tsx","App/features/activities/dashboard/ActivityList.tsx","App/features/activities/dashboard/ActivityListItemPlaceholder.tsx","App/features/activities/dashboard/ActivityFilters.tsx","App/features/activities/dashboard/ActivityDashboard.tsx","App/models/activity.ts","App/common/form/TextAreaInput.tsx","App/common/form/SelectInput.tsx","App/common/form/DateInput.tsx","App/common/options/categoryOptions.ts","App/features/activities/form/ActivityForm.tsx","App/Layout/LoadingComponent.tsx","App/features/activities/details/ActivityDetailedHeader.tsx","App/features/activities/details/ActivityDetailedInfo.tsx","App/features/activities/details/ActivityDetailedChat.tsx","App/features/activities/details/ActivityDetailedSidebar.tsx","App/features/activities/details/ActivityDetails.tsx","App/models/blog.ts","App/features/blogs/form/BlogForm.tsx","App/features/blogs/details/BlogDetailedHeader.tsx","App/features/blogs/details/BlogDetailedInfo.tsx","App/features/blogs/details/BlogDetailedChat.tsx","App/features/blogs/details/BlogDetailedSidebar.tsx","App/features/blogs/details/BlogDetails.tsx","App/features/blogs/dashboard/BlogListItemAttendees.tsx","App/features/blogs/dashboard/BlogListItem.tsx","App/features/blogs/dashboard/BlogList.tsx","App/features/blogs/dashboard/BlogListItemPlaceholder.tsx","App/features/blogs/dashboard/BlogFilters.tsx","App/features/blogs/dashboard/BlogDashboard.tsx","App/models/jobs.ts","App/features/jobs/form/JobForm.tsx","App/features/jobs/details/JobDetailedHeader.tsx","App/features/jobs/details/JobDetailedInfo.tsx","App/features/jobs/details/JobDetailedChat.tsx","App/features/jobs/details/JobDetailedSidebar.tsx","App/features/jobs/details/JobDetails.tsx","App/features/jobs/dashboard/JobListItemAttendees.tsx","App/features/jobs/dashboard/JobListItem.tsx","App/features/jobs/dashboard/JobList.tsx","App/features/jobs/dashboard/JobListItemPlaceholder.tsx","App/features/jobs/dashboard/JobFilters.tsx","App/features/jobs/dashboard/JobDashboard.tsx","App/models/experience.ts","App/features/experiences/form/ExperienceForm.tsx","App/models/post.ts","App/features/posts/form/PostForm.tsx","App/features/posts/details/PostDetailedHeader.tsx","App/features/posts/details/PostDetailedInfo.tsx","App/features/posts/details/PostDetailedChat.tsx","App/features/posts/details/PostDetailedSidebar.tsx","App/features/posts/details/PostDetails.tsx","App/features/posts/dashboard/PostListItemAttendees.tsx","App/features/posts/dashboard/PostListItem.tsx","App/features/posts/dashboard/PostList.tsx","App/features/posts/dashboard/PostListItemPlaceholder.tsx","App/features/posts/dashboard/PostFilters.tsx","App/features/posts/dashboard/PostDashboard.tsx","App/models/product.ts","App/features/products/form/ProductForm.tsx","App/features/products/details/ProductDetailedHeader.tsx","App/features/products/details/ProductDetailedInfo.tsx","App/features/products/details/ProductDetailedChat.tsx","App/features/products/details/ProductDetailedSidebar.tsx","App/features/products/details/ProductDetails.tsx","App/features/products/dashboard/ProductListItemAttendees.tsx","App/features/products/dashboard/ProductListItem.tsx","App/features/products/dashboard/ProductList.tsx","App/features/products/dashboard/ProductListItemPlaceholder.tsx","App/features/products/dashboard/ProductFilters.tsx","App/features/products/dashboard/ProductDashboard.tsx","App/models/business.ts","App/features/businesses/form/BusinessForm.tsx","App/features/businesses/details/BusinessDetailedHeader.tsx","App/features/businesses/details/BusinessDetailedInfo.tsx","App/features/businesses/details/BusinessDetailedChat.tsx","App/features/businesses/details/BusinessDetailedSidebar.tsx","App/features/businesses/details/BusinessDetails.tsx","App/features/businesses/dashboard/BusinessListItemAttendees.tsx","App/features/businesses/dashboard/BusinessListItem.tsx","App/features/businesses/dashboard/BusinessList.tsx","App/features/businesses/dashboard/BusinessListItemPlaceholder.tsx","App/features/businesses/dashboard/BusinessFilters.tsx","App/features/businesses/dashboard/BusinessDashboard.tsx","App/features/experiences/details/ExperienceDetailedHeader.tsx","App/features/experiences/details/ExperienceDetailedInfo.tsx","App/features/experiences/details/ExperienceDetails.tsx","App/Layout/NotFound.tsx","App/common/modals/ModalContainer.tsx","App/features/profiles/ProfileHeader.tsx","App/common/PhotoUpload/PhotoWidgetDropzone.tsx","App/common/PhotoUpload/PhotoWidgetCropper.tsx","App/common/PhotoUpload/PhotoUploadWidget.tsx","App/features/profiles/ProfilePhotos.tsx","App/features/profiles/ProfileEditForm.tsx","App/features/profiles/ProfileDescription.tsx","App/features/profiles/ProfileCard.tsx","App/features/profiles/ProfileFollowings.tsx","App/features/profiles/ProfileActivities.tsx","App/features/profiles/ProfileBlogs.tsx","App/features/profiles/ProfileExperience.tsx","App/features/profiles/ProfileJobs.tsx","App/features/profiles/ProfileAppliedJobs.tsx","App/features/profiles/ProfileMessages.tsx","App/features/profiles/ProfileBusinesses.tsx","App/features/profiles/ProfileContent.tsx","App/features/profiles/ProfilePage.tsx","App/Layout/PrivateRoute.tsx","App/features/user/RegisterSuccess.tsx","App/features/user/VerifyEmail.tsx","App/features/about/AboutPage.tsx","App/Layout/App.tsx","reportWebVitals.ts","App/Layout/ScrollToTop.tsx","serviceWorker.ts","index.tsx"],"names":["axios","defaults","baseURL","process","interceptors","request","use","config","token","window","localStorage","getItem","headers","Authorization","error","Promise","reject","response","undefined","message","toast","status","data","history","push","removeItem","info","method","errors","hasOwnProperty","responseBody","requests","url","get","then","body","post","put","delete","file","formData","FormData","append","User","current","login","user","register","fbLogin","accessToken","refreshToken","verifyEmail","email","resendVerifyEmailConfirm","Profiles","username","uploadPhoto","photo","setMainPhoto","id","deletePhoto","updateProfile","profile","follow","unfollow","listFollowings","predicate","listActivities","listJobs","listExperiences","listBlogs","listBusinesses","listMessages","listPosts","listProducts","Activities","list","params","details","create","activity","update","attend","unattend","Jobs","job","apply","unapply","Blogs","blog","like","unlike","Experiences","experience","Businesses","business","Messages","sendmessage","unsendmessage","Posts","Products","product","agent","combineDateAndTime","date","time","dateString","toISOString","split","timeString","Date","setActivityProps","isGoing","attendees","some","a","isHost","setJobProps","isApplied","applied","setBlogProps","isLiked","liked","setExperienceProps","setBusinessProps","createLikedBusiness","displayName","image","createAttendee","createLikedBlog","createApplicant","setPostProps","createLikedPost","setProductProps","createLikedProduct","setMessageProps","isMessaged","myMessages","createMyMessagesMessage","ActivityStore","observable","ref","rootStore","getActivity","activityRegistry","this","reaction","keys","page","clear","loadActivities","activities","sortedActivities","sort","b","getTime","Object","entries","reduce","URLSearchParams","String","forEach","value","key","Math","ceil","activityCount","groupActivitiesByDate","Array","from","values","Map","action","set","computed","activityId","hubConnection","HubConnectionBuilder","withUrl","accessTokenFactory","commonStore","configureLogging","LogLevel","Information","build","start","console","log","state","invoke","catch","on","comment","runInAction","comments","stop","err","loadingInitial","axiosParams","activitiesEnvelope","userStore","toJS","submitting","attendee","event","target","currentTarget","name","loading","filter","UserStore","refreshTokenTimeout","jwtToken","JSON","parse","atob","timeout","exp","now","setTimeout","clearTimeout","setToken","startRefreshTokenTimer","modalStore","closeModal","stopRefreshTokenTimer","CommonStore","setItem","appLoaded","ModalStore","shallow","open","content","modal","ProfileStore","activeTab","loadFollowings","followings","loadingActivities","userActivities","activeIndex","loadingProfile","uploadingPhoto","photos","isMain","find","following","followersCount","profiles","loadingBlogs","blogs","userBlogs","loadingJobs","jobs","userJobs","loadingExperiences","experiences","userExperiences","loadingBusinesses","userBusinesses","jobStore","getjob","jobRegistry","predicateJob","pageJob","loadJobs","sortedjobs","jobCount","groupjobsByDate","jobId","hubConnectionJob","jobComments","loadingInitialJob","jobsEnvelope","submittingJob","targetJob","loadingJob","blogStore","getblog","blogRegistry","predicateBlog","pageBlog","loadBlogs","sortedBlogs","blogCount","groupBlogsByDate","blogId","hubConnectionBlog","blogComments","loadingInitialBlog","axiosParamsBlog","BlogsEnvelope","submittingBlog","targetBlog","loadingBlog","experienceStore","getExperience","experienceRegistry","loadExperiences","sortedexperiences","experienceCount","groupexperiencesByDate","loadingInitialExperience","experienceEnvelope","businessStore","getbusiness","businessRegistry","predicateBusiness","pageBusiness","loadBusinesses","businesses","sortedBusinesses","businessCount","groupBusinessesByDate","businessId","hubConnectionBusiness","businessComments","loadingInitialBusiness","axiosParamsBusiness","BusinessesEnvelope","submittingBusiness","targetBusiness","loadingBusiness","postStore","getpost","postRegistry","predicatePost","pagePost","loadPosts","sortedPosts","postCount","groupPostsByDate","postId","hubConnectionPost","postComments","loadingInitialPost","axiosParamsPost","PostsEnvelope","posts","submittingPost","targetPost","loadingPost","messageStore","getmessage","messageRegistry","predicateMessage","pageMessage","loadMessages","sortedMessages","messageCount","groupMessagesByDate","messageId","hubConnectionMessage","messageComments","loadingInitialMessage","axiosParamsMessage","MessagesEnvelope","messages","submittingMessage","targetMessage","loadingMessage","productStore","getproduct","productRegistry","predicateProduct","pageProduct","loadProducts","sortedProducts","productCount","groupProductsByDate","productId","hubConnectionProduct","productComments","loadingInitialProduct","axiosParamsProduct","ProductsEnvelope","products","submittingProduct","targetProduct","loadingProduct","configure","enforceActions","RootStoreContext","createContext","activityStore","profileStore","JobStore","BlogStore","ExperienceStore","BusinessStore","PostStore","ProductStore","MessageStore","observer","useContext","logout","Menu","fixed","inverted","Container","Item","header","as","NavLink","exact","to","src","alt","style","marginRight","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","TextInput","input","width","type","placeholder","meta","touched","Form","Field","Label","basic","color","ErrorMessage","Message","Header","statusText","length","List","flat","map","i","Content","fbCallback","appId","fields","callback","render","renderProps","Button","fluid","Icon","validate","combineValidators","isRequired","password","onSubmit","FORM_ERROR","handleSubmit","submitError","invalid","pristine","dirtyFieldsSinceLastSubmit","autoComplete","textAlign","component","disabled","Divider","horizontal","RegisterForm","HomePage","isLoggedIn","openModal","Segment","vertical","className","size","marginBottom","ActivityListItemAttendees","Popup","trigger","circular","ActivityListItem","host","x","Group","title","Description","format","venue","city","secondary","clearing","description","floated","activitiesByDate","group","divided","ActivityListItemPlaceholder","Placeholder","marginTop","minHeight","Line","Paragraph","setPredicate","attached","active","has","onChange","positive","setPage","totalPages","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","hasMore","initialLoad","Loader","ActivityFormValues","init","category","assign","TextAreaInput","rows","SelectInput","options","Select","e","DateInput","rest","onBlur","onKeyDown","preventDefault","categoryPrograms","composeValidators","hasLengthGreaterThan","match","createActivity","editActivity","loadActivity","deleteActivity","setActivity","setLoading","finally","initialValues","dateAndTime","newActivity","uuid","LoadingComponent","Dimmer","activityImageStyle","activityImageTextStyle","bottom","left","height","attendActivity","cancelAttendance","padding","ActivityDetailedInfo","verticalAlign","createHubConnection","stopHubConnection","addComment","border","Comment","Avatar","Author","Metadata","formatDistance","createdAt","Text","form","reset","labelPosition","primary","relaxed","ribbon","Extra","BlogFormValues","main","main2","createblog","editblog","loadblog","deleteblog","setBlog","newBlog","blogImageStyle","blogImageTextStyle","likeBlog","unlikeBlog","BlogDetailedInfo","createHubConnectionBlog","stopHubConnectionBlog","addCommentBlog","setInitialLoad","BlogListItemAttendees","peopleWhoLiked","BlogListItem","BlogsByDate","BlogListItemPlaceholder","setPredicateBlog","setPageBlog","totalPagesBlog","loadingNextBlog","setLoadingNextBlog","JobFormValues","createJob","editJob","loadJob","deletejob","setJob","newJob","jobImageStyle","jobImageTextStyle","applyjob","unlikeJob","JobDetailedInfo","createHubConnectionJob","stopHubConnectionJob","addCommentJob","applicants","applicant","JobListItemAttendees","JobListItem","jobsByDate","JobListItemPlaceholder","setpredicateJob","setpageJob","totalpageJobs","loadingNextJob","setLoadingNextJob","experienceFormValues","link1","link1Name","link2","link2Name","skills","dateEnded","dateStarted","createExperience","editExperience","loadExperience","deleteExperience","setExperience","newExperience","PostFormValues","link","createProgram","editpost","loadpost","deletepost","setpost","newpost","PostImageStyle","PostImageTextStyle","likePost","unlikePost","PostDetailedInfo","createHubConnectionPost","stopHubConnectionPost","addCommentPost","PostListItemAttendees","PostListItem","PostsByDate","PostListItemPlaceholder","setPredicatePost","cat","setPagePost","totalPagesPost","loadingNextpost","setLoadingNextpost","ProductFormValues","createproduct","editproduct","loadproduct","deleteproduct","setproduct","newproduct","productImageStyle","productImageTextStyle","likeProduct","unlikeProduct","ProductDetailedInfo","madeBy","createHubConnectionProduct","stopHubConnectionProduct","addCommentProduct","ProductListItemAttendees","ProductListItem","ProductsByDate","ProductListItemPlaceholder","setPredicateProduct","setPageProduct","totalPagesProduct","loadingNextproduct","setLoadingNextproduct","BusinessFormValues","featuredPost","street","website","hours","createbusiness","editbusiness","loadbusiness","deletebusiness","setBusiness","newBusiness","BusinessImageStyle","BusinessImageTextStyle","Business","likeBusiness","unlikeBusiness","BusinessDetailedInfo","createHubConnectionBusiness","stopHubConnectionBusiness","addCommentBusiness","BusinessListItemAttendees","BusinessListItem","BusinessesByDate","BusinessListItemPlaceholder","setPredicateBusiness","setPageBusiness","totalPagesBusiness","loadingNextBusiness","setLoadingNextBusiness","ExperienceImageStyle","ExperienceImageTextStyle","Experience","ExperienceDetailedInfo","NotFound","Inline","Modal","onClose","isCurrentUser","Statistic","widths","label","followingCount","Reveal","animated","visible","hidden","dropzoneStyles","borderColor","borderRadius","paddingTop","dropzoneActive","PhotoWidgetDropzone","setFiles","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","setImage","imagePreview","cropper","useRef","aspectRatio","guides","viewMode","dragMode","scalable","cropBoxMovable","cropBoxResizable","crop","getCroppedCanvas","toBlob","blob","files","revokeObjectURL","sub","overflow","addPhotoMode","setAddPhotoMode","setTarget","deleteTarget","setDeleteTarget","Tab","Pane","paddingBottom","Card","itemsPerRow","negative","bio","LongBio","editMode","setEditMode","ProfileCard","extra","ProfileFollowings","panes","menuItem","pane","loadUserActivities","menu","onTabChange","handleTabChange","objectFit","Meta","loadUserBlogs","loadUserExperiences","loadUserJobs","ProfileAppliedJobs","ProfileMessages","loadUserBusinesses","ProfileActivities","ProfileContent","setActiveTab","menuPosition","loadProfile","Component","props","RegisterSuccess","location","queryString","search","success","VerifyEmail","Status","setStatus","handleConfirmEmailResend","getBody","AboutPage","withRouter","setAppLoaded","getUser","path","ActivityDashboard","ActivityDetails","ActivityForm","JobDashboard","JobDetails","JobForm","BlogDashboard","BlogDetails","BlogForm","ProductDashboard","ProductDetails","ProductForm","PostDashboard","PostDetails","PostForm","BusinessDashboard","BusinessDetails","BusinessForm","ExperienceDetails","ExperienceForm","ProfilePage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","children","pathname","scrollTo","Boolean","hostname","dateFnsLocalizer","createBrowserHistory","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.401e9011.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport { history } from '../..';\r\nimport { toast } from 'react-toastify';\r\nimport { IUser, IUserFormValues } from '../models/user';\r\nimport { IProfile, IPhoto } from '../models/profile';\r\nimport { IActivity, IActivitiesEnvelope } from '../models/activity';\r\nimport { IJob, IJobsEnvelope } from '../models/jobs';\r\nimport { IBlog, IBlogsEnvelope } from '../models/blog';\r\nimport { IExperience, IExperiencesEnvelope } from '../models/experience';\r\nimport {IBusiness, IBusinessesEnvelope} from '../models/business';\r\nimport {IMessage, IMessagesEnvelope} from '../models/message';\r\nimport {IProduct, IProductsEnvelope} from '../models/product';\r\nimport {IPost, IPostsEnvelope} from '../models/post';\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(\r\n  config => {\r\n    const token = window.localStorage.getItem('jwt');\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n  },\r\n  error => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\naxios.interceptors.response.use(undefined, error => {\r\n  if (error.message === 'Network Error' && !error.response) {\r\n    toast.error('Network error - make sure API is running!');\r\n  }\r\n  const { status, data, config, headers } = error.response;\r\n  if (status === 404) {\r\n    history.push('/notfound');\r\n  }\r\n  if (status === 401 && headers['www-authenticate'] === 'Bearer error=\"invalid_token\", error_description=\"The token is expired\"') {\r\n    window.localStorage.removeItem('jwt');\r\n    history.push('/')\r\n    toast.info('Your session has expired, please login again')\r\n  }\r\n  if (\r\n    status === 400 &&\r\n    config.method === 'get' &&\r\n    data.errors.hasOwnProperty('id')\r\n  ) {\r\n    history.push('/notfound');\r\n  }\r\n  if (status === 500) {\r\n    toast.error('Server error - check the terminal for more info!');\r\n  }\r\n  throw error.response;\r\n});\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst requests = {\r\n  get: (url: string) =>\r\n    axios\r\n      .get(url)\r\n      .then(responseBody),\r\n  post: (url: string, body: {}) =>\r\n    axios\r\n      .post(url, body)\r\n      .then(responseBody),\r\n  put: (url: string, body: {}) =>\r\n    axios\r\n      .put(url, body)\r\n      .then(responseBody),\r\n  del: (url: string) =>\r\n    axios\r\n      .delete(url)\r\n      .then(responseBody),\r\n  postForm: (url: string, file: Blob) => {\r\n    let formData = new FormData();\r\n    formData.append('File', file);\r\n    return axios\r\n      .post(url, formData, {\r\n        headers: { 'Content-type': 'multipart/form-data' }\r\n      })\r\n      .then(responseBody);\r\n  }\r\n};\r\n\r\n\r\n\r\nconst User = {\r\n  current: (): Promise<IUser> => requests.get('/user'),\r\n  login: (user: IUserFormValues): Promise<IUser> =>\r\n    requests.post(`/user/login`, user),\r\n  register: (user: IUserFormValues): Promise<IUser> =>\r\n    requests.post(`/user/register`, user),\r\n  fbLogin: (accessToken: string) =>\r\n    requests.post(`/user/facebook`, { accessToken }),\r\n  refreshToken: (): Promise<IUser> => requests.post(`/user/refreshToken`, {}),\r\n  verifyEmail: (token: string, email: string): Promise<void> =>\r\n    requests.post(`/user/verifyEmail`, { token, email }),\r\n  resendVerifyEmailConfirm: (email: string): Promise<void> =>\r\n    requests.get(`/user/resendEmailVerification?email=${email}`)\r\n};\r\n\r\nconst Profiles = {\r\n  get: (username: string): Promise<IProfile> =>\r\n    requests.get(`/profiles/${username}`),\r\n  uploadPhoto: (photo: Blob): Promise<IPhoto> =>\r\n    requests.postForm(`/photos`, photo),\r\n  setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n  deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n  updateProfile: (profile: Partial<IProfile>) =>\r\n    requests.put(`/profiles`, profile),\r\n  follow: (username: string) =>\r\n    requests.post(`/profiles/${username}/follow`, {}),\r\n  unfollow: (username: string) => requests.del(`/profiles/${username}/follow`),\r\n  listFollowings: (username: string, predicate: string) =>\r\n    requests.get(`/profiles/${username}/follow?predicate=${predicate}`),\r\n  listActivities: (username: string, predicate: string) =>\r\n    requests.get(`/profiles/${username}/activities?predicate=${predicate}`),\r\n  listJobs: (username: string, predicate: string) =>\r\n    requests.get(`/profiles/${username}/jobs?predicate=${predicate}`),\r\n  listExperiences: (username: string, predicate: string) =>\r\n    requests.get(`/profiles/${username}/experiences?predicate=${predicate}`),\r\n  listBlogs: (username: string, predicate: string) =>\r\n    requests.get(`/profiles/${username}/blogs?predicate=${predicate}`),\r\n    listBusinesses: (username: string, predicate: string) =>\r\n    requests.get(`/profiles/${username}/businesses?predicate=${predicate}`),\r\n    listMessages: (username: string, predicate: string) =>\r\n    requests.get(`/profiles/${username}/messages?predicate=${predicate}`),\r\n    listPosts: (username: string, predicate: string) =>\r\n    requests.get(`/profiles/${username}/posts?predicate=${predicate}`),\r\n    listProducts: (username: string, predicate: string) =>\r\n    requests.get(`/profiles/${username}/products?predicate=${predicate}`)\r\n\r\n\r\n  // post message/id \r\n\r\n};\r\n\r\nconst Activities = {\r\n  list: (params: URLSearchParams): Promise<IActivitiesEnvelope> =>\r\n    axios.get('/activities', { params: params }).then(responseBody),\r\n  details: (id: string) => requests.get(`/activities/${id}`),\r\n  create: (activity: IActivity) => requests.post('/activities', activity),\r\n  update: (activity: IActivity) => requests.put(`/activities/${activity.id}`, activity),\r\n  delete: (id: string) => requests.del(`/activities/${id}`),\r\n  attend: (id: string) => requests.post(`/activities/${id}/attend`, {}),\r\n  unattend: (id: string) => requests.del(`/activities/${id}/attend`)\r\n};\r\nconst Jobs = {\r\n  list: (params: URLSearchParams): Promise<IJobsEnvelope> =>\r\n    axios.get('/jobs', { params: params }).then(responseBody),\r\n  details: (id: string) => requests.get(`/jobs/${id}`),\r\n  create: (job: IJob) => requests.post('/jobs', job),\r\n  update: (job: IJob) => requests.put(`/jobs/${job.id}`, job),\r\n  delete: (id: string) => requests.del(`/jobs/${id}`),\r\n  apply: (id: string) => requests.post(`/jobs/${id}/apply`, {}),\r\n  unapply: (id: string) => requests.del(`/jobs/${id}/unapply`)\r\n};\r\n\r\nconst Blogs = {\r\n  list: (params: URLSearchParams): Promise<IBlogsEnvelope> =>\r\n    axios.get('/blogs', { params: params }).then(responseBody),\r\n  details: (id: string) => requests.get(`/blogs/${id}`),\r\n  create: (blog: IBlog) => requests.post('/blogs', blog),\r\n  update: (blog: IBlog) => requests.put(`/blogs/${blog.id}`, blog),\r\n  delete: (id: string) => requests.del(`/blogs/${id}`),\r\n  like: (id: string) => requests.post(`/blogs/${id}/like`, {}),\r\n  unlike: (id: string) => requests.del(`/blogs/${id}/unlike`)\r\n};\r\n\r\nconst Experiences = {\r\n  list: (params: URLSearchParams): Promise<IExperiencesEnvelope> =>\r\n    axios.get('/experiences', { params: params }).then(responseBody),\r\n  details: (id: string) => requests.get(`/experiences/${id}`),\r\n  create: (experience: IExperience) => requests.post('/experiences', experience),\r\n  update: (experience: IExperience) => requests.put(`/experiences/${experience.id}`, experience),\r\n  delete: (id: string) => requests.del(`/experiences/${id}`),\r\n  like: (id: string) => requests.post(`/experiences/${id}/like`, {}),\r\n  unlike: (id: string) => requests.del(`/experiences/${id}/unlike`)\r\n};\r\nconst Businesses = {\r\n  list: (params: URLSearchParams): Promise<IBusinessesEnvelope> =>\r\n    axios.get('/businesses', { params: params }).then(responseBody),\r\n  details: (id: string) => requests.get(`/businesses/${id}`),\r\n  create: (business: IBusiness) => requests.post('/businesses', business),\r\n  update: (business: IBusiness) => requests.put(`/businesses/${business.id}`, business),\r\n  delete: (id: string) => requests.del(`/businesses/${id}`),\r\n  like: (id: string) => requests.post(`/businesses/${id}/like`, {}),\r\n  unlike: (id: string) => requests.del(`/businesses/${id}/unlike`)\r\n};\r\n// messages\r\nconst Messages = {\r\n  list: (params: URLSearchParams): Promise<IMessagesEnvelope> =>\r\n    axios.get('/messages', { params: params }).then(responseBody),\r\n  details: (id: string) => requests.get(`/messages/${id}`),\r\n  create: (message: IMessage) => requests.post('/messages', message),\r\n  update: (message: IMessage) => requests.put(`/messages/${message.id}`, message),\r\n  delete: (id: string) => requests.del(`/messages/${id}`),\r\n  sendmessage: (id: string) => requests.post(`/messages/${id}/sendmessage`, {}),\r\n  unsendmessage: (id: string) => requests.del(`/messages/${id}/unsendmessage`)\r\n};\r\n\r\n// posts\r\nconst Posts = {\r\n  list: (params: URLSearchParams): Promise<IPostsEnvelope> =>\r\n    axios.get('/posts', { params: params }).then(responseBody),\r\n  details: (id: string) => requests.get(`/posts/${id}`),\r\n  create: (post: IPost) => requests.post('/posts', post),\r\n  update: (post: IPost) => requests.put(`/posts/${post.id}`, post),\r\n  delete: (id: string) => requests.del(`/posts/${id}`),\r\n  like: (id: string) => requests.post(`/posts/${id}/like`, {}),\r\n  unlike: (id: string) => requests.del(`/posts/${id}/unlike`)\r\n};\r\n\r\n// products\r\nconst Products = {\r\n  list: (params: URLSearchParams): Promise<IProductsEnvelope> =>\r\n    axios.get('/products', { params: params }).then(responseBody),\r\n  details: (id: string) => requests.get(`/products/${id}`),\r\n  create: (product: IProduct) => requests.post('/products', product),\r\n  update: (product: IProduct) => requests.put(`/products/${product.id}`, product),\r\n  delete: (id: string) => requests.del(`/products/${id}`),\r\n  like: (id: string) => requests.post(`/products/${id}/like`, {}),\r\n  unlike: (id: string) => requests.del(`/products/${id}/unlike`)\r\n};\r\n\r\n// export default {\r\n//   Activities,\r\n//   User,\r\n//   Profiles,\r\n//   Jobs,\r\n//   Blogs,\r\n//   Experiences,\r\n//   Businesses,\r\n//   Products,\r\n//   Posts,\r\n//   Messages\r\n// };\r\nconst agent = {\r\n  Activities,\r\n  User,\r\n  Profiles,\r\n  Jobs,\r\n  Blogs,\r\n  Experiences,\r\n  Businesses,\r\n  Products,\r\n  Posts,\r\n  Messages\r\n}\r\nexport default agent;\r\n","import { IActivity, IAttendee } from \"../../models/activity\";\r\nimport { IBlog, ILikedBlog } from \"../../models/blog\";\r\nimport { IExperience } from \"../../models/experience\";\r\nimport { IJob, IApplied } from \"../../models/jobs\";\r\nimport {IBusiness, ILikedBusiness } from \"../../models/business\";\r\nimport { ILikedPost, IPost } from \"../../models/post\";\r\nimport { IMessage, IMyMessagesMessage } from \"../../models/message\";\r\nimport { ILikedProduct, IProduct } from \"../../models/product\";\r\n// import { IExperience } from \"../../models/profile\";\r\nimport { IUser } from \"../../models/user\";\r\n\r\nexport const combineDateAndTime = (date: Date, time: Date) => {\r\n    // const timeString = time.getHours() + ':' + time.getMinutes() + ':00';\r\n\r\n    // const year = date.getFullYear();\r\n    // const month = date.getMonth() + 1;\r\n    // const day = date.getDate();\r\n    // const dateString = `${year}-${month}-${day}`;\r\n\r\n    const dateString = date.toISOString().split('T')[0];\r\n    const timeString = time.toISOString().split('T')[1];\r\n\r\n    return new Date(dateString + 'T' + timeString);\r\n}\r\nexport const onlyDate = (date: Date) => {\r\n  return new Date(date)\r\n}\r\n\r\nexport const setActivityProps = (activity: IActivity, user: IUser) => {\r\n    activity.date = new Date(activity.date);\r\n    activity.isGoing = activity.attendees.some(\r\n      a => a.username === user.username\r\n    )\r\n    activity.isHost = activity.attendees.some(\r\n      a => a.username === user.username && a.isHost\r\n    )\r\n    return activity;\r\n}\r\nexport const setJobProps = (job: IJob, user: IUser) => {\r\n  job.date = new Date(job.date);\r\n  job.isApplied = job.applied.some(\r\n    a => a.username === user.username\r\n  )\r\n  job.isHost = job.applied.some(\r\n    a => a.username === user.username && a.isHost\r\n  )\r\n  return job;\r\n}\r\n\r\nexport const setBlogProps = (blog: IBlog, user: IUser) => {\r\n  blog.date = new Date(blog.date);\r\n  blog.isLiked = blog.liked.some(\r\n    a => a.username === user.username\r\n  )\r\n  blog.isHost = blog.liked.some(\r\n    a => a.username === user.username && a.isHost\r\n  )\r\n  return blog;\r\n}\r\n\r\nexport const setExperienceProps = (experience: IExperience, user: IUser) => {\r\n  experience.date = new Date(experience.date);\r\n  experience.isLiked = experience.liked.some(\r\n    a => a.username === user.username\r\n  )\r\n  experience.isHost = experience.liked.some(\r\n    a => a.username === user.username && a.isHost\r\n  )\r\n  return experience;\r\n}\r\n\r\nexport const setBusinessProps = (business: IBusiness, user: IUser) => {\r\n  business.date = new Date(business.date);\r\n  business.isLiked = business.liked.some(\r\n    a => a.username === user.username\r\n  )\r\n  business.isHost = business.liked.some(\r\n    a => a.username === user.username && a.isHost\r\n  )\r\n  return business;\r\n}\r\nexport const createLikedBusiness = (user: IUser): ILikedBusiness => {\r\n  return {\r\n      displayName: user.displayName,\r\n      isHost: false,\r\n      username: user.username,\r\n      image: user.image!\r\n  }\r\n}\r\n\r\nexport const createAttendee = (user: IUser): IAttendee => {\r\n    return {\r\n        displayName: user.displayName,\r\n        isHost: false,\r\n        username: user.username,\r\n        image: user.image!\r\n    }\r\n}\r\nexport const createLikedBlog = (user: IUser): ILikedBlog => {\r\n  return {\r\n      displayName: user.displayName,\r\n      isHost: false,\r\n      username: user.username,\r\n      image: user.image!\r\n  }\r\n}\r\nexport const createApplicant = (user: IUser): IApplied => {\r\n  return {\r\n      displayName: user.displayName,\r\n      isHost: false,\r\n      username: user.username,\r\n      image: user.image!\r\n  }\r\n\r\n}\r\n// edit to posts\r\nexport const setPostProps = (post: IPost, user: IUser) => {\r\n  post.date = new Date(post.date);\r\n  post.isLiked = post.liked.some(\r\n    a => a.username === user.username\r\n  )\r\n  post.isHost = post.liked.some(\r\n    a => a.username === user.username && a.isHost\r\n  )\r\n  return post;\r\n}\r\nexport const createLikedPost = (user: IUser): ILikedPost => {\r\n  return {\r\n      displayName: user.displayName,\r\n      isHost: false,\r\n      username: user.username,\r\n      image: user.image!\r\n  }\r\n}\r\n\r\n\r\n// edit to products\r\nexport const setProductProps = (product: IProduct, user: IUser) => {\r\n  product.date = new Date(product.date);\r\n  product.isLiked = product.liked.some(\r\n    a => a.username === user.username\r\n  )\r\n  product.isHost = product.liked.some(\r\n    a => a.username === user.username && a.isHost\r\n  )\r\n  return product;\r\n}\r\nexport const createLikedProduct = (user: IUser): ILikedProduct => {\r\n  return {\r\n      displayName: user.displayName,\r\n      isHost: false,\r\n      username: user.username,\r\n      image: user.image!\r\n  }\r\n}\r\n\r\n\r\n// edit to messages\r\nexport const setMessageProps = (message: IMessage, user: IUser) => {\r\n  message.date = new Date(message.date);\r\n  message.isMessaged = message.myMessages.some(\r\n    a => a.username === user.username\r\n  )\r\n  message.isHost = message.myMessages.some(\r\n    a => a.username === user.username && a.isHost\r\n  )\r\n  return message;\r\n}\r\nexport const createMyMessagesMessage = (user: IUser): IMyMessagesMessage => {\r\n  return {\r\n      displayName: user.displayName,\r\n      isHost: false,\r\n      username: user.username,\r\n      image: user.image!\r\n  }\r\n}","import { observable, action, computed, runInAction, reaction, toJS } from 'mobx';\r\nimport { SyntheticEvent } from 'react';\r\nimport { IActivity } from '../models/activity';\r\nimport agent from '../api/agent';\r\nimport { history } from '../..';\r\nimport { toast } from 'react-toastify';\r\nimport { RootStore } from './rootStore';\r\nimport { setActivityProps, createAttendee } from '../common/util/util';\r\nimport {HubConnection, HubConnectionBuilder, LogLevel} from '@microsoft/signalr';\r\n\r\nconst LIMIT = 2;\r\n\r\n\r\nexport default class ActivityStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n\r\n    reaction(\r\n      () => this.predicate.keys(),\r\n      () => {\r\n        this.page = 0;\r\n        this.activityRegistry.clear();\r\n        this.loadActivities();\r\n      }\r\n    )\r\n  }\r\n\r\n  @observable activityRegistry = new Map();\r\n  @observable activity: IActivity | null = null;\r\n  @observable loadingInitial = false;\r\n  @observable submitting = false;\r\n  @observable target = '';\r\n  @observable loading = false;\r\n  @observable.ref hubConnection: HubConnection | null = null;\r\n  @observable activityCount = 0;\r\n  @observable page = 0;\r\n  @observable predicate = new Map();\r\n\r\n  @action setPredicate = (predicate: string, value: string | Date) => {\r\n    this.predicate.clear();\r\n    if (predicate !== 'all') {\r\n      this.predicate.set(predicate, value);\r\n    }\r\n  }\r\n\r\n  @computed get axiosParams() {\r\n    const params = new URLSearchParams();\r\n    params.append('limit', String(LIMIT));\r\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\r\n    this.predicate.forEach((value, key) => {\r\n      if (key === 'startDate') {\r\n        params.append(key, value.toISOString())\r\n      } else {\r\n        params.append(key, value)\r\n      }\r\n    })\r\n    return params;\r\n  }\r\n\r\n  @computed get totalPages() {\r\n    return Math.ceil(this.activityCount / LIMIT);\r\n  }\r\n\r\n  @action setPage = (page: number) => {\r\n    this.page = page;\r\n  }\r\n\r\n  @action createHubConnection = (activityId: string) => {\r\n    this.hubConnection = new HubConnectionBuilder()\r\n      .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\r\n        accessTokenFactory: () => this.rootStore.commonStore.token!\r\n      })\r\n      .configureLogging(LogLevel.Information)\r\n      .build();\r\n\r\n    this.hubConnection\r\n      .start()\r\n      .then(() => console.log(this.hubConnection!.state))\r\n      .then(() => {\r\n        console.log('Attempting to join group');\r\n        this.hubConnection!.invoke('AddToGroup', activityId)\r\n      })\r\n      .catch(error => console.log('Error establishing connection: ', error));\r\n// below 'RecieveComment' is related to API.SignalR.HubCOnnection line40\r\n    this.hubConnection.on('ReceiveComment', comment => {\r\n      runInAction(() => {\r\n        this.activity!.comments.push(comment)\r\n      })\r\n    })\r\n\r\n    this.hubConnection.on('Send', message => {\r\n      toast.info(message);\r\n    })\r\n  };\r\n\r\n  @action stopHubConnection = () => {\r\n    this.hubConnection!.invoke('RemoveFromGroup', this.activity!.id)\r\n      .then(() => {\r\n        this.hubConnection!.stop()\r\n      })\r\n      .then(() => console.log('Connection stopped'))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  @action addComment = async (values: any) => {\r\n    // below values.activityId needs to match whats in Application.create.cs\r\n    values.activityId = this.activity!.id;\r\n    try {\r\n      await this.hubConnection!.invoke('SendComment', values)\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  } \r\n\r\n\r\n  @computed get activitiesByDate() {\r\n    return this.groupActivitiesByDate(\r\n      Array.from(this.activityRegistry.values())\r\n    );\r\n  }\r\n\r\n  groupActivitiesByDate(activities: IActivity[]) {\r\n    const sortedActivities = activities.sort(\r\n      (a, b) => a.date.getTime() - b.date.getTime()\r\n    );\r\n    return Object.entries(\r\n      sortedActivities.reduce(\r\n        (activities, activity) => {\r\n          const date = activity.date.toISOString().split('T')[0];\r\n          activities[date] = activities[date]\r\n            ? [...activities[date], activity]\r\n            : [activity];\r\n          return activities;\r\n        },\r\n        {} as { [key: string]: IActivity[] }\r\n      )\r\n    );\r\n  }\r\n\r\n  @action loadActivities = async () => {\r\n    this.loadingInitial = true;\r\n    try {\r\n      const activitiesEnvelope = await agent.Activities.list(this.axiosParams);\r\n      const {activities, activityCount} = activitiesEnvelope;\r\n      console.log(activities)\r\n      runInAction(() => {\r\n        activities.forEach(activity => {\r\n          setActivityProps(activity, this.rootStore.userStore.user!);\r\n          this.activityRegistry.set(activity.id, activity);\r\n        });\r\n        this.activityCount = activityCount;\r\n        this.loadingInitial = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingInitial = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action loadActivity = async (id: string) => {\r\n    let activity = this.getActivity(id);\r\n    if (activity) {\r\n      this.activity = activity;\r\n      return toJS(activity);\r\n    } else {\r\n      this.loadingInitial = true;\r\n      try {\r\n        activity = await agent.Activities.details(id);\r\n        runInAction(() => {\r\n          setActivityProps(activity, this.rootStore.userStore.user!);\r\n          this.activity = activity;\r\n          this.activityRegistry.set(activity.id, activity);\r\n          this.loadingInitial = false;\r\n        });\r\n        return activity;\r\n      } catch (error) {\r\n        runInAction(() => {\r\n          this.loadingInitial = false;\r\n        });\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  @action clearActivity = () => {\r\n    this.activity = null;\r\n  };\r\n\r\n  getActivity = (id: string) => {\r\n    return this.activityRegistry.get(id);\r\n  };\r\n\r\n  @action createActivity = async (activity: IActivity) => {\r\n    this.submitting = true;\r\n    try {\r\n      await agent.Activities.create(activity);\r\n      const attendee = createAttendee(this.rootStore.userStore.user!);\r\n      attendee.isHost = true;\r\n      let attendees = [];\r\n      attendees.push(attendee);\r\n      activity.attendees = attendees;\r\n      activity.isHost = true;\r\n      runInAction(() => {\r\n        this.activityRegistry.set(activity.id, activity);\r\n        this.submitting = false;\r\n      });\r\n      history.push(`/activities/${activity.id}`);\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submitting = false;\r\n      });\r\n      toast.error('Problem submitting data');\r\n      console.log(error.response);\r\n    }\r\n  };\r\n\r\n  @action editActivity = async (activity: IActivity) => {\r\n    this.submitting = true;\r\n    try {\r\n      await agent.Activities.update(activity);\r\n      runInAction(() => {\r\n        this.activityRegistry.set(activity.id, activity);\r\n        this.activity = activity;\r\n        this.submitting = false;\r\n      });\r\n      history.push(`/activities/${activity.id}`);\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submitting = false;\r\n      });\r\n      toast.error('Problem submitting data');\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action deleteActivity = async (\r\n    event: SyntheticEvent<HTMLButtonElement>,\r\n    id: string\r\n  ) => {\r\n    this.submitting = true;\r\n    this.target = event.currentTarget.name;\r\n    try {\r\n      await agent.Activities.delete(id);\r\n      runInAction(() => {\r\n        this.activityRegistry.delete(id);\r\n        this.submitting = false;\r\n        this.target = '';\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submitting = false;\r\n        this.target = '';\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action attendActivity = async () => {\r\n    const attendee = createAttendee(this.rootStore.userStore.user!);\r\n    this.loading = true;\r\n    try {\r\n      await agent.Activities.attend(this.activity!.id);\r\n      runInAction(() => {\r\n        if (this.activity) {\r\n          this.activity.attendees.push(attendee);\r\n          this.activity.isGoing = true;\r\n          this.activityRegistry.set(this.activity.id, this.activity);\r\n          this.loading = false;\r\n        }\r\n      })\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      })\r\n      toast.error('Problem signing up to activity');\r\n    }\r\n  };\r\n\r\n  @action cancelAttendance = async () => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Activities.unattend(this.activity!.id);\r\n      runInAction(() => {\r\n        if (this.activity) {\r\n          this.activity.attendees = this.activity.attendees.filter(\r\n            a => a.username !== this.rootStore.userStore.user!.username\r\n          );\r\n          this.activity.isGoing = false;\r\n          this.activityRegistry.set(this.activity.id, this.activity);\r\n          this.loading = false;\r\n        }\r\n      })\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      })\r\n      toast.error('Problem cancelling attendance');\r\n    }\r\n  };\r\n}\r\n","import { observable, computed, action, runInAction } from 'mobx';\r\nimport { IUser, IUserFormValues } from '../models/user';\r\nimport agent from '../api/agent';\r\nimport { RootStore } from './rootStore';\r\nimport { history } from '../..';\r\n\r\nexport default class UserStore {\r\n  refreshTokenTimeout: any;\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  @observable user: IUser | null = null;\r\n  @observable loading = false;\r\n\r\n  @computed get isLoggedIn() {\r\n    return !!this.user;\r\n  }\r\n\r\n  @action login = async (values: IUserFormValues) => {\r\n    try {\r\n      const user = await agent.User.login(values);\r\n      console.log(user + ' this is the user trying to log in');\r\n      runInAction(() => {\r\n        this.user = user;\r\n      });\r\n      this.rootStore.commonStore.setToken(user.token);\r\n      this.startRefreshTokenTimer(user);\r\n      this.rootStore.modalStore.closeModal();\r\n      history.push('/activities');\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  @action register = async (values: IUserFormValues) => {\r\n    try {\r\n      await agent.User.register(values);\r\n      this.rootStore.modalStore.closeModal();\r\n      history.push(`/user/registerSuccess?email=${values.email}`)\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  @action refreshToken = async () => {\r\n    this.stopRefreshTokenTimer();\r\n    try {\r\n      const user = await agent.User.refreshToken();\r\n      runInAction(() => {\r\n        this.user = user;\r\n      })\r\n      this.rootStore.commonStore.setToken(user.token);\r\n      this.startRefreshTokenTimer(user);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  @action getUser = async () => {\r\n    try {\r\n      const user = await agent.User.current();\r\n      runInAction(() => {\r\n        this.user = user;\r\n      });\r\n      this.rootStore.commonStore.setToken(user.token);\r\n      this.startRefreshTokenTimer(user);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action logout = () => {\r\n    this.rootStore.commonStore.setToken(null);\r\n    this.user = null;\r\n    history.push('/');\r\n  };\r\n\r\n  @action fbLogin = async (response: any) => {\r\n    this.loading = true;\r\n    try {\r\n      const user = await agent.User.fbLogin(response.accessToken);\r\n      runInAction(() => {\r\n        this.user = user;\r\n        this.rootStore.commonStore.setToken(user.token);\r\n        this.startRefreshTokenTimer(user);\r\n        this.rootStore.modalStore.closeModal();\r\n        this.loading = false;\r\n      })\r\n      history.push('/activities');\r\n      // edit above to home\r\n    } catch (error) {\r\n      this.loading = false;\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private startRefreshTokenTimer(user: IUser) {\r\n    const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n    const expires = new Date(jwtToken.exp * 1000);\r\n    const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n    this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n  }\r\n\r\n  private stopRefreshTokenTimer() {\r\n    clearTimeout(this.refreshTokenTimeout);\r\n  }\r\n}\r\n","import {RootStore} from './rootStore';\r\nimport { observable, action, reaction } from 'mobx';\r\n\r\nexport default class CommonStore {\r\n    rootStore: RootStore;\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    @observable token: string | null = window.localStorage.getItem('jwt');\r\n    @observable appLoaded = false;\r\n\r\n    @action setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    @action setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { RootStore } from \"./rootStore\"\r\nimport { observable, action } from 'mobx';\r\n\r\nexport default class ModalStore {\r\n    rootStore: RootStore;\r\n    constructor(rootStore: RootStore) {\r\n        this.rootStore = rootStore;\r\n        // makeAutoObservable(this);\r\n    }\r\n    @observable.shallow modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n    @action openModal = (content: any) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n    @action closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { RootStore } from './rootStore';\r\nimport { observable, action, runInAction, computed, reaction } from 'mobx';\r\nimport { IProfile, IPhoto, IUserActivity, IUserExperience, IUserJob, IUserBlog, IUserBusiness } from '../models/profile';\r\n\r\nimport agent from '../api/agent';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport default class ProfileStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n\r\n    reaction(\r\n        () => this.activeTab,\r\n        activeTab => {\r\n            if (activeTab === 3 || activeTab === 4) {\r\n                const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                this.loadFollowings(predicate)\r\n            } else {\r\n                this.followings = [];\r\n            }\r\n        }\r\n    )\r\n  }\r\n\r\n  @observable profile: IProfile | null = null;\r\n  @observable loadingProfile = true;\r\n  @observable uploadingPhoto = false;\r\n  @observable loading = false;\r\n  @observable followings: IProfile[] = [];\r\n  @observable activeTab: number = 0;\r\n  @observable userActivities: IUserActivity[] = [];\r\n  @observable loadingActivities = false;\r\n\r\n  @observable userJobs: IUserJob[] = [];\r\n  @observable loadingJobs = false;\r\n  @observable userBlogs: IUserBlog[] = [];\r\n  @observable loadingBlogs = false;\r\n  @observable userExperiences: IUserExperience[] = [];\r\n  @observable loadingExperiences = false;\r\n  @observable userBusinesses: IUserBusiness[] = [];\r\n  @observable loadingBusinesses = false;\r\n\r\n  @computed get isCurrentUser() {\r\n    if (this.rootStore.userStore.user && this.profile) {\r\n      return this.rootStore.userStore.user.username === this.profile.username;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  @action loadUserActivities = async (username: string, predicate?: string) => {\r\n    this.loadingActivities = true;\r\n    try {\r\n      const activities = await agent.Profiles.listActivities(username, predicate!);\r\n      runInAction(() => {\r\n        this.userActivities = activities;\r\n        this.loadingActivities = false;\r\n      })\r\n    } catch (error) {\r\n      toast.error('Problem loading activities')\r\n      runInAction(() => {\r\n        this.loadingActivities = false;\r\n      })\r\n    }\r\n  }\r\n\r\n  @action setActiveTab = (activeIndex: number) => {\r\n      this.activeTab = activeIndex;\r\n  } \r\n\r\n  @action loadProfile = async (username: string) => {\r\n    this.loadingProfile = true;\r\n    try {\r\n      const profile = await agent.Profiles.get(username);\r\n      runInAction(() => {\r\n        this.profile = profile;\r\n        this.loadingProfile = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingProfile = false;\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action uploadPhoto = async (file: Blob) => {\r\n    this.uploadingPhoto = true;\r\n    try {\r\n      const photo = await agent.Profiles.uploadPhoto(file);\r\n      runInAction(() => {\r\n        if (this.profile) {\r\n          this.profile.photos.push(photo);\r\n          if (photo.isMain && this.rootStore.userStore.user) {\r\n            this.rootStore.userStore.user.image = photo.url;\r\n            this.profile.image = photo.url;\r\n          }\r\n        }\r\n        this.uploadingPhoto = false;\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      toast.error('Problem uploading photo');\r\n      runInAction(() => {\r\n        this.uploadingPhoto = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action setMainPhoto = async (photo: IPhoto) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.setMainPhoto(photo.id);\r\n      runInAction(() => {\r\n        this.rootStore.userStore.user!.image = photo.url;\r\n        this.profile!.photos.find(a => a.isMain)!.isMain = false;\r\n        this.profile!.photos.find(a => a.id === photo.id)!.isMain = true;\r\n        this.profile!.image = photo.url;\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error('Problem setting photo as main');\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n\r\n\r\n\r\n  @action deletePhoto = async (photo: IPhoto) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.deletePhoto(photo.id);\r\n      runInAction(() => {\r\n        this.profile!.photos = this.profile!.photos.filter(\r\n          a => a.id !== photo.id\r\n        );\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error('Problem deleting the photo');\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action updateProfile = async (profile: Partial<IProfile>) => {\r\n    try {\r\n      await agent.Profiles.updateProfile(profile);\r\n      runInAction(() => {\r\n        if (\r\n          profile.displayName !== this.rootStore.userStore.user!.displayName\r\n        ) {\r\n          this.rootStore.userStore.user!.displayName = profile.displayName!;\r\n        }\r\n        this.profile = { ...this.profile!, ...profile };\r\n      });\r\n    } catch (error) {\r\n      toast.error('Problem updating profile');\r\n    }\r\n  };\r\n\r\n  @action follow = async (username: string) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.follow(username);\r\n      runInAction(() => {\r\n        this.profile!.following = true;\r\n        this.profile!.followersCount++;\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error('Problem following user');\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action unfollow = async (username: string) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.unfollow(username);\r\n      runInAction(() => {\r\n        this.profile!.following = false;\r\n        this.profile!.followersCount--;\r\n        this.loading = false;\r\n      });\r\n    } catch (error) {\r\n      toast.error('Problem unfollowing user');\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action loadFollowings = async (predicate: string) => {\r\n    this.loading = true;\r\n    try {\r\n      const profiles = await agent.Profiles.listFollowings(\r\n        this.profile!.username,\r\n        predicate\r\n      );\r\n      runInAction(() => {\r\n          this.followings = profiles;\r\n          this.loading = false;\r\n      })\r\n    } catch (error) {\r\n      toast.error('Problem loading followings');\r\n      runInAction(() => {\r\n        this.loading = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  // new content here\r\n\r\n  \r\n  @action loadUserBlogs = async (username: string, predicate?: string) => {\r\n    this.loadingBlogs = true;\r\n    try {\r\n      const blogs = await agent.Profiles.listBlogs(username, predicate!);\r\n      runInAction(() => {\r\n        this.userBlogs = blogs;\r\n        this.loadingBlogs = false;\r\n      })\r\n    } catch (error) {\r\n      toast.error('Problem loading blogs')\r\n      runInAction(() => {\r\n        this.loadingBlogs = false;\r\n      })\r\n    }\r\n  }\r\n\r\n  @action loadUserJobs = async (username: string, predicate?: string) => {\r\n    this.loadingJobs = true;\r\n    try {\r\n      const jobs = await agent.Profiles.listJobs(username, predicate!);\r\n      runInAction(() => {\r\n        this.userJobs = jobs;\r\n        this.loadingJobs = false;\r\n      })\r\n    } catch (error) {\r\n      toast.error('Problem loading jobs')\r\n      runInAction(() => {\r\n        this.loadingJobs = false;\r\n      })\r\n    }\r\n  }\r\n\r\n  @action loadUserExperiences = async (username: string, predicate?: string) => {\r\n    this.loadingExperiences = true;\r\n    try {\r\n      const experiences = await agent.Profiles.listExperiences(username, predicate!);\r\n      runInAction(() => {\r\n        this.userExperiences = experiences;\r\n        this.loadingExperiences = false;\r\n      })\r\n    } catch (error) {\r\n      toast.error('Problem loading Experiences')\r\n      runInAction(() => {\r\n        this.loadingExperiences = false;\r\n      })\r\n    }\r\n  }\r\n\r\n  @action loadUserBusinesses = async (username: string, predicate?: string) => {\r\n    this.loadingBusinesses = true;\r\n    try {\r\n      const business = await agent.Profiles.listBusinesses(username, predicate!);\r\n      runInAction(() => {\r\n        this.userBusinesses = business;\r\n        this.loadingBusinesses = false;\r\n      })\r\n    } catch (error) {\r\n      toast.error('Problem loading Business')\r\n      runInAction(() => {\r\n        this.loadingBusinesses = false;\r\n      })\r\n    }\r\n  }\r\n\r\n//   @action setBusinessPhoto = async (photo: IPhoto) => {\r\n//     this.loading = true;\r\n//     try {\r\n//       await agent.Profiles.setMainPhoto(photo.id);\r\n//       runInAction(() => {\r\n//         this.rootStore.userStore.user!.image = photo.url;\r\n//         this.profile!.photos.find(a => a.isMain)!.isMain = false;\r\n//         this.profile!.photos.find(a => a.id === photo.id)!.isMain = true;\r\n//         this.profile!.image = photo.url;\r\n//         this.loading = false;\r\n//       });\r\n//     } catch (error) {\r\n//       toast.error('Problem setting photo as main');\r\n//       runInAction(() => {\r\n//         this.loading = false;\r\n//       });\r\n//     }\r\n//   };\r\n}\r\n","import { observable, action, computed, runInAction, reaction, toJS } from 'mobx';\r\nimport { SyntheticEvent } from 'react';\r\nimport { IJob } from '../models/jobs';\r\nimport agent from '../api/agent';\r\nimport { history } from '../..';\r\nimport { toast } from 'react-toastify';\r\nimport { RootStore } from './rootStore';\r\nimport { createApplicant, setJobProps } from '../common/util/util';\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\n\r\nconst LIMIT = 2;\r\n\r\n\r\nexport default class jobStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n\r\n    reaction(\r\n      () => this.predicateJob.keys(),\r\n      () => {\r\n        this.pageJob = 0;\r\n        this.jobRegistry.clear();\r\n        this.loadJobs();\r\n      }\r\n    )\r\n  }\r\n\r\n  @observable jobRegistry = new Map();\r\n  @observable job: IJob | null = null;\r\n  @observable loadingInitialJob = false;\r\n  @observable submittingJob = false;\r\n  @observable targetJob = '';\r\n  @observable loadingJob = false;\r\n  @observable.ref hubConnectionJob: HubConnection | null = null;\r\n  @observable jobCount = 0;\r\n  @observable pageJob = 0;\r\n  @observable predicateJob = new Map();\r\n\r\n  @action setpredicateJob = (predicateJob: string, value: string | Date) => {\r\n    this.predicateJob.clear();\r\n    if (predicateJob !== 'all') {\r\n      this.predicateJob.set(predicateJob, value);\r\n    }\r\n  }\r\n\r\n  @computed get axiosParams() {\r\n    const params = new URLSearchParams();\r\n    params.append('limit', String(LIMIT));\r\n    params.append('offset', `${this.pageJob ? this.pageJob * LIMIT : 0}`);\r\n    this.predicateJob.forEach((value, key) => {\r\n      if (key === 'startDate') {\r\n        params.append(key, value.toISOString())\r\n      } else {\r\n        params.append(key, value)\r\n      }\r\n    })\r\n    return params;\r\n  }\r\n\r\n  @computed get totalpageJobs() {\r\n    return Math.ceil(this.jobCount / LIMIT);\r\n  }\r\n\r\n  @action setpageJob = (pageJob: number) => {\r\n    this.pageJob = pageJob;\r\n  }\r\n  @action createHubConnectionJob = (jobId: string) => {\r\n    this.hubConnectionJob = new HubConnectionBuilder()\r\n      .withUrl(process.env.REACT_APP_API_JOBCHAT_URL!, {\r\n        accessTokenFactory: () => this.rootStore.commonStore.token!\r\n      })\r\n      .configureLogging(LogLevel.Information)\r\n      .build();\r\n\r\n    this.hubConnectionJob\r\n      .start()\r\n      .then(() => console.log(this.hubConnectionJob!.state))\r\n      .then(() => {\r\n        console.log('Attempting to join group');\r\n        this.hubConnectionJob!.invoke('AddToGroupJob', jobId)\r\n      })\r\n      .catch(error => console.log('Error establishing connection: ', error));\r\n// below 'RecieveComment' is related to API.SignalR.HubCOnnection line40\r\n    this.hubConnectionJob.on('ReceiveJobComment', comment => {\r\n      console.log(comment)\r\n      runInAction(() => {\r\n        this.job!.jobComments.push(comment)\r\n      })\r\n    })\r\n\r\n    this.hubConnectionJob.on('SendJob', message => {\r\n      toast.info(message);\r\n    })\r\n  };\r\n\r\n  @action stopHubConnectionJob = () => {\r\n    this.hubConnectionJob!.invoke('RemoveFromGroupJob', this.job!.id)\r\n      .then(() => {\r\n        this.hubConnectionJob!.stop()\r\n      })\r\n      .then(() => console.log('Connection stopped'))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  @action addCommentJob = async (values: any) => {\r\n    // below values.activityId needs to match whats in Application.create.cs\r\n    values.jobId = this.job!.id;\r\n    try {\r\n      await this.hubConnectionJob!.invoke('SendCommentJob', values)\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  } \r\n\r\n\r\n  @computed get jobsByDate() {\r\n    return this.groupjobsByDate(\r\n      Array.from(this.jobRegistry.values())\r\n    );\r\n  }\r\n\r\n  groupjobsByDate(jobs: IJob[]) {\r\n    console.log(\"grouping by date \" + jobs);\r\n\r\n    const sortedjobs = jobs.sort(\r\n      (a, b) => a.date.getTime() - b.date.getTime()\r\n    );\r\n    return Object.entries(\r\n      sortedjobs.reduce(\r\n        (jobs, job) => {\r\n          const date = job.date.toISOString().split('T')[0];\r\n          jobs[date] = jobs[date]\r\n            ? [...jobs[date], job]\r\n            : [job];\r\n          return jobs;\r\n        },\r\n        {} as { [key: string]: IJob[] }\r\n      )\r\n    );\r\n  }\r\n\r\n  @action loadJobs = async () => {\r\n    this.loadingInitialJob = true;\r\n    try {\r\n      const jobsEnvelope = await agent.Jobs.list(this.axiosParams);\r\n      const { jobs, jobCount } = jobsEnvelope;\r\n      console.log(\"This is how many are comming back * \" + jobCount + \" * these are the jobs coming back\" + jobs)\r\n      console.log(jobs)\r\n      runInAction(() => {\r\n        jobs.forEach(job => {\r\n          setJobProps(job, this.rootStore.userStore.user!);\r\n          this.jobRegistry.set(job.id, job);\r\n          console.log(jobs)\r\n          console.log(\"jobs after\");\r\n        });\r\n\r\n        this.jobCount = jobCount;\r\n        this.loadingInitialJob = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingInitialJob = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action loadJob = async (id: string) => {\r\n    let job = this.getjob(id);\r\n    if (job) {\r\n      this.job = job;\r\n      return toJS(job);\r\n    } else {\r\n      this.loadingInitialJob = true;\r\n      try {\r\n        job = await agent.Jobs.details(id);\r\n        runInAction(() => {\r\n          setJobProps(job, this.rootStore.userStore.user!);\r\n          this.job = job;\r\n          this.jobRegistry.set(job.id, job);\r\n          this.loadingInitialJob = false;\r\n        });\r\n        return job;\r\n      } catch (error) {\r\n        runInAction(() => {\r\n          this.loadingInitialJob = false;\r\n        });\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  @action clearjob = () => {\r\n    this.job = null;\r\n  };\r\n\r\n  getjob = (id: string) => {\r\n    console.log(id)\r\n    return this.jobRegistry.get(id);\r\n  };\r\n\r\n  @action createJob = async (job: IJob) => {\r\n    this.submittingJob = true;\r\n    try {\r\n      await agent.Jobs.create(job);\r\n      const attendee = createApplicant(this.rootStore.userStore.user!);\r\n      attendee.isHost = true;\r\n      let attendees = [];\r\n      attendees.push(attendee);\r\n      job.applied = attendees;\r\n      job.isHost = true;\r\n      runInAction(() => {\r\n        this.jobRegistry.set(job.id, job);\r\n        this.submittingJob = false;\r\n      });\r\n      history.push(`/jobs/${job.id}`);\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingJob = false;\r\n      });\r\n      toast.error('Problem submittingJob data');\r\n      console.log(error.response);\r\n    }\r\n  };\r\n\r\n  @action editJob = async (job: IJob) => {\r\n    this.submittingJob = true;\r\n    try {\r\n      await agent.Jobs.update(job);\r\n      runInAction(() => {\r\n        this.jobRegistry.set(job.id, job);\r\n        this.job = job;\r\n        this.submittingJob = false;\r\n      });\r\n      history.push(`/jobs/${job.id}`);\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingJob = false;\r\n      });\r\n      toast.error('Problem submittingJob data');\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action deletejob = async (\r\n    event: SyntheticEvent<HTMLButtonElement>,\r\n    id: string\r\n  ) => {\r\n    this.submittingJob = true;\r\n    this.targetJob = event.currentTarget.name;\r\n    try {\r\n      await agent.Jobs.delete(id);\r\n      runInAction(() => {\r\n        this.jobRegistry.delete(id);\r\n        this.submittingJob = false;\r\n        this.targetJob = '';\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingJob = false;\r\n        this.targetJob = '';\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action applyjob = async () => {\r\n    const attendee = createApplicant(this.rootStore.userStore.user!);\r\n    this.loadingJob = true;\r\n    try {\r\n      await agent.Jobs.apply(this.job!.id);\r\n      runInAction(() => {\r\n        if (this.job) {\r\n          this.job.applied.push(attendee);\r\n          this.job.isApplied = true;\r\n          this.jobRegistry.set(this.job.id, this.job);\r\n          this.loadingJob = false;\r\n        }\r\n      })\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingJob = false;\r\n      })\r\n      toast.error('Problem signing up to job');\r\n    }\r\n  };\r\n\r\n  @action unlikeJob = async () => {\r\n    this.loadingJob = true;\r\n    try {\r\n      await agent.Jobs.unapply(this.job!.id);\r\n      runInAction(() => {\r\n        if (this.job) {\r\n          this.job.applied = this.job.applied.filter(\r\n            a => a.username !== this.rootStore.userStore.user!.username\r\n          );\r\n          this.job.isApplied = false;\r\n          this.jobRegistry.set(this.job.id, this.job);\r\n          this.loadingJob = false;\r\n        }\r\n      })\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingJob = false;\r\n      })\r\n      toast.error('Problem cancelling like');\r\n    }\r\n  };\r\n}\r\n","import { observable, action, computed, runInAction, reaction, toJS } from 'mobx';\r\nimport { SyntheticEvent } from 'react';\r\nimport { IBlog } from '../models/blog';\r\nimport agent from '../api/agent';\r\nimport { history } from '../..';\r\nimport { toast } from 'react-toastify';\r\nimport { RootStore } from './rootStore';\r\nimport { createLikedBlog, setBlogProps } from '../common/util/util';\r\nimport {HubConnection, HubConnectionBuilder, LogLevel} from '@microsoft/signalr';\r\n\r\nconst LIMIT = 2;\r\n\r\n\r\nexport default class blogStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n\r\n    reaction(\r\n      () => this.predicateBlog.keys(),\r\n      () => {\r\n        this.pageBlog = 0;\r\n        this.blogRegistry.clear();\r\n        this.loadBlogs();\r\n      }\r\n    )\r\n  }\r\n\r\n  @observable blogRegistry = new Map();\r\n  @observable blog: IBlog | null = null;\r\n  @observable loadingInitialBlog = false;\r\n  @observable submittingBlog = false;\r\n  @observable targetBlog = '';\r\n  @observable loadingBlog = false;\r\n  @observable.ref hubConnectionBlog: HubConnection | null = null;\r\n  @observable blogCount = 0;\r\n  @observable pageBlog = 0;\r\n  @observable predicateBlog = new Map();\r\n\r\n  @action setPredicateBlog = (predicate: string, value: string | Date) => {\r\n    this.predicateBlog.clear();\r\n    if (predicate !== 'all') {\r\n      this.predicateBlog.set(predicate, value);\r\n    }\r\n  }\r\n\r\n  @computed get axiosParamsBlog() {\r\n    const params = new URLSearchParams();\r\n    params.append('limit', String(LIMIT));\r\n    params.append('offset', `${this.pageBlog ? this.pageBlog * LIMIT : 0}`);\r\n    this.predicateBlog.forEach((value, key) => {\r\n      if (key === 'startDate') {\r\n        params.append(key, value.toISOString())\r\n      } else {\r\n        params.append(key, value)\r\n      }\r\n    })\r\n    return params;\r\n  }\r\n\r\n  @computed get totalPagesBlog() {\r\n    return Math.ceil(this.blogCount / LIMIT);\r\n  }\r\n\r\n  @action setPageBlog = (page: number) => {\r\n    this.pageBlog = page;\r\n  }\r\n\r\n  // @action createHubConnectionBlog = (blogId: string) => {\r\n  //   if (!this.hubConnectionBlog) {\r\n  //   this.hubConnectionBlog = new HubConnectionBuilder()\r\n  //     .withUrl(process.env.REACT_APP_API_BLOGCHAT_URL!, {\r\n  //       accessTokenFactory: () => this.rootStore.commonStore.token!\r\n  //     })\r\n  //     .configureLogging(LogLevel.Information)\r\n  //     .build();\r\n\r\n  //     this.hubConnectionBlog.on('ReceiveBlogComment', (comment) => runInAction(() => this.blog!.comments.push(comment)));\r\n  //     this.hubConnectionBlog.on('SendBlog', (message) => {/*toast.info(message)*/});\r\n\r\n  //   }\r\n  //     if (this.hubConnectionBlog!.state === \"Disconnected\") {\r\n  //   this.hubConnectionBlog\r\n  //     .start()\r\n  //     .then(() => console.log(this.hubConnectionBlog!.state))\r\n  //     .then(() => {\r\n  //       console.log('Attempting to join group');\r\n  //       this.hubConnectionBlog!.invoke('AddToGroupBlog', blogId)\r\n  //     })\r\n  //     .catch(error => console.log('Error establishing connection: ', error));\r\n  //   } else if(this.hubConnectionBlog!.state === 'Connected'){\r\n  //     this.hubConnectionBlog!.invoke('AddToGroup', blogId);\r\n  //   }\r\n  \r\n  //   this.hubConnectionBlog.on('ReceiveBlogComment', comment => {\r\n  //     runInAction(() => {\r\n  //       this.blog!.comments.push(comment)\r\n  //     })\r\n  //   })\r\n\r\n  //   this.hubConnectionBlog.on('SendBlog', message => {\r\n  //     toast.info(message);\r\n  //   })\r\n  // };\r\n\r\n  // @action stopHubConnectionBlog = () => {\r\n  //   if (this.hubConnectionBlog?.state === \"Connected\") {\r\n  //   this.hubConnectionBlog!.invoke('RemoveFromGroupBlog', this.blog!.id)\r\n  //     .then(() => {\r\n  //       this.hubConnectionBlog!.stop()\r\n  //     })\r\n  //     .then(() => console.log('Connection stopped'))\r\n  //     .catch(err => console.log(err))\r\n  // }}\r\n\r\n  // @action addCommentBlog = async (values: any) => {\r\n  //   values.blogId = this.blog!.id;\r\n  //   try {\r\n  //     await this.hubConnectionBlog!.invoke('SendCommentBlog', values)\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n  //   }\r\n  // } \r\n  @action createHubConnectionBlog = (blogId: string) => {\r\n    this.hubConnectionBlog = new HubConnectionBuilder()\r\n      .withUrl(process.env.REACT_APP_API_BLOGCHAT_URL!, {\r\n        accessTokenFactory: () => this.rootStore.commonStore.token!\r\n      })\r\n      .configureLogging(LogLevel.Information)\r\n      .build();\r\n\r\n    this.hubConnectionBlog\r\n      .start()\r\n      .then(() => console.log(this.hubConnectionBlog!.state))\r\n      .then(() => {\r\n        console.log('Attempting to join group');\r\n        this.hubConnectionBlog!.invoke('AddToGroupBlog', blogId)\r\n      })\r\n      .catch(error => console.log('Error establishing connection: ', error));\r\n// below 'RecieveComment' is related to API.SignalR.HubCOnnection line40\r\n    this.hubConnectionBlog.on('ReceiveBlogComment', comment => {\r\n      console.log(comment)\r\n      runInAction(() => {\r\n        this.blog!.blogComments.push(comment)\r\n      })\r\n    })\r\n\r\n    this.hubConnectionBlog.on('SendBlog', message => {\r\n      toast.info(message);\r\n    })\r\n  };\r\n\r\n  @action stopHubConnectionBlog = () => {\r\n    this.hubConnectionBlog!.invoke('RemoveFromGroupBlog', this.blog!.id)\r\n      .then(() => {\r\n        this.hubConnectionBlog!.stop()\r\n      })\r\n      .then(() => console.log('Connection stopped'))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  @action addCommentBlog = async (values: any) => {\r\n    // below values.activityId needs to match whats in Application.create.cs\r\n    values.blogId = this.blog!.id;\r\n    try {\r\n      await this.hubConnectionBlog!.invoke('SendCommentBlog', values)\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  } \r\n\r\n\r\n  @computed get BlogsByDate() {\r\n    return this.groupBlogsByDate(\r\n      Array.from(this.blogRegistry.values())\r\n    );\r\n  }\r\n\r\n  groupBlogsByDate(Blogs: IBlog[]) {\r\n    const sortedBlogs = Blogs.sort(\r\n      (a, b) => a.date.getTime() - b.date.getTime()\r\n    );\r\n    return Object.entries(\r\n      sortedBlogs.reduce(\r\n        (Blogs, blog) => {\r\n          const date = blog.date.toISOString().split('T')[0];\r\n          Blogs[date] = Blogs[date]\r\n            ? [...Blogs[date], blog]\r\n            : [blog];\r\n          return Blogs;\r\n        },\r\n        {} as { [key: string]: IBlog[] }\r\n      )\r\n    );\r\n  }\r\n\r\n  @action loadBlogs = async () => {\r\n    this.loadingInitialBlog = true;\r\n    try {\r\n      const BlogsEnvelope = await agent.Blogs.list(this.axiosParamsBlog);\r\n      const {blogs, blogCount} = BlogsEnvelope;\r\n      runInAction(() => {\r\n        blogs.forEach(blog => {\r\n          setBlogProps(blog, this.rootStore.userStore.user!);\r\n          this.blogRegistry.set(blog.id, blog);\r\n        });\r\n        this.blogCount = blogCount;\r\n        this.loadingInitialBlog = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingInitialBlog = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action loadblog = async (id: string) => {\r\n    let blog = this.getblog(id);\r\n    if (blog) {\r\n      this.blog = blog;\r\n      return toJS(blog);\r\n    } else {\r\n      this.loadingInitialBlog = true;\r\n      try {\r\n        blog = await agent.Blogs.details(id);\r\n        runInAction(() => {\r\n          setBlogProps(blog, this.rootStore.userStore.user!);\r\n          this.blog = blog;\r\n          this.blogRegistry.set(blog.id, blog);\r\n          this.loadingInitialBlog = false;\r\n        });\r\n        return blog;\r\n      } catch (error) {\r\n        runInAction(() => {\r\n          this.loadingInitialBlog = false;\r\n        });\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  @action clearblog = () => {\r\n    this.blog = null;\r\n  };\r\n\r\n  getblog = (id: string) => {\r\n    return this.blogRegistry.get(id);\r\n  };\r\n\r\n  @action createblog = async (blog: IBlog) => {\r\n    this.submittingBlog = true;\r\n    try {\r\n      await agent.Blogs.create(blog);\r\n      const attendee = createLikedBlog(this.rootStore.userStore.user!);\r\n      attendee.isHost = true;\r\n      let attendees = [];\r\n      attendees.push(attendee);\r\n      blog.liked = attendees;\r\n      blog.isHost = true;\r\n      runInAction(() => {\r\n        this.blogRegistry.set(blog.id, blog);\r\n        this.submittingBlog = false;\r\n      });\r\n      history.push(`/blogs/${blog.id}`);\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingBlog = false;\r\n      });\r\n      toast.error('Problem submitting data');\r\n      console.log(error.response);\r\n    }\r\n  };\r\n\r\n  @action editblog = async (blog: IBlog) => {\r\n    this.submittingBlog = true;\r\n    try {\r\n      await agent.Blogs.update(blog);\r\n      runInAction(() => {\r\n        this.blogRegistry.set(blog.id, blog);\r\n        this.blog = blog;\r\n        this.submittingBlog = false;\r\n      });\r\n      history.push(`/blogs/${blog.id}`);\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingBlog = false;\r\n      });\r\n      toast.error('Problem submitting data');\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action deleteblog = async (\r\n    event: SyntheticEvent<HTMLButtonElement>,\r\n    id: string\r\n  ) => {\r\n    this.submittingBlog = true;\r\n    this.targetBlog = event.currentTarget.name;\r\n    try {\r\n      await agent.Blogs.delete(id);\r\n      runInAction(() => {\r\n        this.blogRegistry.delete(id);\r\n        this.submittingBlog = false;\r\n        this.targetBlog = '';\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingBlog = false;\r\n        this.targetBlog = '';\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action likeBlog = async () => {\r\n    const attendee = createLikedBlog(this.rootStore.userStore.user!);\r\n    this.loadingBlog = true;\r\n    try {\r\n      await agent.Blogs.like(this.blog!.id);\r\n      runInAction(() => {\r\n        if (this.blog) {\r\n          this.blog.liked.push(attendee);\r\n          this.blog.isLiked = true;\r\n          this.blogRegistry.set(this.blog.id, this.blog);\r\n          this.loadingBlog = false;\r\n        }\r\n      })\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingBlog = false;\r\n      })\r\n      toast.error('Problem signing up to blog');\r\n    }\r\n  };\r\n\r\n  @action unlikeBlog = async () => {\r\n    this.loadingBlog = true;\r\n    try {\r\n      await agent.Blogs.unlike(this.blog!.id);\r\n      runInAction(() => {\r\n        if (this.blog) {\r\n          this.blog.liked = this.blog.liked.filter(\r\n            a => a.username !== this.rootStore.userStore.user!.username\r\n          );\r\n          this.blog.isLiked = false;\r\n          this.blogRegistry.set(this.blog.id, this.blog);\r\n          this.loadingBlog = false;\r\n        }\r\n      })\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingBlog = false;\r\n      })\r\n      toast.error('Problem cancelling like');\r\n    }\r\n  };\r\n}\r\n","import { observable, action, computed, runInAction, reaction, toJS } from 'mobx';\r\nimport { SyntheticEvent } from 'react';\r\nimport { IExperience } from '../models/experience';\r\nimport agent from '../api/agent';\r\nimport { history } from '../..';\r\nimport { toast } from 'react-toastify';\r\nimport { RootStore } from './rootStore';\r\n// import { createAttendee } from '../common/util/util';\r\n// import {HubConnection, HubConnectionBuilder, LogLevel} from '@microsoft/signalr';\r\nimport { setExperienceProps } from '../common/util/util';\r\n\r\nconst LIMIT = 2;\r\n\r\n\r\nexport default class experienceStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n\r\n    reaction(\r\n      () => this.predicate.keys(),\r\n      () => {\r\n        this.page = 0;\r\n        this.experienceRegistry.clear();\r\n        this.loadExperiences();\r\n      }\r\n    )\r\n  }\r\n\r\n  @observable experienceRegistry = new Map();\r\n  @observable experience: IExperience | null = null;\r\n  @observable loadingInitialExperience = false;\r\n  @observable submitting = false;\r\n  @observable target = '';\r\n  @observable loading = false;\r\n//   @observable.ref hubConnection: HubConnection | null = null;\r\n  @observable experienceCount = 0;\r\n  @observable page = 0;\r\n  @observable predicate = new Map();\r\n\r\n  @action setPredicate = (predicate: string, value: string | Date) => {\r\n    this.predicate.clear();\r\n    if (predicate !== 'all') {\r\n      this.predicate.set(predicate, value);\r\n    }\r\n  }\r\n\r\n  @computed get axiosParams() {\r\n    const params = new URLSearchParams();\r\n    params.append('limit', String(LIMIT));\r\n    params.append('offset', `${this.page ? this.page * LIMIT : 0}`);\r\n    this.predicate.forEach((value, key) => {\r\n      if (key === 'startDate') {\r\n        params.append(key, value.toISOString())\r\n      } else {\r\n        params.append(key, value)\r\n      }\r\n    })\r\n    return params;\r\n  }\r\n\r\n  @computed get totalPages() {\r\n    return Math.ceil(this.experienceCount / LIMIT);\r\n  }\r\n\r\n  @action setPage = (page: number) => {\r\n    this.page = page;\r\n  }\r\n\r\n//   @action createHubConnection = (experienceId: string) => {\r\n//     this.hubConnection = new HubConnectionBuilder()\r\n//       .withUrl(process.env.REACT_APP_API_CHAT_URL!, {\r\n//         accessTokenFactory: () => this.rootStore.commonStore.token!\r\n//       })\r\n//       .configureLogging(LogLevel.Information)\r\n//       .build();\r\n\r\n//     this.hubConnection\r\n//       .start()\r\n//       .then(() => console.log(this.hubConnection!.state))\r\n//       .then(() => {\r\n//         console.log('Attempting to join group');\r\n//         this.hubConnection!.invoke('AddToGroup', experienceId)\r\n//       })\r\n//       .catch(error => console.log('Error establishing connection: ', error));\r\n\r\n//     this.hubConnection.on('ReceiveComment', comment => {\r\n//       runInAction(() => {\r\n//         this.experience!.comments.push(comment)\r\n//       })\r\n//     })\r\n\r\n//     this.hubConnection.on('Send', message => {\r\n//       toast.info(message);\r\n//     })\r\n//   };\r\n\r\n//   @action stopHubConnection = () => {\r\n//     this.hubConnection!.invoke('RemoveFromGroup', this.experience!.id)\r\n//       .then(() => {\r\n//         this.hubConnection!.stop()\r\n//       })\r\n//       .then(() => console.log('Connection stopped'))\r\n//       .catch(err => console.log(err))\r\n//   }\r\n\r\n//   @action addComment = async (values: any) => {\r\n//     values.experienceId = this.experience!.id;\r\n//     try {\r\n//       await this.hubConnection!.invoke('SendComment', values)\r\n//     } catch (error) {\r\n//       console.log(error);\r\n//     }\r\n//   } \r\n\r\n\r\n  @computed get experiencesByDate() {\r\n    return this.groupexperiencesByDate(\r\n      Array.from(this.experienceRegistry.values())\r\n    );\r\n  }\r\n\r\n  groupexperiencesByDate(experiences: IExperience[]) {\r\n    const sortedexperiences = experiences.sort(\r\n      (a, b) => a.date.getTime() - b.date.getTime()\r\n    );\r\n    return Object.entries(\r\n      sortedexperiences.reduce(\r\n        (experiences, experience) => {\r\n          const date = experience.date.toISOString().split('T')[0];\r\n          experiences[date] = experiences[date]\r\n            ? [...experiences[date], experience]\r\n            : [experience];\r\n          return experiences;\r\n        },\r\n        {} as { [key: string]: IExperience[] }\r\n      )\r\n    );\r\n  }\r\n\r\n  @action loadExperiences = async () => {\r\n    this.loadingInitialExperience = true;\r\n    try {\r\n      const experienceEnvelope = await agent.Experiences.list(this.axiosParams);\r\n      const {experiences, experienceCount} = experienceEnvelope;\r\n      runInAction('loading experiences', () => {\r\n        experiences.forEach(experience => {\r\n          setExperienceProps(experience, this.rootStore.userStore.user!);\r\n          this.experienceRegistry.set(experience.id, experience);\r\n        });\r\n        this.experienceCount = experienceCount;\r\n        this.loadingInitialExperience = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction('load experience error', () => {\r\n        this.loadingInitialExperience = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action loadExperience = async (id: string) => {\r\n    let experience = this.getExperience(id);\r\n    if (experience) {\r\n      this.experience = experience;\r\n      return toJS(experience);\r\n    } else {\r\n      this.loadingInitialExperience = true;\r\n      try {\r\n        experience = await agent.Experiences.details(id);\r\n        runInAction('getting experience', () => {\r\n        //   setexperienceProps(experience, this.rootStore.userStore.user!);\r\n          this.experience = experience;\r\n          this.experienceRegistry.set(experience.id, experience);\r\n          this.loadingInitialExperience = false;\r\n        });\r\n        return experience;\r\n      } catch (error) {\r\n        runInAction('get experience error', () => {\r\n          this.loadingInitialExperience = false;\r\n        });\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  @action clearExperience = () => {\r\n    this.experience = null;\r\n  };\r\n\r\n  getExperience = (id: string) => {\r\n    return this.experienceRegistry.get(id);\r\n  };\r\n\r\n  @action createExperience = async (experience: IExperience) => {\r\n    this.submitting = true;\r\n    try {\r\n      await agent.Experiences.create(experience);\r\n      // const attendee = createAttendee(this.rootStore.userStore.user!);\r\n      // attendee.isHost = true;\r\n      // let attendees = [];\r\n      // attendees.push(attendee);\r\n      // experience.Applied = attendees;\r\n      experience.isHost = true;\r\n      runInAction('create experience', () => {\r\n        this.experienceRegistry.set(experience.id, experience);\r\n        this.submitting = false;\r\n      });\r\n      history.push(`/experiences/${experience.id}`);\r\n    } catch (error) {\r\n      runInAction('create experience error', () => {\r\n        this.submitting = false;\r\n      });\r\n      toast.error('Problem submitting data');\r\n      console.log(error.response);\r\n    }\r\n  };\r\n\r\n  @action editExperience = async (experience: IExperience) => {\r\n    this.submitting = true;\r\n    try {\r\n      await agent.Experiences.update(experience);\r\n      runInAction('editing experience', () => {\r\n        this.experienceRegistry.set(experience.id, experience);\r\n        this.experience = experience;\r\n        this.submitting = false;\r\n      });\r\n      history.push(`/experiences/${experience.id}`);\r\n    } catch (error) {\r\n      runInAction('edit experience error', () => {\r\n        this.submitting = false;\r\n      });\r\n      toast.error('Problem submitting data');\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action deleteExperience = async (\r\n    event: SyntheticEvent<HTMLButtonElement>,\r\n    id: string\r\n  ) => {\r\n    this.submitting = true;\r\n    this.target = event.currentTarget.name;\r\n    try {\r\n      await agent.Experiences.delete(id);\r\n      runInAction('deleting experience', () => {\r\n        this.experienceRegistry.delete(id);\r\n        this.submitting = false;\r\n        this.target = '';\r\n      });\r\n    } catch (error) {\r\n      runInAction('delete experience error', () => {\r\n        this.submitting = false;\r\n        this.target = '';\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n \r\n\r\n\r\n}\r\n","import { observable, action, computed, runInAction, reaction, toJS } from 'mobx';\r\nimport { SyntheticEvent } from 'react';\r\nimport { IBusiness } from '../models/business';\r\nimport agent from '../api/agent';\r\nimport { history } from '../..';\r\nimport { toast } from 'react-toastify';\r\nimport { RootStore } from './rootStore';\r\nimport { createLikedBusiness, setBusinessProps } from '../common/util/util';\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\n\r\nconst LIMIT = 2;\r\n\r\n\r\nexport default class businessStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n\r\n    reaction(\r\n      () => this.predicateBusiness.keys(),\r\n      () => {\r\n        this.pageBusiness = 0;\r\n        this.businessRegistry.clear();\r\n        this.loadBusinesses();\r\n      }\r\n    )\r\n  }\r\n\r\n  @observable businessRegistry = new Map();\r\n  @observable business: IBusiness | null = null;\r\n  @observable loadingInitialBusiness = false;\r\n  @observable submittingBusiness = false;\r\n  @observable targetBusiness = '';\r\n  @observable loadingBusiness = false;\r\n  @observable.ref hubConnectionBusiness: HubConnection | null = null;\r\n  @observable businessCount = 0;\r\n  @observable pageBusiness = 0;\r\n  @observable predicateBusiness = new Map();\r\n\r\n  @action setPredicateBusiness = (predicate: string, value: string | Date) => {\r\n    this.predicateBusiness.clear();\r\n    if (predicate !== 'all') {\r\n      this.predicateBusiness.set(predicate, value);\r\n    }\r\n  }\r\n\r\n  @computed get axiosParamsBusiness() {\r\n    const params = new URLSearchParams();\r\n    params.append('limit', String(LIMIT));\r\n    params.append('offset', `${this.pageBusiness ? this.pageBusiness * LIMIT : 0}`);\r\n    this.predicateBusiness.forEach((value, key) => {\r\n      if (key === 'startDate') {\r\n        params.append(key, value.toISOString())\r\n      } else {\r\n        params.append(key, value)\r\n      }\r\n    })\r\n    return params;\r\n  }\r\n\r\n  @computed get totalPagesBusiness() {\r\n    return Math.ceil(this.businessCount / LIMIT);\r\n  }\r\n\r\n  @action setPageBusiness = (page: number) => {\r\n    this.pageBusiness = page;\r\n  }\r\n\r\n  // @action createHubConnectionBusiness = (businessId: string) => {\r\n  //   if (!this.hubConnectionBusiness) {\r\n  //   this.hubConnectionBusiness = new HubConnectionBuilder()\r\n  //     .withUrl(process.env.REACT_APP_API_BLOGCHAT_URL!, {\r\n  //       accessTokenFactory: () => this.rootStore.commonStore.token!\r\n  //     })\r\n  //     .configureLogging(LogLevel.Information)\r\n  //     .build();\r\n\r\n  //     this.hubConnectionBusiness.on('ReceiveBusinessComment', (comment) => runInAction(() => this.business!.comments.push(comment)));\r\n  //     this.hubConnectionBusiness.on('SendBusiness', (message) => {/*toast.info(message)*/});\r\n\r\n  //   }\r\n  //     if (this.hubConnectionBusiness!.state === \"Disconnected\") {\r\n  //   this.hubConnectionBusiness\r\n  //     .start()\r\n  //     .then(() => console.log(this.hubConnectionBusiness!.state))\r\n  //     .then(() => {\r\n  //       console.log('Attempting to join group');\r\n  //       this.hubConnectionBusiness!.invoke('AddToGroupBusiness', businessId)\r\n  //     })\r\n  //     .catch(error => console.log('Error establishing connection: ', error));\r\n  //   } else if(this.hubConnectionBusiness!.state === 'Connected'){\r\n  //     this.hubConnectionBusiness!.invoke('AddToGroup', businessId);\r\n  //   }\r\n\r\n  //   this.hubConnectionBusiness.on('ReceiveBusinessComment', comment => {\r\n  //     runInAction(() => {\r\n  //       this.business!.comments.push(comment)\r\n  //     })\r\n  //   })\r\n\r\n  //   this.hubConnectionBusiness.on('SendBusiness', message => {\r\n  //     toast.info(message);\r\n  //   })\r\n  // };\r\n\r\n  // @action stopHubConnectionBusiness = () => {\r\n  //   if (this.hubConnectionBusiness?.state === \"Connected\") {\r\n  //   this.hubConnectionBusiness!.invoke('RemoveFromGroupBusiness', this.business!.id)\r\n  //     .then(() => {\r\n  //       this.hubConnectionBusiness!.stop()\r\n  //     })\r\n  //     .then(() => console.log('Connection stopped'))\r\n  //     .catch(err => console.log(err))\r\n  // }}\r\n\r\n  // @action addCommentBusiness = async (values: any) => {\r\n  //   values.businessId = this.business!.id;\r\n  //   try {\r\n  //     await this.hubConnectionBusiness!.invoke('SendCommentBusiness', values)\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n  //   }\r\n  // } \r\n  @action createHubConnectionBusiness = (businessId: string) => {\r\n    this.hubConnectionBusiness = new HubConnectionBuilder()\r\n      .withUrl(process.env.REACT_APP_API_BUSINESSCHAT_URL!, {\r\n        accessTokenFactory: () => this.rootStore.commonStore.token!\r\n      })\r\n      .configureLogging(LogLevel.Information)\r\n      .build();\r\n\r\n    this.hubConnectionBusiness\r\n      .start()\r\n      .then(() => console.log(this.hubConnectionBusiness!.state))\r\n      .then(() => {\r\n        console.log('Attempting to join group');\r\n        this.hubConnectionBusiness!.invoke('AddToGroupBusiness', businessId)\r\n      })\r\n      .catch(error => console.log('Error establishing connection: ', error));\r\n    // below 'RecieveComment' is related to API.SignalR.HubCOnnection line40\r\n    this.hubConnectionBusiness.on('ReceiveBusinessComment', comment => {\r\n      console.log(comment)\r\n      runInAction(() => {\r\n        this.business!.businessComments.push(comment)\r\n      })\r\n    })\r\n\r\n    this.hubConnectionBusiness.on('SendBusiness', message => {\r\n      toast.info(message);\r\n    })\r\n  };\r\n\r\n  @action stopHubConnectionBusiness = () => {\r\n    this.hubConnectionBusiness!.invoke('RemoveFromGroupBusiness', this.business!.id)\r\n      .then(() => {\r\n        this.hubConnectionBusiness!.stop()\r\n      })\r\n      .then(() => console.log('Connection stopped'))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  @action addCommentBusiness = async (values: any) => {\r\n    // below values.activityId needs to match whats in Application.create.cs\r\n    values.businessId = this.business!.id;\r\n    try {\r\n      await this.hubConnectionBusiness!.invoke('SendCommentBusiness', values)\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n\r\n  @computed get BusinessesByDate() {\r\n    return this.groupBusinessesByDate(\r\n      Array.from(this.businessRegistry.values())\r\n    );\r\n  }\r\n  groupBusinessesByName(businesses: IBusiness[]){\r\n\r\n  }\r\n  groupBusinessesByDate(businesses: IBusiness[]) {\r\n    const sortedBusinesses = businesses.sort(\r\n      (a, b) => a.date.getTime() - b.date.getTime()\r\n      // (a, b) => a.date.getDate() - b.date.getDate()\r\n    );\r\n    return Object.entries(\r\n      sortedBusinesses.reduce(\r\n        (businesses, business) => {\r\n          // const date = business.date.toISOString().split('T')[0] || business.date.toUTCString();\r\n          // const date = business.date;\r\n          const date = business.date.toISOString().split('T')[0];\r\n          businesses[date] = businesses[date]\r\n            ? [...businesses[date], business]\r\n            : [business];\r\n          return businesses;\r\n        },\r\n        {} as { [key: string]: IBusiness[] }\r\n      )\r\n    );\r\n  }\r\n\r\n  @action loadBusinesses = async () => {\r\n    this.loadingInitialBusiness = true;\r\n    try {\r\n      const BusinessesEnvelope = await agent.Businesses.list(this.axiosParamsBusiness);\r\n      const { businesses, businessCount } = BusinessesEnvelope;\r\n      runInAction(() => {\r\n        businesses.forEach(business => {\r\n          setBusinessProps(business, this.rootStore.userStore.user!);\r\n          this.businessRegistry.set(business.id, business);\r\n        });\r\n        this.businessCount = businessCount;\r\n        this.loadingInitialBusiness = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingInitialBusiness = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action loadbusiness = async (id: string) => {\r\n    let business = this.getbusiness(id);\r\n    if (business) {\r\n      this.business = business;\r\n      return toJS(business);\r\n    } else {\r\n      this.loadingInitialBusiness = true;\r\n      try {\r\n        business = await agent.Businesses.details(id);\r\n        runInAction(() => {\r\n          setBusinessProps(business, this.rootStore.userStore.user!);\r\n          this.business = business;\r\n          this.businessRegistry.set(business.id, business);\r\n          this.loadingInitialBusiness = false;\r\n        });\r\n        return business;\r\n      } catch (error) {\r\n        runInAction(() => {\r\n          this.loadingInitialBusiness = false;\r\n        });\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  @action clearbusiness = () => {\r\n    this.business = null;\r\n  };\r\n\r\n  getbusiness = (id: string) => {\r\n    return this.businessRegistry.get(id);\r\n  };\r\n\r\n  @action createbusiness = async (business: IBusiness) => {\r\n    this.submittingBusiness = true;\r\n    try {\r\n      await agent.Businesses.create(business);\r\n      const attendee = createLikedBusiness(this.rootStore.userStore.user!);\r\n      attendee.isHost = true;\r\n      let attendees = [];\r\n      attendees.push(attendee);\r\n      business.liked = attendees;\r\n      business.isHost = true;\r\n      runInAction(() => {\r\n        this.businessRegistry.set(business.id, business);\r\n        this.submittingBusiness = false;\r\n      });\r\n      history.push(`/businesses/${business.id}`);\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingBusiness = false;\r\n      });\r\n      toast.error('Problem submitting data');\r\n      console.log(error.response);\r\n    }\r\n  };\r\n\r\n  @action editbusiness = async (business: IBusiness) => {\r\n    this.submittingBusiness = true;\r\n    try {\r\n      await agent.Businesses.update(business);\r\n      runInAction(() => {\r\n        this.businessRegistry.set(business.id, business);\r\n        this.business = business;\r\n        this.submittingBusiness = false;\r\n      });\r\n      history.push(`/businesses/${business.id}`);\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingBusiness = false;\r\n      });\r\n      toast.error('Problem submitting data');\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action deletebusiness = async (\r\n    event: SyntheticEvent<HTMLButtonElement>,\r\n    id: string\r\n  ) => {\r\n    this.submittingBusiness = true;\r\n    this.targetBusiness = event.currentTarget.name;\r\n    try {\r\n      await agent.Businesses.delete(id);\r\n      runInAction(() => {\r\n        this.businessRegistry.delete(id);\r\n        this.submittingBusiness = false;\r\n        this.targetBusiness = '';\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingBusiness = false;\r\n        this.targetBusiness = '';\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action likeBusiness = async () => {\r\n    const attendee = createLikedBusiness(this.rootStore.userStore.user!);\r\n    this.loadingBusiness = true;\r\n    try {\r\n      await agent.Businesses.like(this.business!.id);\r\n      runInAction(() => {\r\n        if (this.business) {\r\n          this.business.liked.push(attendee);\r\n          this.business.isLiked = true;\r\n          this.businessRegistry.set(this.business.id, this.business);\r\n          this.loadingBusiness = false;\r\n        }\r\n      })\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingBusiness = false;\r\n      })\r\n      toast.error('Problem signing up to business');\r\n    }\r\n  };\r\n\r\n  @action unlikeBusiness = async () => {\r\n    this.loadingBusiness = true;\r\n    try {\r\n      await agent.Businesses.unlike(this.business!.id);\r\n      runInAction(() => {\r\n        if (this.business) {\r\n          this.business.liked = this.business.liked.filter(\r\n            a => a.username !== this.rootStore.userStore.user!.username\r\n          );\r\n          this.business.isLiked = false;\r\n          this.businessRegistry.set(this.business.id, this.business);\r\n          this.loadingBusiness = false;\r\n        }\r\n      })\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingBusiness = false;\r\n      })\r\n      toast.error('Problem cancelling like');\r\n    }\r\n  };\r\n}\r\n","import { observable, action, computed, runInAction, reaction, toJS } from 'mobx';\r\nimport { SyntheticEvent } from 'react';\r\nimport { IPost } from '../models/post';\r\nimport agent from '../api/agent';\r\nimport { history } from '../..';\r\nimport { toast } from 'react-toastify';\r\nimport { RootStore } from './rootStore';\r\nimport { createLikedPost, setPostProps } from '../common/util/util';\r\nimport {HubConnection, HubConnectionBuilder, LogLevel} from '@microsoft/signalr';\r\n\r\nconst LIMIT = 2;\r\n\r\n\r\nexport default class postStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n\r\n    reaction(\r\n      () => this.predicatePost.keys(),\r\n      () => {\r\n        this.pagePost = 0;\r\n        this.postRegistry.clear();\r\n        this.loadPosts();\r\n      }\r\n    )\r\n  }\r\n\r\n  @observable postRegistry = new Map();\r\n  @observable post: IPost | null = null;\r\n  @observable loadingInitialPost = false;\r\n  @observable submittingPost = false;\r\n  @observable targetPost = '';\r\n  @observable loadingPost = false;\r\n  @observable.ref hubConnectionPost: HubConnection | null = null;\r\n  @observable postCount = 0;\r\n  @observable pagePost = 0;\r\n  @observable predicatePost = new Map();\r\n  @observable currentCategory = '';\r\n\r\n  @action setPredicatePost = (predicate: string, value: string | Date) => {\r\n    this.predicatePost.clear();\r\n    if (predicate !== 'all') {\r\n      this.predicatePost.set(predicate, value);\r\n    }\r\n  }\r\n\r\n  @computed get axiosParamsPost() {\r\n    const params = new URLSearchParams();\r\n    params.append('limit', String(LIMIT));\r\n    params.append('offset', `${this.pagePost ? this.pagePost * LIMIT : 0}`);\r\n    this.predicatePost.forEach((value, key) => {\r\n      if (key === 'startDate') {\r\n        params.append(key, value.toISOString())\r\n      } else {\r\n        params.append(key, value)\r\n      }\r\n    })\r\n    return params;\r\n  }\r\n\r\n  @computed get totalPagesPost() {\r\n    return Math.ceil(this.postCount / LIMIT);\r\n  }\r\n\r\n  @action setPagePost = (page: number) => {\r\n    this.pagePost = page;\r\n  }\r\n\r\n  // @action createHubConnectionPost = (postId: string) => {\r\n  //   if (!this.hubConnectionPost) {\r\n  //   this.hubConnectionPost = new HubConnectionBuilder()\r\n  //     .withUrl(process.env.REACT_APP_API_BLOGCHAT_URL!, {\r\n  //       accessTokenFactory: () => this.rootStore.commonStore.token!\r\n  //     })\r\n  //     .configureLogging(LogLevel.Information)\r\n  //     .build();\r\n\r\n  //     this.hubConnectionPost.on('ReceivePostComment', (comment) => runInAction(() => this.post!.comments.push(comment)));\r\n  //     this.hubConnectionPost.on('SendPost', (message) => {/*toast.info(message)*/});\r\n\r\n  //   }\r\n  //     if (this.hubConnectionPost!.state === \"Disconnected\") {\r\n  //   this.hubConnectionPost\r\n  //     .start()\r\n  //     .then(() => console.log(this.hubConnectionPost!.state))\r\n  //     .then(() => {\r\n  //       console.log('Attempting to join group');\r\n  //       this.hubConnectionPost!.invoke('AddToGroupPost', postId)\r\n  //     })\r\n  //     .catch(error => console.log('Error establishing connection: ', error));\r\n  //   } else if(this.hubConnectionPost!.state === 'Connected'){\r\n  //     this.hubConnectionPost!.invoke('AddToGroup', postId);\r\n  //   }\r\n  \r\n  //   this.hubConnectionPost.on('ReceivePostComment', comment => {\r\n  //     runInAction(() => {\r\n  //       this.post!.comments.push(comment)\r\n  //     })\r\n  //   })\r\n\r\n  //   this.hubConnectionPost.on('SendPost', message => {\r\n  //     toast.info(message);\r\n  //   })\r\n  // };\r\n\r\n  // @action stopHubConnectionPost = () => {\r\n  //   if (this.hubConnectionPost?.state === \"Connected\") {\r\n  //   this.hubConnectionPost!.invoke('RemoveFromGroupPost', this.post!.id)\r\n  //     .then(() => {\r\n  //       this.hubConnectionPost!.stop()\r\n  //     })\r\n  //     .then(() => console.log('Connection stopped'))\r\n  //     .catch(err => console.log(err))\r\n  // }}\r\n\r\n  // @action addCommentPost = async (values: any) => {\r\n  //   values.postId = this.post!.id;\r\n  //   try {\r\n  //     await this.hubConnectionPost!.invoke('SendCommentPost', values)\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n  //   }\r\n  // } \r\n  @action createHubConnectionPost = (postId: string) => {\r\n    this.hubConnectionPost = new HubConnectionBuilder()\r\n      .withUrl(process.env.REACT_APP_API_POSTCHAT_URL!, {\r\n        accessTokenFactory: () => this.rootStore.commonStore.token!\r\n      })\r\n      .configureLogging(LogLevel.Information)\r\n      .build();\r\n\r\n    this.hubConnectionPost\r\n      .start()\r\n      .then(() => console.log(this.hubConnectionPost!.state))\r\n      .then(() => {\r\n        console.log('Attempting to join group');\r\n        this.hubConnectionPost!.invoke('AddToGroupPost', postId)\r\n      })\r\n      .catch(error => console.log('Error establishing connection: ', error));\r\n// below 'RecieveComment' is related to API.SignalR.HubCOnnection line40\r\n    this.hubConnectionPost.on('ReceivePostComment', comment => {\r\n      console.log(comment)\r\n      runInAction(() => {\r\n        this.post!.postComments.push(comment)\r\n      })\r\n    })\r\n\r\n    this.hubConnectionPost.on('SendPost', message => {\r\n      toast.info(message);\r\n    })\r\n  };\r\n\r\n  @action stopHubConnectionPost = () => {\r\n    this.hubConnectionPost!.invoke('RemoveFromGroupPost', this.post!.id)\r\n      .then(() => {\r\n        this.hubConnectionPost!.stop()\r\n      })\r\n      .then(() => console.log('Connection stopped'))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  @action addCommentPost = async (values: any) => {\r\n    // below values.activityId needs to match whats in Application.create.cs\r\n    values.postId = this.post!.id;\r\n    try {\r\n      await this.hubConnectionPost!.invoke('SendCommentPost', values)\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  } \r\n\r\n\r\n  @computed get PostsByDate() {\r\n    return this.groupPostsByDate(\r\n      Array.from(this.postRegistry.values())\r\n    );\r\n  }\r\n\r\n  groupPostsByDate(Posts: IPost[]) {\r\n    const sortedPosts = Posts.sort(\r\n      (a, b) => a.date.getTime() - b.date.getTime()\r\n    );\r\n    return Object.entries(\r\n      sortedPosts.reduce(\r\n        (Posts, post) => {\r\n          const date = post.date.toISOString().split('T')[0];\r\n          Posts[date] = Posts[date]\r\n            ? [...Posts[date], post]\r\n            : [post];\r\n          return Posts;\r\n        },\r\n        {} as { [key: string]: IPost[] }\r\n      )\r\n    );\r\n  }\r\n\r\n\r\n  @action loadPosts = async () => {\r\n    this.loadingInitialPost = true;\r\n    try {\r\n      const PostsEnvelope = await agent.Posts.list(this.axiosParamsPost);\r\n      const {posts, postCount} = PostsEnvelope;\r\n      runInAction(() => {\r\n        posts.forEach(post => {\r\n          setPostProps(post, this.rootStore.userStore.user!);\r\n          this.postRegistry.set(post.id, post);\r\n        });\r\n        this.postCount = postCount;\r\n        this.loadingInitialPost = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingInitialPost = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action loadpost = async (id: string) => {\r\n    let post = this.getpost(id);\r\n    if (post) {\r\n      this.post = post;\r\n      return toJS(post);\r\n    } else {\r\n      this.loadingInitialPost = true;\r\n      try {\r\n        post = await agent.Posts.details(id);\r\n        runInAction(() => {\r\n          setPostProps(post, this.rootStore.userStore.user!);\r\n          this.post = post;\r\n          this.postRegistry.set(post.id, post);\r\n          this.loadingInitialPost = false;\r\n        });\r\n        return post;\r\n      } catch (error) {\r\n        runInAction(() => {\r\n          this.loadingInitialPost = false;\r\n        });\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  @action clearpost = () => {\r\n    this.post = null;\r\n  };\r\n\r\n  getpost = (id: string) => {\r\n    return this.postRegistry.get(id);\r\n  };\r\n\r\n  @action createProgram = async (post: IPost) => {\r\n    this.submittingPost = true;\r\n    try {\r\n      await agent.Posts.create(post);\r\n      const attendee = createLikedPost(this.rootStore.userStore.user!);\r\n      attendee.isHost = true;\r\n      let attendees = [];\r\n      attendees.push(attendee);\r\n      post.liked = attendees;\r\n      post.isHost = true;\r\n      runInAction(() => {\r\n        this.postRegistry.set(post.id, post);\r\n        this.submittingPost = false;\r\n      });\r\n      history.push(`/programs/${post.id}`);\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingPost = false;\r\n      });\r\n      toast.error('Problem submitting data');\r\n      console.log(error.response);\r\n    }\r\n  };\r\n\r\n  @action editpost = async (post: IPost) => {\r\n    this.submittingPost = true;\r\n    try {\r\n      await agent.Posts.update(post);\r\n      runInAction(() => {\r\n        this.postRegistry.set(post.id, post);\r\n        this.post = post;\r\n        this.submittingPost = false;\r\n      });\r\n      history.push(`/programs/${post.id}`);\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingPost = false;\r\n      });\r\n      toast.error('Problem submitting data');\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action deletepost = async (\r\n    event: SyntheticEvent<HTMLButtonElement>,\r\n    id: string\r\n  ) => {\r\n    this.submittingPost = true;\r\n    this.targetPost = event.currentTarget.name;\r\n    try {\r\n      await agent.Posts.delete(id);\r\n      runInAction(() => {\r\n        this.postRegistry.delete(id);\r\n        this.submittingPost = false;\r\n        this.targetPost = '';\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingPost = false;\r\n        this.targetPost = '';\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action likePost = async () => {\r\n    const attendee = createLikedPost(this.rootStore.userStore.user!);\r\n    this.loadingPost = true;\r\n    try {\r\n      await agent.Posts.like(this.post!.id);\r\n      runInAction(() => {\r\n        if (this.post) {\r\n          this.post.liked.push(attendee);\r\n          this.post.isLiked = true;\r\n          this.postRegistry.set(this.post.id, this.post);\r\n          this.loadingPost = false;\r\n        }\r\n      })\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingPost = false;\r\n      })\r\n      toast.error('Problem signing up to post');\r\n    }\r\n  };\r\n\r\n  @action unlikePost = async () => {\r\n    this.loadingPost = true;\r\n    try {\r\n      await agent.Posts.unlike(this.post!.id);\r\n      runInAction(() => {\r\n        if (this.post) {\r\n          this.post.liked = this.post.liked.filter(\r\n            a => a.username !== this.rootStore.userStore.user!.username\r\n          );\r\n          this.post.isLiked = false;\r\n          this.postRegistry.set(this.post.id, this.post);\r\n          this.loadingPost = false;\r\n        }\r\n      })\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingPost = false;\r\n      })\r\n      toast.error('Problem cancelling like');\r\n    }\r\n  };\r\n}\r\n","import { observable, action, computed, runInAction, reaction, toJS } from 'mobx';\r\nimport { SyntheticEvent } from 'react';\r\nimport { IMessage } from '../models/message';\r\nimport agent from '../api/agent';\r\nimport { history } from '../..';\r\nimport { toast } from 'react-toastify';\r\nimport { RootStore } from './rootStore';\r\nimport { createMyMessagesMessage, setMessageProps } from '../common/util/util';\r\nimport {HubConnection, HubConnectionBuilder, LogLevel} from '@microsoft/signalr';\r\n\r\nconst LIMIT = 2;\r\n\r\n\r\nexport default class messageStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n\r\n    reaction(\r\n      () => this.predicateMessage.keys(),\r\n      () => {\r\n        this.pageMessage = 0;\r\n        this.messageRegistry.clear();\r\n        this.loadMessages();\r\n      }\r\n    )\r\n  }\r\n\r\n  @observable messageRegistry = new Map();\r\n  @observable message: IMessage | null = null;\r\n  @observable loadingInitialMessage = false;\r\n  @observable submittingMessage = false;\r\n  @observable targetMessage = '';\r\n  @observable loadingMessage = false;\r\n  @observable.ref hubConnectionMessage: HubConnection | null = null;\r\n  @observable messageCount = 0;\r\n  @observable pageMessage = 0;\r\n  @observable predicateMessage = new Map();\r\n\r\n  @action setPredicateMessage = (predicate: string, value: string | Date) => {\r\n    this.predicateMessage.clear();\r\n    if (predicate !== 'all') {\r\n      this.predicateMessage.set(predicate, value);\r\n    }\r\n  }\r\n\r\n  @computed get axiosParamsMessage() {\r\n    const params = new URLSearchParams();\r\n    params.append('limit', String(LIMIT));\r\n    params.append('offset', `${this.pageMessage ? this.pageMessage * LIMIT : 0}`);\r\n    this.predicateMessage.forEach((value, key) => {\r\n      if (key === 'startDate') {\r\n        params.append(key, value.toISOString())\r\n      } else {\r\n        params.append(key, value)\r\n      }\r\n    })\r\n    return params;\r\n  }\r\n\r\n  @computed get totalPagesMessage() {\r\n    return Math.ceil(this.messageCount / LIMIT);\r\n  }\r\n\r\n  @action setPageMessage = (page: number) => {\r\n    this.pageMessage = page;\r\n  }\r\n\r\n  // @action createHubConnectionMessage = (messageId: string) => {\r\n  //   if (!this.hubConnectionMessage) {\r\n  //   this.hubConnectionMessage = new HubConnectionBuilder()\r\n  //     .withUrl(process.env.REACT_APP_API_BLOGCHAT_URL!, {\r\n  //       accessTokenFactory: () => this.rootStore.commonStore.token!\r\n  //     })\r\n  //     .configureLogging(LogLevel.Information)\r\n  //     .build();\r\n\r\n  //     this.hubConnectionMessage.on('ReceiveMessageComment', (comment) => runInAction(() => this.message!.comments.push(comment)));\r\n  //     this.hubConnectionMessage.on('SendMessage', (message) => {/*toast.info(message)*/});\r\n\r\n  //   }\r\n  //     if (this.hubConnectionMessage!.state === \"Disconnected\") {\r\n  //   this.hubConnectionMessage\r\n  //     .start()\r\n  //     .then(() => console.log(this.hubConnectionMessage!.state))\r\n  //     .then(() => {\r\n  //       console.log('Attempting to join group');\r\n  //       this.hubConnectionMessage!.invoke('AddToGroupMessage', messageId)\r\n  //     })\r\n  //     .catch(error => console.log('Error establishing connection: ', error));\r\n  //   } else if(this.hubConnectionMessage!.state === 'Connected'){\r\n  //     this.hubConnectionMessage!.invoke('AddToGroup', messageId);\r\n  //   }\r\n  \r\n  //   this.hubConnectionMessage.on('ReceiveMessageComment', comment => {\r\n  //     runInAction(() => {\r\n  //       this.message!.comments.push(comment)\r\n  //     })\r\n  //   })\r\n\r\n  //   this.hubConnectionMessage.on('SendMessage', message => {\r\n  //     toast.info(message);\r\n  //   })\r\n  // };\r\n\r\n  // @action stopHubConnectionMessage = () => {\r\n  //   if (this.hubConnectionMessage?.state === \"Connected\") {\r\n  //   this.hubConnectionMessage!.invoke('RemoveFromGroupMessage', this.message!.id)\r\n  //     .then(() => {\r\n  //       this.hubConnectionMessage!.stop()\r\n  //     })\r\n  //     .then(() => console.log('Connection stopped'))\r\n  //     .catch(err => console.log(err))\r\n  // }}\r\n\r\n  // @action addCommentMessage = async (values: any) => {\r\n  //   values.messageId = this.message!.id;\r\n  //   try {\r\n  //     await this.hubConnectionMessage!.invoke('SendCommentMessage', values)\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n  //   }\r\n  // } \r\n  @action createHubConnectionMessage = (messageId: string) => {\r\n    this.hubConnectionMessage = new HubConnectionBuilder()\r\n      .withUrl(process.env.REACT_APP_API_MESSAGECHAT_URL!, {\r\n        accessTokenFactory: () => this.rootStore.commonStore.token!\r\n      })\r\n      .configureLogging(LogLevel.Information)\r\n      .build();\r\n\r\n    this.hubConnectionMessage\r\n      .start()\r\n      .then(() => console.log(this.hubConnectionMessage!.state))\r\n      .then(() => {\r\n        console.log('Attempting to join group');\r\n        this.hubConnectionMessage!.invoke('AddToGroupMessage', messageId)\r\n      })\r\n      .catch(error => console.log('Error establishing connection: ', error));\r\n// below 'RecieveComment' is related to API.SignalR.HubCOnnection line40\r\n    this.hubConnectionMessage.on('ReceiveMessageComment', comment => {\r\n      console.log(comment)\r\n      runInAction(() => {\r\n        this.message!.messageComments.push(comment)\r\n      })\r\n    })\r\n\r\n    this.hubConnectionMessage.on('SendMessage', message => {\r\n      toast.info(message);\r\n    })\r\n  };\r\n\r\n  @action stopHubConnectionMessage = () => {\r\n    this.hubConnectionMessage!.invoke('RemoveFromGroupMessage', this.message!.id)\r\n      .then(() => {\r\n        this.hubConnectionMessage!.stop()\r\n      })\r\n      .then(() => console.log('Connection stopped'))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  @action addCommentMessage = async (values: any) => {\r\n    // below values.activityId needs to match whats in Application.create.cs\r\n    values.messageId = this.message!.id;\r\n    try {\r\n      await this.hubConnectionMessage!.invoke('SendCommentMessage', values)\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  } \r\n\r\n\r\n  @computed get MessagesByDate() {\r\n    return this.groupMessagesByDate(\r\n      Array.from(this.messageRegistry.values())\r\n    );\r\n  }\r\n\r\n  groupMessagesByDate(Messages: IMessage[]) {\r\n    const sortedMessages = Messages.sort(\r\n      (a, b) => a.date.getTime() - b.date.getTime()\r\n    );\r\n    return Object.entries(\r\n      sortedMessages.reduce(\r\n        (Messages, message) => {\r\n          const date = message.date.toISOString().split('T')[0];\r\n          Messages[date] = Messages[date]\r\n            ? [...Messages[date], message]\r\n            : [message];\r\n          return Messages;\r\n        },\r\n        {} as { [key: string]: IMessage[] }\r\n      )\r\n    );\r\n  }\r\n\r\n  @action loadMessages = async () => {\r\n    this.loadingInitialMessage = true;\r\n    try {\r\n      const MessagesEnvelope = await agent.Messages.list(this.axiosParamsMessage);\r\n      const {messages, messageCount} = MessagesEnvelope;\r\n      runInAction(() => {\r\n        messages.forEach(message => {\r\n          setMessageProps(message, this.rootStore.userStore.user!);\r\n          this.messageRegistry.set(message.id, message);\r\n        });\r\n        this.messageCount = messageCount;\r\n        this.loadingInitialMessage = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingInitialMessage = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action loadmessage = async (id: string) => {\r\n    let message = this.getmessage(id);\r\n    if (message) {\r\n      this.message = message;\r\n      return toJS(message);\r\n    } else {\r\n      this.loadingInitialMessage = true;\r\n      try {\r\n        message = await agent.Messages.details(id);\r\n        runInAction(() => {\r\n          setMessageProps(message, this.rootStore.userStore.user!);\r\n          this.message = message;\r\n          this.messageRegistry.set(message.id, message);\r\n          this.loadingInitialMessage = false;\r\n        });\r\n        return message;\r\n      } catch (error) {\r\n        runInAction(() => {\r\n          this.loadingInitialMessage = false;\r\n        });\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  @action clearmessage = () => {\r\n    this.message = null;\r\n  };\r\n\r\n  getmessage = (id: string) => {\r\n    return this.messageRegistry.get(id);\r\n  };\r\n\r\n  @action createmessage = async (message: IMessage) => {\r\n    this.submittingMessage = true;\r\n    try {\r\n      await agent.Messages.create(message);\r\n      const attendee = createMyMessagesMessage(this.rootStore.userStore.user!);\r\n      attendee.isHost = true;\r\n      let attendees = [];\r\n      attendees.push(attendee);\r\n      message.myMessages = attendees;\r\n      message.isHost = true;\r\n      runInAction(() => {\r\n        this.messageRegistry.set(message.id, message);\r\n        this.submittingMessage = false;\r\n      });\r\n      history.push(`/messages/${message.id}`);\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingMessage = false;\r\n      });\r\n      toast.error('Problem submitting data');\r\n      console.log(error.response);\r\n    }\r\n  };\r\n\r\n  @action editmessage = async (message: IMessage) => {\r\n    this.submittingMessage = true;\r\n    try {\r\n      await agent.Messages.update(message);\r\n      runInAction(() => {\r\n        this.messageRegistry.set(message.id, message);\r\n        this.message = message;\r\n        this.submittingMessage = false;\r\n      });\r\n      history.push(`/messages/${message.id}`);\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingMessage = false;\r\n      });\r\n      toast.error('Problem submitting data');\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action deletemessage = async (\r\n    event: SyntheticEvent<HTMLButtonElement>,\r\n    id: string\r\n  ) => {\r\n    this.submittingMessage = true;\r\n    this.targetMessage = event.currentTarget.name;\r\n    try {\r\n      await agent.Messages.delete(id);\r\n      runInAction(() => {\r\n        this.messageRegistry.delete(id);\r\n        this.submittingMessage = false;\r\n        this.targetMessage = '';\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingMessage = false;\r\n        this.targetMessage = '';\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action myMessagesMessage = async () => {\r\n    const attendee = createMyMessagesMessage(this.rootStore.userStore.user!);\r\n    this.loadingMessage = true;\r\n    try {\r\n      await agent.Messages.sendmessage(this.message!.id);\r\n      runInAction(() => {\r\n        if (this.message) {\r\n          this.message.myMessages.push(attendee);\r\n          this.message.isMessaged = true;\r\n          this.messageRegistry.set(this.message.id, this.message);\r\n          this.loadingMessage = false;\r\n        }\r\n      })\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingMessage = false;\r\n      })\r\n      toast.error('Problem signing up to message');\r\n    }\r\n  };\r\n\r\n  @action unsendMessage = async () => {\r\n    this.loadingMessage = true;\r\n    try {\r\n      await agent.Messages.unsendmessage(this.message!.id);\r\n      runInAction(() => {\r\n        if (this.message) {\r\n          this.message.myMessages = this.message.myMessages.filter(\r\n            a => a.username !== this.rootStore.userStore.user!.username\r\n          );\r\n          this.message.isMessaged = false;\r\n          this.messageRegistry.set(this.message.id, this.message);\r\n          this.loadingMessage = false;\r\n        }\r\n      })\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingMessage = false;\r\n      })\r\n      toast.error('Problem cancelling myMessages');\r\n    }\r\n  };\r\n}\r\n","import { observable, action, computed, runInAction, reaction, toJS } from 'mobx';\r\nimport { SyntheticEvent } from 'react';\r\nimport { IProduct } from '../models/product';\r\nimport agent from '../api/agent';\r\nimport { history } from '../..';\r\nimport { toast } from 'react-toastify';\r\nimport { RootStore } from './rootStore';\r\nimport { createLikedProduct, setProductProps } from '../common/util/util';\r\nimport {HubConnection, HubConnectionBuilder, LogLevel} from '@microsoft/signalr';\r\n\r\nconst LIMIT = 2;\r\n\r\n\r\nexport default class productStore {\r\n  rootStore: RootStore;\r\n  constructor(rootStore: RootStore) {\r\n    this.rootStore = rootStore;\r\n\r\n    reaction(\r\n      () => this.predicateProduct.keys(),\r\n      () => {\r\n        this.pageProduct = 0;\r\n        this.productRegistry.clear();\r\n        this.loadProducts();\r\n      }\r\n    )\r\n  }\r\n\r\n  @observable productRegistry = new Map();\r\n  @observable product: IProduct | null = null;\r\n  @observable loadingInitialProduct = false;\r\n  @observable submittingProduct = false;\r\n  @observable targetProduct = '';\r\n  @observable loadingProduct = false;\r\n  @observable.ref hubConnectionProduct: HubConnection | null = null;\r\n  @observable productCount = 0;\r\n  @observable pageProduct = 0;\r\n  @observable predicateProduct = new Map();\r\n\r\n  @action setPredicateProduct = (predicate: string, value: string | Date) => {\r\n    this.predicateProduct.clear();\r\n    if (predicate !== 'all') {\r\n      this.predicateProduct.set(predicate, value);\r\n    }\r\n  }\r\n\r\n  @computed get axiosParamsProduct() {\r\n    const params = new URLSearchParams();\r\n    params.append('limit', String(LIMIT));\r\n    params.append('offset', `${this.pageProduct ? this.pageProduct * LIMIT : 0}`);\r\n    this.predicateProduct.forEach((value, key) => {\r\n      if (key === 'startDate') {\r\n        params.append(key, value.toISOString())\r\n      } else {\r\n        params.append(key, value)\r\n      }\r\n    })\r\n    return params;\r\n  }\r\n\r\n  @computed get totalPagesProduct() {\r\n    return Math.ceil(this.productCount / LIMIT);\r\n  }\r\n\r\n  @action setPageProduct = (page: number) => {\r\n    this.pageProduct = page;\r\n  }\r\n\r\n  // @action createHubConnectionProduct = (productId: string) => {\r\n  //   if (!this.hubConnectionProduct) {\r\n  //   this.hubConnectionProduct = new HubConnectionBuilder()\r\n  //     .withUrl(process.env.REACT_APP_API_BLOGCHAT_URL!, {\r\n  //       accessTokenFactory: () => this.rootStore.commonStore.token!\r\n  //     })\r\n  //     .configureLogging(LogLevel.Information)\r\n  //     .build();\r\n\r\n  //     this.hubConnectionProduct.on('ReceiveProductComment', (comment) => runInAction(() => this.product!.comments.push(comment)));\r\n  //     this.hubConnectionProduct.on('SendProduct', (message) => {/*toast.info(message)*/});\r\n\r\n  //   }\r\n  //     if (this.hubConnectionProduct!.state === \"Disconnected\") {\r\n  //   this.hubConnectionProduct\r\n  //     .start()\r\n  //     .then(() => console.log(this.hubConnectionProduct!.state))\r\n  //     .then(() => {\r\n  //       console.log('Attempting to join group');\r\n  //       this.hubConnectionProduct!.invoke('AddToGroupProduct', productId)\r\n  //     })\r\n  //     .catch(error => console.log('Error establishing connection: ', error));\r\n  //   } else if(this.hubConnectionProduct!.state === 'Connected'){\r\n  //     this.hubConnectionProduct!.invoke('AddToGroup', productId);\r\n  //   }\r\n  \r\n  //   this.hubConnectionProduct.on('ReceiveProductComment', comment => {\r\n  //     runInAction(() => {\r\n  //       this.product!.comments.push(comment)\r\n  //     })\r\n  //   })\r\n\r\n  //   this.hubConnectionProduct.on('SendProduct', message => {\r\n  //     toast.info(message);\r\n  //   })\r\n  // };\r\n\r\n  // @action stopHubConnectionProduct = () => {\r\n  //   if (this.hubConnectionProduct?.state === \"Connected\") {\r\n  //   this.hubConnectionProduct!.invoke('RemoveFromGroupProduct', this.product!.id)\r\n  //     .then(() => {\r\n  //       this.hubConnectionProduct!.stop()\r\n  //     })\r\n  //     .then(() => console.log('Connection stopped'))\r\n  //     .catch(err => console.log(err))\r\n  // }}\r\n\r\n  // @action addCommentProduct = async (values: any) => {\r\n  //   values.productId = this.product!.id;\r\n  //   try {\r\n  //     await this.hubConnectionProduct!.invoke('SendCommentProduct', values)\r\n  //   } catch (error) {\r\n  //     console.log(error);\r\n  //   }\r\n  // } \r\n  @action createHubConnectionProduct = (productId: string) => {\r\n    this.hubConnectionProduct = new HubConnectionBuilder()\r\n      .withUrl(process.env.REACT_APP_API_PRODUCTCHAT_URL!, {\r\n        accessTokenFactory: () => this.rootStore.commonStore.token!\r\n      })\r\n      .configureLogging(LogLevel.Information)\r\n      .build();\r\n\r\n    this.hubConnectionProduct\r\n      .start()\r\n      .then(() => console.log(this.hubConnectionProduct!.state))\r\n      .then(() => {\r\n        console.log('Attempting to join group');\r\n        this.hubConnectionProduct!.invoke('AddToGroupProduct', productId)\r\n      })\r\n      .catch(error => console.log('Error establishing connection: ', error));\r\n// below 'RecieveComment' is related to API.SignalR.HubCOnnection line40\r\n    this.hubConnectionProduct.on('ReceiveProductComment', comment => {\r\n      console.log(comment)\r\n      runInAction(() => {\r\n        this.product!.productComments.push(comment)\r\n      })\r\n    })\r\n\r\n    this.hubConnectionProduct.on('SendProduct', message => {\r\n      toast.info(message);\r\n    })\r\n  };\r\n\r\n  @action stopHubConnectionProduct = () => {\r\n    this.hubConnectionProduct!.invoke('RemoveFromGroupProduct', this.product!.id)\r\n      .then(() => {\r\n        this.hubConnectionProduct!.stop()\r\n      })\r\n      .then(() => console.log('Connection stopped'))\r\n      .catch(err => console.log(err))\r\n  }\r\n\r\n  @action addCommentProduct = async (values: any) => {\r\n    // below values.activityId needs to match whats in Application.create.cs\r\n    values.productId = this.product!.id;\r\n    try {\r\n      await this.hubConnectionProduct!.invoke('SendCommentProduct', values)\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  } \r\n\r\n\r\n  @computed get ProductsByDate() {\r\n    return this.groupProductsByDate(\r\n      Array.from(this.productRegistry.values())\r\n    );\r\n  }\r\n\r\n  groupProductsByDate(Products: IProduct[]) {\r\n    const sortedProducts = Products.sort(\r\n      (a, b) => a.date.getTime() - b.date.getTime()\r\n    );\r\n    return Object.entries(\r\n      sortedProducts.reduce(\r\n        (Products, product) => {\r\n          const date = product.date.toISOString().split('T')[0];\r\n          Products[date] = Products[date]\r\n            ? [...Products[date], product]\r\n            : [product];\r\n          return Products;\r\n        },\r\n        {} as { [key: string]: IProduct[] }\r\n      )\r\n    );\r\n  }\r\n\r\n  @action loadProducts = async () => {\r\n    this.loadingInitialProduct = true;\r\n    try {\r\n      const ProductsEnvelope = await agent.Products.list(this.axiosParamsProduct);\r\n      const {products, productCount} = ProductsEnvelope;\r\n      runInAction(() => {\r\n        products.forEach(product => {\r\n          setProductProps(product, this.rootStore.userStore.user!);\r\n          this.productRegistry.set(product.id, product);\r\n        });\r\n        this.productCount = productCount;\r\n        this.loadingInitialProduct = false;\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingInitialProduct = false;\r\n      });\r\n    }\r\n  };\r\n\r\n  @action loadproduct = async (id: string) => {\r\n    let product = this.getproduct(id);\r\n    if (product) {\r\n      this.product = product;\r\n      return toJS(product);\r\n    } else {\r\n      this.loadingInitialProduct = true;\r\n      try {\r\n        product = await agent.Products.details(id);\r\n        runInAction(() => {\r\n          setProductProps(product, this.rootStore.userStore.user!);\r\n          this.product = product;\r\n          this.productRegistry.set(product.id, product);\r\n          this.loadingInitialProduct = false;\r\n        });\r\n        return product;\r\n      } catch (error) {\r\n        runInAction(() => {\r\n          this.loadingInitialProduct = false;\r\n        });\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  @action clearproduct = () => {\r\n    this.product = null;\r\n  };\r\n\r\n  getproduct = (id: string) => {\r\n    return this.productRegistry.get(id);\r\n  };\r\n\r\n  @action createproduct = async (product: IProduct) => {\r\n    this.submittingProduct = true;\r\n    try {\r\n      await agent.Products.create(product);\r\n      const attendee = createLikedProduct(this.rootStore.userStore.user!);\r\n      attendee.isHost = true;\r\n      let attendees = [];\r\n      attendees.push(attendee);\r\n      product.liked = attendees;\r\n      product.isHost = true;\r\n      runInAction(() => {\r\n        this.productRegistry.set(product.id, product);\r\n        this.submittingProduct = false;\r\n      });\r\n      history.push(`/products/${product.id}`);\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingProduct = false;\r\n      });\r\n      toast.error('Problem submitting data');\r\n      console.log(error.response);\r\n    }\r\n  };\r\n\r\n  @action editproduct = async (product: IProduct) => {\r\n    this.submittingProduct = true;\r\n    try {\r\n      await agent.Products.update(product);\r\n      runInAction(() => {\r\n        this.productRegistry.set(product.id, product);\r\n        this.product = product;\r\n        this.submittingProduct = false;\r\n      });\r\n      history.push(`/products/${product.id}`);\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingProduct = false;\r\n      });\r\n      toast.error('Problem submitting data');\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action deleteproduct = async (\r\n    event: SyntheticEvent<HTMLButtonElement>,\r\n    id: string\r\n  ) => {\r\n    this.submittingProduct = true;\r\n    this.targetProduct = event.currentTarget.name;\r\n    try {\r\n      await agent.Products.delete(id);\r\n      runInAction(() => {\r\n        this.productRegistry.delete(id);\r\n        this.submittingProduct = false;\r\n        this.targetProduct = '';\r\n      });\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.submittingProduct = false;\r\n        this.targetProduct = '';\r\n      });\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  @action likeProduct = async () => {\r\n    const attendee = createLikedProduct(this.rootStore.userStore.user!);\r\n    this.loadingProduct = true;\r\n    try {\r\n      await agent.Products.like(this.product!.id);\r\n      runInAction(() => {\r\n        if (this.product) {\r\n          this.product.liked.push(attendee);\r\n          this.product.isLiked = true;\r\n          this.productRegistry.set(this.product.id, this.product);\r\n          this.loadingProduct = false;\r\n        }\r\n      })\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingProduct = false;\r\n      })\r\n      toast.error('Problem signing up to product');\r\n    }\r\n  };\r\n\r\n  @action unlikeProduct = async () => {\r\n    this.loadingProduct = true;\r\n    try {\r\n      await agent.Products.unlike(this.product!.id);\r\n      runInAction(() => {\r\n        if (this.product) {\r\n          this.product.liked = this.product.liked.filter(\r\n            a => a.username !== this.rootStore.userStore.user!.username\r\n          );\r\n          this.product.isLiked = false;\r\n          this.productRegistry.set(this.product.id, this.product);\r\n          this.loadingProduct = false;\r\n        }\r\n      })\r\n    } catch (error) {\r\n      runInAction(() => {\r\n        this.loadingProduct = false;\r\n      })\r\n      toast.error('Problem cancelling like');\r\n    }\r\n  };\r\n}\r\n","import { createContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport UserStore from \"./userStore\";\r\nimport { configure } from \"mobx\";\r\nimport CommonStore from './commonStore';\r\nimport ModalStore from './modalStore';\r\nimport ProfileStore from './profileStore';\r\nimport JobStore from './jobStore';\r\nimport BlogStore from './blogStore';\r\nimport ExperienceStore from './experienceStore';\r\nimport BusinessStore from './businessStore';\r\nimport PostStore from './postStore';\r\nimport MessageStore from './messageStore';\r\nimport ProductStore from './productStore';\r\n\r\nconfigure({ enforceActions: \"always\" });\r\n\r\nexport class RootStore {\r\n    activityStore: ActivityStore;\r\n    userStore: UserStore;\r\n    commonStore: CommonStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    jobStore: JobStore;\r\n    blogStore: BlogStore;\r\n    experienceStore: ExperienceStore;\r\n    businessStore: BusinessStore;\r\n    postStore: PostStore;\r\n    messageStore: MessageStore;\r\n    productStore: ProductStore;\r\n\r\n    constructor() {\r\n        this.activityStore = new ActivityStore(this);\r\n        this.userStore = new UserStore(this);\r\n        this.commonStore = new CommonStore(this);\r\n        this.modalStore = new ModalStore(this);\r\n        this.profileStore = new ProfileStore(this);\r\n        this.jobStore = new JobStore(this);\r\n        this.blogStore = new BlogStore(this);\r\n        this.experienceStore = new ExperienceStore(this);\r\n        this.businessStore = new BusinessStore(this);\r\n        this.postStore = new PostStore(this);\r\n        this.productStore = new ProductStore(this);\r\n        this.messageStore = new MessageStore(this);\r\n    }\r\n}\r\nexport const RootStoreContext = createContext(new RootStore());\r\n","import React, { useContext } from \"react\";\r\nimport { Container, Menu, Image, Dropdown } from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { NavLink, Link } from \"react-router-dom\";\r\nimport { RootStoreContext } from \"../../stores/rootStore\";\r\n\r\nexport const NavBar: React.FC = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {user, logout } = rootStore.userStore;\r\n  \r\n  return (\r\n    <Menu fixed=\"top\" inverted>\r\n      <Container>\r\n        <Menu.Item header as={NavLink} exact to={\"/\"}>\r\n          <img\r\n            src=\"/assets/loneVeterans/logoSmallClose.png\"\r\n            alt=\"logo\"\r\n            style={{ marginRight: \"10px\" }}\r\n          />\r\n          Lone Veterans\r\n        </Menu.Item>\r\n        <Menu.Item name=\"about\" as={NavLink} to={\"/about\"} />\r\n        <Menu.Item name=\"blogs\" as={NavLink} to={\"/blogs\"} />\r\n        <Menu.Item name=\"events\" as={NavLink} to={\"/activities\"} />\r\n        <Menu.Item name=\"jobs\" as={NavLink} to={\"/jobs\"} />\r\n        <Menu.Item name=\"businesses\" as={NavLink} to={\"/businesses\"} />\r\n        <Menu.Item name=\"programs\" as={NavLink} to={\"/programs\"} />\r\n        <Menu.Item name=\"store\" as={NavLink} to={\"/products\"} />\r\n        <Menu.Item name=\"contact\" as={NavLink} to={\"/contact\"} />\r\n\r\n        {/* <Menu.Item>\r\n          <Button\r\n            as={NavLink}\r\n            to={\"/createActivity\"}\r\n            positive\r\n            content=\"Create Activity\"\r\n          />\r\n        </Menu.Item> */}\r\n\r\n      {user && (\r\n        <Menu.Item position='right'>\r\n          <Image avatar spaced='right' src={user.image || '/assets/user.png'} />\r\n          <Dropdown pointing='top left' text={user.displayName}>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item \r\n              as={Link}\r\n              to={`/profile/${user.username}`}\r\n              text='My profile'\r\n              icon='user'\r\n              />\r\n              <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Menu.Item>\r\n      )}\r\n\r\n      </Container>\r\n    </Menu>\r\n  );\r\n};\r\nexport default observer(NavBar);\r\n","import React from \"react\";\r\nimport { FieldRenderProps } from \"react-final-form\";\r\nimport { FormFieldProps, Form, Label } from \"semantic-ui-react\";\r\n\r\n\r\n    interface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps { }\r\n\r\nconst TextInput: React.FC<IProps> = ({\r\n  input,\r\n  width,\r\n  type,\r\n  placeholder,\r\n  meta: { touched, error },\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error} width={width} type={type}>\r\n      <input {...input} placeholder={placeholder} />\r\n      {touched && error && (\r\n          <Label basic color='red'>\r\n              {error}\r\n          </Label>\r\n      )}\r\n    </Form.Field>\r\n  );\r\n};\r\n\r\nexport default TextInput;\r\n","import React from 'react'\r\nimport { AxiosResponse } from 'axios';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n    error: AxiosResponse;\r\n    text?: string;\r\n}\r\n\r\nconst ErrorMessage: React.FC<IProps> = ({error, text}) => {\r\n    return (\r\n        <Message error>\r\n            <Message.Header>\r\n                {error.statusText}\r\n            </Message.Header>\r\n                {error.data && Object.keys(error.data.errors).length > 0 && (\r\n            <Message.List>\r\n                {Object.values(error.data.errors).flat().map((err: any, i) => (\r\n                    <Message.Item key={i}>\r\n                        {err}\r\n                    </Message.Item>\r\n                        ))}\r\n            </Message.List>\r\n                )}\r\n                {text && <Message.Content content={text} />}\r\n        </Message>\r\n    );\r\n};\r\n\r\nexport default ErrorMessage\r\n","import React from 'react'\r\nimport FacebookLogin from 'react-facebook-login/dist/facebook-login-render-props';\r\nimport { Button, Icon } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps {\r\n    fbCallback: (response: any) => void;\r\n    loading: boolean;\r\n}\r\n\r\nconst SocialLogin: React.FC<IProps> = ({fbCallback, loading}) => {\r\n    return (\r\n        <div>\r\n            <FacebookLogin \r\n                appId=\"844689916379777\"\r\n                fields=\"name,email,picture\"\r\n                callback={fbCallback}\r\n                render={(renderProps: any) => {\r\n                    return (\r\n                        <Button loading={loading} onClick={renderProps.onClick} type=\"button\" fluid color=\"facebook\">\r\n                            <Icon name=\"facebook\" />\r\n                            Login with Facebook\r\n                        </Button>\r\n                    )\r\n                } }\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default observer(SocialLogin)\r\n","import React, { useContext } from \"react\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport TextInput from \"../../common/form/TextInput\";\r\nimport { Form, Button, Header, Divider } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../stores/rootStore\";\r\nimport { IUserFormValues } from \"../../models/user\";\r\nimport { FORM_ERROR } from \"final-form\";\r\nimport { combineValidators, isRequired } from \"revalidate\";\r\nimport ErrorMessage from '../../common/form/ErrorMessage';\r\nimport { observer } from \"mobx-react-lite\";\r\nimport SocialLogin from './SocialLogin';\r\n\r\nconst validate = combineValidators({\r\n  email: isRequired(\"Email\"),\r\n  password: isRequired(\"Password\"),\r\n});\r\n\r\nconst LoginForm = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { login, fbLogin, loading } = rootStore.userStore;\r\n  return (\r\n    <FinalForm\r\n      onSubmit={(values: IUserFormValues) =>\r\n        login(values).catch((error) => ({\r\n          [FORM_ERROR]: error,\r\n        }))\r\n      }\r\n      validate={validate}\r\n      render={({\r\n        handleSubmit,\r\n        submitting,\r\n        submitError,\r\n        invalid,\r\n        pristine,\r\n        dirtyFieldsSinceLastSubmit,\r\n      }) => (\r\n        <Form onSubmit={handleSubmit} error autoComplete='off'>\r\n          <Header\r\n            as=\"h2\"\r\n            content=\"Login to Our App\"\r\n            color=\"grey\"\r\n            textAlign=\"center\"\r\n          />\r\n          <Field name=\"email\" component={TextInput} placeholder=\"Email\" />\r\n          <Field\r\n            name=\"password\"\r\n            component={TextInput}\r\n            placeholder=\"Password\"\r\n            type=\"password\"\r\n          />\r\n          {submitError && !dirtyFieldsSinceLastSubmit && (\r\n            \r\n            <ErrorMessage\r\n                error={submitError}\r\n                text='Invalid email or password'\r\n            />\r\n          )}\r\n\r\n          {/* <br /> */}\r\n             <Button\r\n            disabled={(invalid && !dirtyFieldsSinceLastSubmit) || pristine}\r\n            color=\"grey\"\r\n            fluid\r\n            loading={submitting}\r\n            content=\"Login\"\r\n          />\r\n          {/* <pre>{JSON.stringify(form.getState(), null, 2)}</pre> */}\r\n          <Divider horizontal>or</Divider>\r\n          <SocialLogin loading={loading} fbCallback={fbLogin} />\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default observer(LoginForm);\r\n","import React, { useContext } from \"react\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport TextInput from \"../../common/form/TextInput\";\r\nimport { Form, Button, Header } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../stores/rootStore\";\r\nimport { IUserFormValues } from \"../../models/user\";\r\nimport { FORM_ERROR } from \"final-form\";\r\nimport { combineValidators, isRequired } from \"revalidate\";\r\nimport ErrorMessage from '../../common/form/ErrorMessage';\r\n\r\nconst validate = combineValidators({\r\n  email: isRequired(\"Email\"),\r\n  displayName: isRequired(\"display name\"),\r\n  username: isRequired(\"username\"),\r\n  password: isRequired(\"Password\"),\r\n});\r\n\r\nconst RegisterForm = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { register } = rootStore.userStore;\r\n  return (\r\n    <FinalForm\r\n      onSubmit={(values: IUserFormValues) =>\r\n        register(values).catch((error) => ({\r\n          [FORM_ERROR]: error,\r\n        }))\r\n      }\r\n      validate={validate}\r\n      render={({\r\n        handleSubmit,\r\n        submitting,\r\n        submitError,\r\n        invalid,\r\n        pristine,\r\n        dirtyFieldsSinceLastSubmit,\r\n      }) => (\r\n        <Form onSubmit={handleSubmit} error>\r\n          <Header\r\n            as=\"h2\"\r\n            content=\"Sign Up to Our App\"\r\n            color=\"grey\"\r\n            textAlign=\"center\"\r\n          />\r\n          <Field name=\"username\" component={TextInput} placeholder=\"Username\" />\r\n          <Field name=\"displayName\" component={TextInput} placeholder=\"Display Name\" />\r\n          <Field name=\"email\" component={TextInput} placeholder=\"Email\" />\r\n          <Field\r\n            name=\"password\"\r\n            component={TextInput}\r\n            placeholder=\"Password\"\r\n            type=\"password\"\r\n          />\r\n          {submitError && !dirtyFieldsSinceLastSubmit && (\r\n            <ErrorMessage\r\n                error={submitError}\r\n                text='Invalid email or password'\r\n            />\r\n            // )}\r\n            // <Label color=\"red\" basic content={submitError.statusText} />\r\n          )}\r\n\r\n          <br />\r\n             <Button\r\n            disabled={(invalid && !dirtyFieldsSinceLastSubmit) || pristine}\r\n            color=\"grey\"\r\n            fluid\r\n            loading={submitting}\r\n            // positive\r\n            content=\"Register\"\r\n          />\r\n          {/* <pre>{JSON.stringify(form.getState(), null, 2)}</pre> */}\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import React, { Fragment, useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container, Header, Segment, Image } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../stores/rootStore\";\r\nimport LoginForm from \"../user/LoginForm\";\r\nimport RegisterForm from \"../user/RegisterForm\";\r\n\r\n// import ActivityDashboard from '../activities/dashboard/ActivityDashboard';\r\n\r\nconst HomePage = () => {\r\n  const token = window.localStorage.getItem('jwt');\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {user, isLoggedIn } = rootStore.userStore;\r\n  const {openModal} = rootStore.modalStore;\r\n\r\n  return (\r\n    <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\r\n      <Container text>\r\n        {/* <Header as=\"h1\" inverted>\r\n          Lone Veterans\r\n        </Header> */}\r\n          <Image\r\n            size=\"massive\"\r\n            src=\"/assets/loneVeterans/logoBigSharp.png\"\r\n            alt=\"logo\"\r\n            style={{ marginBottom: 12 }}\r\n          />\r\n        {isLoggedIn && user && token ? (\r\n          <Fragment>\r\n            <Header as=\"h2\" inverted content={`Welcome back ${user.displayName}`} />\r\n            <Button as={Link} to=\"/activities\" size=\"huge\" inverted>\r\n          Go to Events\r\n        </Button>\r\n        <Button as={Link} to=\"/blogs\" size=\"huge\" inverted>\r\n          Go to Blogs\r\n        </Button>\r\n        <Button as={Link} to=\"/jobs\" size=\"huge\" inverted>\r\n          Go to Jobs\r\n        </Button>\r\n        <Button as={Link} to=\"/businesses\" size=\"huge\" inverted>\r\n          Go to Businesses\r\n        </Button>\r\n        <Button as={Link} to=\"/posts\" size=\"huge\" inverted>\r\n          Go to Posts\r\n        </Button>\r\n        <Button as={Link} to=\"/products\" size=\"huge\" inverted>\r\n          Go to Store\r\n        </Button>\r\n          </Fragment>\r\n        ) : (\r\n\r\n          <Fragment>\r\n        <Header as=\"h2\" inverted content=\"Welcome to Lone Veterans\" />\r\n        <Button onClick={() => openModal(<LoginForm />)} size=\"huge\" inverted>\r\n          Login\r\n        </Button>\r\n        <Button onClick={() => openModal(<RegisterForm />)} size=\"huge\" inverted>\r\n          Register\r\n        </Button>\r\n        </Fragment>\r\n          )}\r\n\r\n      </Container>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default HomePage;","import React from \"react\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { IAttendee } from \"../../../models/activity\";\r\n\r\ninterface IProps {\r\n  attendees: IAttendee[];\r\n}\r\n\r\nconst ActivityListItemAttendees: React.FC<IProps> = ({ attendees }) => {\r\n  return (\r\n    <List horizontal>\r\n      {attendees.map((attendee) => (\r\n        <List.Item key={attendee.username}>\r\n          <Popup\r\n            header={attendee.username}\r\n            trigger={\r\n              <Image\r\n                size=\"mini\"\r\n                circular\r\n                src={attendee.image || \"/assets/user.png\"}\r\n              />\r\n            }\r\n          />\r\n        </List.Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default ActivityListItemAttendees;\r\n","import React from \"react\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n// import ActivityStore from \"../../../../App/stores/activityStore\";\r\nimport { IActivity } from \"../../../models/activity\";\r\nimport {format} from 'date-fns'\r\nimport ActivityListItemAttendees from './ActivityListItemAttendees';\r\n// import { RootStore } from \"../../../stores/rootStore\";\r\n\r\nconst ActivityListItem: React.FC<{ activity: IActivity }> = ({ activity }) => {\r\n  const host = activity.attendees.filter(x => x.isHost)[0];\r\n  return (\r\n    <Segment.Group>\r\n      <Segment>\r\n          <Item.Group>\r\n        <Item>\r\n          <Item.Image size=\"tiny\" circular src={host.image || \"/assets/user.png\"} />\r\n          <Item.Content>\r\n            <Item.Header as={Link} to={`/activities/${activity.id}`}>{activity.title}</Item.Header>\r\n            <Item.Description>\r\n            Hosted By \r\n            <Link to={`/profile/${host.username}`}>\r\n            {host.displayName}\r\n            </Link>\r\n            </Item.Description>\r\n            {activity.isHost &&\r\n            <Item.Description>\r\n              <Label \r\n                basic\r\n                color='orange'\r\n                content='You are hosting this activity'\r\n              />\r\n            </Item.Description>\r\n              }\r\n                {activity.isGoing && !activity.isHost &&\r\n            <Item.Description>\r\n              <Label \r\n                basic\r\n                color='orange'\r\n                content='You are going to this activity'\r\n              />\r\n            </Item.Description>\r\n              }\r\n          \r\n          </Item.Content>\r\n        </Item>\r\n\r\n          </Item.Group>\r\n      </Segment>\r\n      <Segment>\r\n          <Icon name='clock' /> {format(activity.date, 'H:mm a')}\r\n          <Icon name='marker' /> {activity.venue}, {activity.city}\r\n      </Segment>\r\n      <Segment secondary>\r\n            <ActivityListItemAttendees\r\n              attendees={activity.attendees}\r\n            />\r\n      </Segment>\r\n      <Segment clearing>\r\n          <span>{activity.description}</span>\r\n          <Button\r\n                as={Link}\r\n                to={`/activities/${activity.id}`}\r\n                floated=\"right\"\r\n                content=\"View\"\r\n                color=\"black\"\r\n              />\r\n      </Segment>\r\n    </Segment.Group>\r\n  );\r\n};\r\n\r\nexport default ActivityListItem;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment, useContext } from \"react\";\r\nimport { Item, Label } from \"semantic-ui-react\";\r\n// import ActivityStore from \"../../../../App/stores/activityStore\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\nimport {format} from 'date-fns';\r\n\r\nconst ActivityList: React.FC = () => {\r\n  // const activityStore = useContext(ActivityStore);\r\n  // const { activitiesByDate } = activityStore;\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {activitiesByDate} = rootStore.activityStore;\r\n\r\n  return (\r\n    <Fragment>\r\n      {activitiesByDate.map(([group, activities]) => (\r\n        <Fragment key={group}>\r\n          <Label  size=\"large\" color=\"black\">\r\n            {format(new Date(group), 'eeee do MMMM')}\r\n          </Label>\r\n            <Item.Group divided>\r\n              {activities.map((activity) => (\r\n                <ActivityListItem key={activity.id} activity={activity} />\r\n              ))}\r\n            </Item.Group>\r\n        </Fragment>\r\n      ))}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityList);\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\nconst ActivityListItemPlaceholder = () => {\r\n  return (\r\n    <Fragment>\r\n      <Placeholder fluid style={{ marginTop: 50 }}>\r\n        <Segment.Group>\r\n          <Segment style={{ minHeight: 110 }}>\r\n            <Placeholder>\r\n              <Placeholder.Header image>\r\n                <Placeholder.Line />\r\n                <Placeholder.Line />\r\n              </Placeholder.Header>\r\n              <Placeholder.Paragraph>\r\n                <Placeholder.Line />\r\n              </Placeholder.Paragraph>\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment>\r\n            <Placeholder>\r\n              <Placeholder.Line />\r\n              <Placeholder.Line />\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment secondary style={{ minHeight: 70 }} />\r\n          <Segment clearing>\r\n            <Button disabled color='black' floated='right' content='View' />\r\n          </Segment>\r\n        </Segment.Group>\r\n      </Placeholder>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default ActivityListItemPlaceholder;","import React, { Fragment, useContext } from 'react';\r\nimport { Menu, Header, Button } from 'semantic-ui-react';\r\nimport { Calendar } from 'react-widgets';\r\nimport { RootStoreContext } from '../../../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst ActivityFilters = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { predicate, setPredicate } = rootStore.activityStore;\r\n  return (\r\n    <Fragment>\r\n      <Menu vertical size={'large'} style={{ width: '100%', marginTop: 50 }}>\r\n        <Header icon={'filter'} attached color={'grey'} content={'Filters'} />\r\n        <Menu.Item\r\n          active={predicate.size === 0}\r\n          onClick={() => setPredicate('all', 'true')}\r\n          color={'black'}\r\n          name={'all'}\r\n          content={'All Activities'}\r\n        />\r\n        <Menu.Item\r\n          active={predicate.has('isGoing')}\r\n          onClick={() => setPredicate('isGoing', 'true')}\r\n          color={'black'}\r\n          name={'username'}\r\n          content={\"I'm Going\"}\r\n        />\r\n        <Menu.Item\r\n          active={predicate.has('isHost')}\r\n          onClick={() => setPredicate('isHost', 'true')}\r\n          color={'black'}\r\n          name={'host'}\r\n          content={\"I'm hosting\"}\r\n        />\r\n      </Menu>\r\n      <Header\r\n        icon={'calendar'}\r\n        attached\r\n        color={'grey'}\r\n        content={'Select Date'}\r\n      />\r\n      <Calendar\r\n        onChange={date => setPredicate('startDate', date!)}\r\n        value={predicate.get('startDate') || new Date()}\r\n      />\r\n      <br />\r\n            <Header\r\n    icon={'add'}\r\n    attached\r\n    color={'grey'}\r\n    content={'Create'}\r\n  />\r\n      <Button\r\n        as={NavLink}\r\n        to={\"/createActivity\"}\r\n        positive\r\n        content=\"Create Activity\"\r\n      />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityFilters);\r\n","// start typing rafc\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport { observer } from \"mobx-react-lite\";\r\n// import LoadingComponent from \"../../../Layout/LoadingComponent\";\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport ActivityFilters from './ActivityFilters';\r\n\r\n\r\nconst ActivityDashboard: React.FC = () => {\r\n    // MOBX\r\n    // const activityStore = useContext(ActivityStore);\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n      loadActivities,\r\n      loadingInitial,\r\n      setPage,\r\n      page,\r\n      totalPages\r\n    } = rootStore.activityStore;\r\n    const [loadingNext, setLoadingNext] =useState(false);\r\n\r\n    const handleGetNext = () => {\r\n      setLoadingNext(true);\r\n      setPage(page + 1);\r\n      loadActivities().then(() => setLoadingNext(false));\r\n    };\r\n\r\n    // LIFECYCLE\r\n    useEffect(() => {\r\n     loadActivities();\r\n    }, [loadActivities]);\r\n  \r\n    // if (loadingInitial)\r\n    //   return <LoadingComponent content=\"Loading activities...\" />;\r\n  return (\r\n      <Grid>\r\n        <Grid.Column width={10}>\r\n          {loadingInitial && page === 0 ? (\r\n            <ActivityListItemPlaceholder />\r\n          ) : (\r\n            <InfiniteScroll\r\n            pageStart={0}\r\n            loadMore={handleGetNext}\r\n            hasMore={!loadingNext && page + 1 < totalPages}\r\n            initialLoad={false}\r\n              >\r\n                <ActivityList />\r\n              </InfiniteScroll>\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={6}>\r\n          <ActivityFilters />\r\n        </Grid.Column>\r\n        <Grid.Column width={10}>\r\n          <Loader active={loadingNext} />\r\n        </Grid.Column>\r\n      </Grid>\r\n  );\r\n};\r\nexport default observer(ActivityDashboard);\r\n","\r\nexport interface IActivitiesEnvelope {\r\n    activities: IActivity[];\r\n    activityCount: number;\r\n  }\r\n\r\nexport interface IActivity {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    date: Date;\r\n    city: string;\r\n    venue: string;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    attendees: IAttendee[];\r\n    comments: IComment[];\r\n}\r\n\r\nexport interface IComment {\r\n    id: string;\r\n    createdAt: Date;\r\n    body: string;\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n  }\r\n\r\nexport interface IActivityFormValues extends Partial<IActivity> {\r\n    time?: Date;\r\n}\r\nexport class ActivityFormValues implements IActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = \"\";\r\n    description: string = \"\";\r\n    date?: Date = undefined;\r\n    time?: Date = undefined;\r\n    city: string = \"\";\r\n    venue:string = \"\";\r\n\r\n    constructor(init?: IActivityFormValues) {\r\n        if (init && init.date){\r\n            init.time = init.date\r\n        }\r\n        Object.assign(this, init);\r\n    } \r\n}\r\n\r\nexport interface IAttendee {\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n    isHost: boolean;\r\n    following?: boolean;\r\n}","import React from 'react'\r\nimport { FieldRenderProps } from \"react-final-form\";\r\nimport { FormFieldProps, Form, Label } from \"semantic-ui-react\";\r\n\r\n\r\n    interface IProps extends FieldRenderProps<string, HTMLElement>, FormFieldProps { }\r\n\r\nconst TextAreaInput: React.FC<IProps> = ({\r\n  input,\r\n  width,\r\n  rows,\r\n  placeholder,\r\n  meta: { touched, error },\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error} width={width}>\r\n      <textarea {...input} placeholder={placeholder} rows={rows} />\r\n      {touched && error && (\r\n          <Label basic color='red'>\r\n              {error}\r\n          </Label>\r\n      )}\r\n    </Form.Field>\r\n\r\n    )\r\n}\r\n\r\nexport default TextAreaInput\r\n","import React from \"react\";\r\nimport { FieldRenderProps } from \"react-final-form\";\r\nimport { FormFieldProps, Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface IProps\r\n  extends FieldRenderProps<string, HTMLElement>,\r\n    FormFieldProps {}\r\n\r\nconst SelectInput: React.FC<IProps> = ({\r\n  input,\r\n  width,\r\n  options,\r\n  placeholder,\r\n  meta: { touched, error },\r\n}) => {\r\n  return (\r\n    <Form.Field error={touched && !!error} width={width}>\r\n      {/* <textarea {...input} placeholder={placeholder}  /> */}\r\n      <Select \r\n        value={input.value}\r\n        onChange={(e, data) => input.onChange(data.value)}\r\n        placeholder={placeholder}\r\n        options={options}\r\n      /> \r\n\r\n      {touched && error && (\r\n        <Label basic color=\"red\">\r\n          {error}\r\n        </Label>\r\n      )}\r\n    </Form.Field>\r\n  );\r\n};\r\n\r\nexport default SelectInput;\r\n","import React from 'react'\r\nimport { FieldRenderProps } from 'react-final-form';\r\nimport { FormFieldProps, Form, Label } from 'semantic-ui-react';\r\nimport {DateTimePicker} from 'react-widgets';\r\n\r\ninterface IProps\r\n  extends FieldRenderProps<Date, HTMLElement>,\r\n    FormFieldProps {}\r\n\r\nconst DateInput: React.FC<IProps> = ({\r\n    id = null,\r\n    input,\r\n    width,\r\n    placeholder,\r\n    date = false,\r\n    time = false,\r\n    meta: { touched, error },\r\n    ...rest\r\n  }) => {\r\n    return (\r\n        <Form.Field error={touched && !!error} width={width}>\r\n        <DateTimePicker \r\n            placeholder={placeholder}\r\n            value={input.value || null}\r\n            onChange={input.onChange}\r\n            onBlur={input.onBlur}\r\n            onKeyDown={(e) => e.preventDefault()}\r\n            date={date}\r\n            time={time}\r\n            {...rest}\r\n        />\r\n        {touched && error && (\r\n          <Label basic color='red'>\r\n            {error}\r\n          </Label>\r\n        )}\r\n      </Form.Field>\r\n    )\r\n}\r\n\r\nexport default DateInput\r\n","export const category = [\r\n  { key: 'drinks', text: 'Drinks', value: 'drinks' },\r\n  { key: 'culture', text: 'Culture', value: 'culture' },\r\n  { key: 'film', text: 'Film', value: 'film' },\r\n  { key: 'food', text: 'Food', value: 'food' },\r\n  { key: 'music', text: 'Music', value: 'music' },\r\n  { key: 'travel', text: 'Travel', value: 'travel' }\r\n];\r\nexport const categoryPrograms = [\r\n  {key: 'suicideprevention', text: 'Suicide prevention', value: 'suicideprevention'},\r\n  {key: 'reserveduty', text: 'Reserve duty', value: 'reserveduty'},\r\n\r\n]","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, Form, Grid, Segment } from \"semantic-ui-react\";\r\nimport {ActivityFormValues} from \"../../../models/activity\";\r\nimport { v4 as uuid } from \"uuid\";\r\n// import LoadingComponent from \"../../../../LoadingComponent\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport TextInput from \"../../../common/form/TextInput\";\r\nimport TextAreaInput from \"../../../common/form/TextAreaInput\";\r\nimport SelectInput from \"../../../common/form/SelectInput\";\r\nimport DateInput from \"../../../common/form/DateInput\";\r\n\r\nimport { category } from \"../../../common/options/categoryOptions\";\r\nimport { combineDateAndTime } from \"../../../common/util/util\";\r\nimport {combineValidators, isRequired, composeValidators, hasLengthGreaterThan} from 'revalidate';\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\n\r\nconst validate = combineValidators({\r\n  title: isRequired({message: 'The event title is required'}),\r\n  category: isRequired('Category'),\r\n  description: composeValidators(\r\n    isRequired('Description'),\r\n    hasLengthGreaterThan(4)({message: 'Description nneds to be at least 5 charectors'})\r\n  )(),\r\n  city: isRequired('City'),\r\n  venue: isRequired('Venue'),\r\n  date: isRequired('Date'),\r\n  time: isRequired('Time'),\r\n})\r\n\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst ActivityForm: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    createActivity,\r\n    editActivity,\r\n    submitting,\r\n    loadActivity,\r\n    deleteActivity\r\n  } = rootStore.activityStore;\r\n\r\n  const [activity, setActivity] = useState(new ActivityFormValues());\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n    if (match.params.id) {\r\n      setLoading(true);\r\n      loadActivity(match.params.id)\r\n        .then(activity => {\r\n          setActivity(new ActivityFormValues(activity));\r\n        })\r\n        .finally(() => setLoading(false));\r\n    }\r\n  }, [loadActivity, match.params.id]);\r\n\r\n  const handleFinalFormSubmit = (values: any) => {\r\n    const dateAndTime = combineDateAndTime(values.date, values.time);\r\n    // const dateAndTime = values.date + values.time;\r\n    const { date, time, ...activity } = values;\r\n    activity.date = dateAndTime;\r\n\r\n    if (!activity.id) {\r\n      let newActivity = {\r\n        ...activity,\r\n        id: uuid(),\r\n      };\r\n      createActivity(newActivity);\r\n    } else {\r\n      editActivity(activity);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <Segment clearing>\r\n          <FinalForm\r\n          validate={validate}\r\n            initialValues={activity}\r\n            onSubmit={handleFinalFormSubmit}\r\n            render={({ handleSubmit, invalid, pristine }) => (\r\n              <Form onSubmit={handleSubmit} loading={loading}>\r\n                <Field\r\n                  name=\"title\"\r\n                  placeholder=\"Title\"\r\n                  value={activity.title}\r\n                  component={TextInput}\r\n                />\r\n                <Field\r\n                  name=\"description\"\r\n                  placeholder=\"Description\"\r\n                  value={activity.description}\r\n                  rows={3}\r\n                  component={TextAreaInput}\r\n                />\r\n                <Field\r\n                  name=\"category\"\r\n                  placeholder=\"Category\"\r\n                  options={category}\r\n                  value={activity.category}\r\n                  component={SelectInput}\r\n                />\r\n                <Form.Group width=\"equal\">\r\n                  <Field\r\n                    name=\"date\"\r\n                    placeholder=\"Date\"\r\n                    value={activity.date}\r\n                    component={DateInput}\r\n                    date={true}\r\n                  />\r\n                  <Field\r\n                    name=\"time\"\r\n                    placeholder=\"Time\"\r\n                    value={activity.time}\r\n                    component={DateInput}\r\n                    time={true}\r\n                  />\r\n                </Form.Group>\r\n                <Field\r\n                  name=\"city\"\r\n                  component={TextInput}\r\n                  placeholder=\"City\"\r\n                  value={activity.city}\r\n                />\r\n                <Field\r\n                  name=\"venue\"\r\n                  placeholder=\"Venue\"\r\n                  value={activity.venue}\r\n                  component={TextInput}\r\n                />\r\n                <Button\r\n                  loading={submitting}\r\n                  disabled={loading || invalid || pristine}\r\n                  floated=\"right\"\r\n                  positive\r\n                  type=\"submit\"\r\n                  content=\"Submit\"\r\n                />\r\n                <Button\r\n                  onClick={activity.id ? () => history.push(`/activities/${activity.id}`) : () => history.push(\"/activities\")}\r\n                  disabled={loading}\r\n                  floated=\"right\"\r\n                  type=\"button\"\r\n                  content=\"Cancel\"\r\n                />\r\n                {activity.id && \r\n                <Button\r\n                 onClick={(e)=>deleteActivity(e,activity.id!).then(()=> history.push('/activities'))}\r\n                 \r\n                 disabled={loading}\r\n                 floated=\"right\"\r\n                 type=\"button\"\r\n                 content=\"Delete\"\r\n                />\r\n                }\r\n               \r\n              </Form>\r\n            )}\r\n          />\r\n        </Segment>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityForm);\r\n","import React from \"react\";\r\nimport { Dimmer, Loader} from 'semantic-ui-react'\r\n\r\nconst LoadingComponent: React.FC<{inverted?: boolean, content?: string}> = ({\r\n  inverted = true,\r\n  content\r\n}) => {\r\n  return (\r\n   \r\n      <Dimmer active inverted={inverted}>\r\n        <Loader content={content} />\r\n      </Dimmer>\r\n    \r\n  );\r\n};\r\n\r\nexport default LoadingComponent;\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image } from 'semantic-ui-react'\r\nimport { IActivity } from '../../../models/activity';\r\nimport {format} from 'date-fns';\r\nimport { RootStoreContext } from '../../../stores/rootStore';\r\n\r\nconst activityImageStyle = {\r\n  filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n  position: 'absolute',\r\n  bottom: '5%',\r\n  left: '5%',\r\n  width: '100%',\r\n  height: 'auto',\r\n  color: 'white'\r\n};\r\n\r\nconst ActivityDetailedHeader: React.FC<{activity: IActivity}> = ({activity}) => {\r\n  const host = activity.attendees.filter(x => x.isHost)[0];\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { attendActivity, cancelAttendance, loading } = rootStore.activityStore;\r\n    return (\r\n        <Segment.Group>\r\n          <Segment basic attached='top' style={{ padding: '0' }}>\r\n            <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n            <Segment basic style={activityImageTextStyle}>\r\n              <Item.Group>\r\n                <Item>\r\n                  <Item.Content>\r\n                    <Header\r\n                      size='huge'\r\n                      content={activity.title}\r\n                      style={{ color: 'white' }}\r\n                    />\r\n                    <p>{format(activity.date, 'eeee do MMMM')}</p>\r\n                    <p>\r\n                    Hosted by {' '}\r\n                    <Link to={`/profile/${host.username}`}>\r\n                      <strong>{host.displayName}</strong>\r\n                    </Link>\r\n                    </p>\r\n                  </Item.Content>\r\n                </Item>\r\n              </Item.Group>\r\n            </Segment>\r\n          </Segment>\r\n          <Segment clearing attached='bottom'>\r\n            {activity.isHost ? (\r\n              <Button as={Link} to={`/activity/manage/${activity.id}`} color='orange' floated='right'>\r\n              Manage Event\r\n            </Button>\r\n              ) : activity.isGoing ? (\r\n                <Button loading={loading} onClick={cancelAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                <Button loading={loading} onClick={attendActivity} color='grey'>Join Activity</Button>\r\n              )}\r\n          </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default observer(ActivityDetailedHeader);\r\n","import React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { IActivity } from '../../../models/activity'\r\nimport {format} from 'date-fns'\r\n\r\n\r\nconst ActivityDetailedInfo: React.FC<{activity: IActivity}> = ({activity}) => {\r\n    return (\r\n        <div>\r\n            <Segment.Group>\r\n                  <Segment attached='top'>\r\n                    <Grid>\r\n                      <Grid.Column width={1}>\r\n                        <Icon size='large' color='grey' name='info' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                  <Segment attached>\r\n                    <Grid verticalAlign='middle'>\r\n                      <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='grey' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={15}>\r\n                        <span>\r\n                          {format(activity.date, 'eeee do MMMM')} at {format(activity.date, 'h:mm a')}\r\n                        </span>\r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                  <Segment attached>\r\n                    <Grid verticalAlign='middle'>\r\n                      <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='grey' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                </Segment.Group>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ActivityDetailedInfo\r\n","import React, { Fragment, useContext, useEffect } from 'react';\r\nimport { Segment, Header, Form, Button, Comment } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../../stores/rootStore';\r\nimport {Form as FinalForm, Field} from 'react-final-form';\r\nimport { Link } from 'react-router-dom';\r\nimport TextAreaInput from '../../../common/form/TextAreaInput';\r\nimport { observer } from 'mobx-react-lite';\r\nimport {formatDistance} from 'date-fns';\r\n\r\nconst ActivityDetailedChat = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    createHubConnection,\r\n    stopHubConnection,\r\n    addComment,\r\n    activity\r\n  } = rootStore.activityStore;\r\n\r\n  useEffect(() => {\r\n    createHubConnection(activity!.id);\r\n    return () => {\r\n      stopHubConnection();\r\n    }\r\n  }, [createHubConnection, stopHubConnection, activity])\r\n\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        textAlign='center'\r\n        attached='top'\r\n        inverted\r\n        color='grey'\r\n        style={{ border: 'none' }}\r\n      >\r\n        <Header>Chat about this event</Header>\r\n      </Segment>\r\n      <Segment attached>\r\n        <Comment.Group>\r\n          {activity && activity.comments && activity.comments.map((comment) => (\r\n          <Comment key={comment.id}>\r\n          <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n          <Comment.Content>\r\n            <Comment.Author as={Link} to={`/profile/${comment.username}`}>{comment.displayName}</Comment.Author>\r\n            <Comment.Metadata>\r\n              <div>\r\n                {formatDistance(\r\n                 new Date(comment.createdAt), \r\n                  new Date()\r\n                  )}\r\n                  </div>\r\n            </Comment.Metadata>\r\n            <Comment.Text>{comment.body}</Comment.Text>\r\n          </Comment.Content>\r\n        </Comment>\r\n          ))}\r\n\r\n          <FinalForm \r\n            onSubmit={addComment}\r\n            render={({handleSubmit, submitting, form}) => (\r\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\r\n              <Field \r\n                name='body'\r\n                component={TextAreaInput}\r\n                rows={2}\r\n                placeholder='Add your comment'\r\n              />\r\n              <Button\r\n                loading={submitting}\r\n                content='Add Reply'\r\n                labelPosition='left'\r\n                icon='edit'\r\n                primary\r\n              />\r\n            </Form>\r\n            )}\r\n          />\r\n\r\n        </Comment.Group>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDetailedChat);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Segment, List, Item, Label, Image } from \"semantic-ui-react\";\r\nimport { IAttendee } from \"../../../models/activity\";\r\n\r\ninterface IProps {\r\n  attendees: IAttendee[];\r\n}\r\n\r\nconst ActivityDetailedSidebar: React.FC<IProps> = ({ attendees }) => {\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        textAlign=\"center\"\r\n        style={{ border: \"none\" }}\r\n        attached=\"top\"\r\n        secondary\r\n        inverted\r\n        color=\"grey\"\r\n      >\r\n        {attendees.length} {attendees.length === 1 ? \"Person\" : \"People\"} Going\r\n      </Segment>\r\n      <Segment attached>\r\n        <List relaxed divided>\r\n          {attendees.map((attendee) => (\r\n            <Item key={attendee.username} style={{ position: \"relative\" }}>\r\n              {attendee.isHost && (\r\n                <Label\r\n                  style={{ position: \"absolute\" }}\r\n                  color=\"orange\"\r\n                  ribbon=\"right\"\r\n                >\r\n                  Host\r\n                </Label>\r\n              )}\r\n              <Image size=\"tiny\" src={attendee.image || \"/assets/user.png\"} />\r\n              <Item.Content verticalAlign=\"middle\">\r\n                <Item.Header as=\"h3\">\r\n                  <Link to={`/profile/${attendee.username}`}>{attendee.displayName}</Link>\r\n                </Item.Header>\r\n                <Item.Extra style={{ color: \"orange\" }}>Following</Item.Extra>\r\n              </Item.Content>\r\n            </Item>\r\n          ))}\r\n\r\n        </List>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDetailedSidebar);\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { Grid} from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport LoadingComponent from \"../../../Layout/LoadingComponent\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst ActivityDetails: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {loadActivity, loadingInitial, activity} = rootStore.activityStore;\r\n\r\n  useEffect(() => {\r\n    loadActivity(match.params.id);\r\n  }, [loadActivity, match.params.id, history]);\r\n\r\n  if (loadingInitial || !activity)\r\n    return <LoadingComponent content=\"Loading activity...\" />;\r\n\r\n  if (!activity)\r\n  return <h2>Activity not found</h2>\r\n\r\n  return (\r\n <Grid>\r\n   <Grid.Column width={10}>\r\n      <ActivityDetailedHeader activity={activity} />\r\n      <ActivityDetailedInfo activity={activity} />\r\n      <ActivityDetailedChat />\r\n   </Grid.Column>\r\n   <Grid.Column width={6}>\r\n      <ActivityDetailedSidebar\r\n        attendees={activity.attendees}\r\n      />\r\n   </Grid.Column>\r\n </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ActivityDetails);\r\n","\r\nexport interface IBlogsEnvelope {\r\n    blogs: IBlog[];\r\n    blogCount: number;\r\n  }\r\n\r\nexport interface IBlog {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    main: string;\r\n    main2: string;\r\n    category: string;\r\n    date: Date;\r\n    isHost: boolean;\r\n    isLiked: boolean;\r\n    liked: ILikedBlog[];\r\n    blogComments: IComment[];\r\n}\r\n\r\nexport interface IComment {\r\n    id: string;\r\n    createdAt: Date;\r\n    body: string;\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n  }\r\n\r\nexport interface IBlogFormValues extends Partial<IBlog> {\r\n    time?: Date;\r\n}\r\nexport class BlogFormValues implements IBlogFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = \"\";\r\n    description: string = \"\";\r\n    main: string = '';\r\n    main2: string = '';\r\n    date?: Date = undefined;\r\n    time?: Date = undefined;\r\n\r\n    constructor(init?: IBlogFormValues) {\r\n        if (init && init.date){\r\n            init.time = init.date\r\n        }\r\n        Object.assign(this, init);\r\n    } \r\n}\r\n\r\nexport interface ILikedBlog {\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n    isHost: boolean;\r\n    following?: boolean;\r\n}","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, Form, Grid, Segment } from \"semantic-ui-react\";\r\nimport {BlogFormValues} from \"../../../models/blog\";\r\nimport { v4 as uuid } from \"uuid\";\r\n// import LoadingComponent from \"../../../../LoadingComponent\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport TextInput from \"../../../common/form/TextInput\";\r\nimport TextAreaInput from \"../../../common/form/TextAreaInput\";\r\nimport SelectInput from \"../../../common/form/SelectInput\";\r\n// import DateInput from \"../../../common/form/DateInput\";\r\n\r\nimport { category } from \"../../../common/options/categoryOptions\";\r\nimport { combineDateAndTime } from \"../../../common/util/util\";\r\nimport {combineValidators, isRequired, composeValidators, hasLengthGreaterThan} from 'revalidate';\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\n\r\nconst validate = combineValidators({\r\n  title: isRequired({message: 'The event title is required'}),\r\n  category: isRequired('Category'),\r\n  description: composeValidators(\r\n    isRequired('Description'),\r\n    hasLengthGreaterThan(4)({message: 'Description nneds to be at least 5 charectors'})\r\n  )(),\r\n  // city: isRequired('City'),\r\n  // venue: isRequired('Venue'),\r\n  // date: isRequired('Date'),\r\n  // time: isRequired('Time'),\r\n})\r\n\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst BlogForm: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    createblog,\r\n    editblog,\r\n    submittingBlog,\r\n    loadblog,\r\n    deleteblog\r\n  } = rootStore.blogStore;\r\n\r\n  const [blog, setBlog] = useState(new BlogFormValues());\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n    if (match.params.id) {\r\n      setLoading(true);\r\n      loadblog(match.params.id)\r\n        .then(blog => {\r\n          setBlog(new BlogFormValues(blog));\r\n        })\r\n        .finally(() => setLoading(false));\r\n    }\r\n  }, [loadblog, match.params.id]);\r\n\r\n  const handleFinalFormSubmit = (values: any) => {\r\n    // const dateAndTime = combineDateAndTime(values.date, values.time);\r\n    const dateAndTime = combineDateAndTime( new Date(Date.now()),new Date(Date.now()));\r\n\r\n    const { date, time, ...blog } = values;\r\n    blog.date = dateAndTime;\r\n    // const {...blog} = values;\r\n    // blog.date = new Date(Date.now());\r\n\r\n    if (!blog.id) {\r\n      let newBlog = {\r\n        ...blog,\r\n        id: uuid(),\r\n      };\r\n      createblog(newBlog);\r\n    } else {\r\n      editblog(blog);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <Segment clearing>\r\n          <FinalForm\r\n          validate={validate}\r\n            initialValues={blog}\r\n            onSubmit={handleFinalFormSubmit}\r\n            render={({ handleSubmit, invalid, pristine }) => (\r\n              <Form onSubmit={handleSubmit} loading={loading}>\r\n                <Field\r\n                  name=\"title\"\r\n                  placeholder=\"Title\"\r\n                  value={blog.title}\r\n                  component={TextInput}\r\n                />\r\n                   <Field\r\n                  name=\"main\"\r\n                  placeholder=\"Main\"\r\n                  value={blog.main}\r\n                  rows={3}\r\n                  component={TextAreaInput}\r\n                />\r\n                   <Field\r\n                  name=\"main2\"\r\n                  placeholder=\"Main2\"\r\n                  value={blog.main2}\r\n                  rows={3}\r\n                  component={TextAreaInput}\r\n                />\r\n                <Field\r\n                  name=\"description\"\r\n                  placeholder=\"Description\"\r\n                  value={blog.description}\r\n                  rows={3}\r\n                  component={TextAreaInput}\r\n                />\r\n                <Field\r\n                  name=\"category\"\r\n                  placeholder=\"Category\"\r\n                  options={category}\r\n                  value={blog.category}\r\n                  component={SelectInput}\r\n                />\r\n                {/* <Form.Group width=\"equal\">\r\n                  // <Field\r\n                  //   name=\"date\"\r\n                  //   placeholder=\"Date\"\r\n                  //   value={blog.time}\r\n                  //   component={DateInput}\r\n                  //   date={true}\r\n                  // />\r\n                  <Field\r\n                    name=\"date\"\r\n                    placeholder=\"Time\"\r\n                    value={blog.date}\r\n                    component={DateInput}\r\n                    time={true}\r\n                  />\r\n                </Form.Group> */}\r\n                {/* <Field\r\n                  name=\"city\"\r\n                  component={TextInput}\r\n                  placeholder=\"City\"\r\n                  value={blog.city}\r\n                /> */}\r\n                {/* <Field\r\n                  name=\"venue\"\r\n                  placeholder=\"Venue\"\r\n                  value={blog.venue}\r\n                  component={TextInput}\r\n                /> */}\r\n                <Button\r\n                  loading={submittingBlog}\r\n                  disabled={loading || invalid || pristine}\r\n                  floated=\"right\"\r\n                  positive\r\n                  type=\"submit\"\r\n                  content=\"Submit\"\r\n                />\r\n                <Button\r\n                  onClick={blog.id ? () => history.push(`/blogs/${blog.id}`) : () => history.push(\"/blogs\")}\r\n                  disabled={loading}\r\n                  floated=\"right\"\r\n                  type=\"button\"\r\n                  content=\"Cancel\"\r\n                />\r\n                    {blog.id && \r\n                <Button\r\n                 onClick={(e)=>deleteblog(e,blog.id!).then(()=> history.push('/blogs'))}\r\n                 \r\n                 disabled={loading}\r\n                 floated=\"right\"\r\n                 type=\"button\"\r\n                 content=\"Delete\"\r\n                />\r\n                }\r\n              </Form>\r\n            )}\r\n          />\r\n        </Segment>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(BlogForm);\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image } from 'semantic-ui-react'\r\nimport { IBlog } from '../../../models/blog';\r\nimport {format} from 'date-fns';\r\nimport { RootStoreContext } from '../../../stores/rootStore';\r\n\r\nconst blogImageStyle = {\r\n  filter: 'brightness(30%)'\r\n};\r\n\r\nconst blogImageTextStyle = {\r\n  position: 'absolute',\r\n  bottom: '5%',\r\n  left: '5%',\r\n  width: '100%',\r\n  height: 'auto',\r\n  color: 'white'\r\n};\r\n\r\nconst BlogDetailedHeader: React.FC<{blog: IBlog}> = ({blog}) => {\r\n  const host = blog.liked.filter(x => x.isHost)[0];\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { likeBlog, unlikeBlog, loadingBlog } = rootStore.blogStore;\r\n    return (\r\n        <Segment.Group>\r\n          <Segment basic attached='top' style={{ padding: '0' }}>\r\n            <Image src={`/assets/categoryImages/${blog.category}.jpg`} fluid style={blogImageStyle}/>\r\n            <Segment basic style={blogImageTextStyle}>\r\n              <Item.Group>\r\n                <Item>\r\n                  <Item.Content>\r\n                    <Header\r\n                      size='huge'\r\n                      content={blog.title}\r\n                      style={{ color: 'white' }}\r\n                    />\r\n                    <p>{format(blog.date, 'eeee do MMMM')}</p>\r\n                    <p>\r\n                    Hosted by {' '}\r\n                    <Link to={`/profile/${host.username}`}>\r\n                      <strong>{host.displayName}</strong>\r\n                    </Link>\r\n                    </p>\r\n                  </Item.Content>\r\n                </Item>\r\n              </Item.Group>\r\n            </Segment>\r\n          </Segment>\r\n          <Segment clearing attached='bottom'>\r\n            {blog.isHost ? (\r\n              <Button as={Link} to={`/blog/manage/${blog.id}`} color='orange' floated='right'>\r\n              Manage Event\r\n            </Button>\r\n              ) : blog.isLiked ? (\r\n                <Button loading={loadingBlog} onClick={unlikeBlog}>Cancel attendance</Button>\r\n                ) : (\r\n                <Button loading={loadingBlog} onClick={likeBlog} color='grey'>Join Blog</Button>\r\n              )}\r\n          </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default observer(BlogDetailedHeader);\r\n","import React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { IBlog } from '../../../models/blog'\r\nimport {format} from 'date-fns'\r\n\r\n\r\nconst BlogDetailedInfo: React.FC<{blog: IBlog}> = ({blog}) => {\r\n    return (\r\n        <div>\r\n            <Segment.Group>\r\n                  <Segment attached='top'>\r\n                    <Grid>\r\n                      <Grid.Column width={1}>\r\n                        <Icon size='large' color='grey' name='info' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={15}>\r\n                        <p>{blog.description}</p>\r\n                        <p>{blog.main}</p>\r\n                        \r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                  <Segment attached>\r\n                    <Grid verticalAlign='middle'>\r\n                      <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='grey' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={15}>\r\n                        <span>\r\n                          {format(blog.date, 'eeee do MMMM')} at {format(blog.date, 'h:mm a')}\r\n                        </span>\r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                  <Segment attached>\r\n                    <Grid verticalAlign='middle'>\r\n                      <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='grey' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={11}>\r\n                        <span>{blog.main2}</span>\r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                </Segment.Group>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BlogDetailedInfo\r\n","import React, { Fragment, useContext, useEffect } from \"react\";\r\nimport { Segment, Header, Form, Button, Comment } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport { Link } from \"react-router-dom\";\r\nimport TextAreaInput from \"../../../common/form/TextAreaInput\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { formatDistance } from \"date-fns\";\r\n\r\nconst BlogDetailedChat = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    createHubConnectionBlog,\r\n    stopHubConnectionBlog,\r\n    addCommentBlog,\r\n    blog,\r\n  } = rootStore.blogStore;\r\n\r\n  useEffect(() => {\r\n    createHubConnectionBlog(blog!.id);\r\n    return () => {\r\n      stopHubConnectionBlog();\r\n    };\r\n  }, [createHubConnectionBlog, stopHubConnectionBlog, blog]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        textAlign=\"center\"\r\n        attached=\"top\"\r\n        inverted\r\n        color=\"grey\"\r\n        style={{ border: \"none\" }}\r\n      >\r\n        <Header>Chat about this event</Header>\r\n      </Segment>\r\n      <Segment attached>\r\n        <Comment.Group>\r\n          {blog &&\r\n            blog.blogComments &&\r\n            blog.blogComments.map((comment) => (\r\n              <Comment key={comment.id}>\r\n                <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\r\n                <Comment.Content>\r\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\r\n                    {comment.displayName}\r\n                  </Comment.Author>\r\n                  <Comment.Metadata>\r\n                    <div>\r\n                      {formatDistance(new Date(comment.createdAt), new Date())}\r\n                    </div>\r\n                  </Comment.Metadata>\r\n                  <Comment.Text>{comment.body}</Comment.Text>\r\n                </Comment.Content>\r\n              </Comment>\r\n            ))}\r\n\r\n          <FinalForm\r\n            onSubmit={addCommentBlog}\r\n            render={({ handleSubmit, submitting, form }) => (\r\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\r\n                <Field\r\n                  name=\"body\"\r\n                  component={TextAreaInput}\r\n                  rows={2}\r\n                  placeholder=\"Add your comment\"\r\n                />\r\n                <Button\r\n                  loading={submitting}\r\n                  content=\"Add Reply\"\r\n                  labelPosition=\"left\"\r\n                  icon=\"edit\"\r\n                  primary\r\n                />\r\n              </Form>\r\n            )}\r\n          />\r\n        </Comment.Group>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(BlogDetailedChat);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Segment, List, Item, Label, Image } from \"semantic-ui-react\";\r\nimport { ILikedBlog } from \"../../../models/blog\";\r\n\r\ninterface IProps {\r\n  attendees: ILikedBlog[];\r\n}\r\n\r\nconst BlogDetailedSidebar: React.FC<IProps> = ({ attendees }) => {\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        textAlign=\"center\"\r\n        style={{ border: \"none\" }}\r\n        attached=\"top\"\r\n        secondary\r\n        inverted\r\n        color=\"grey\"\r\n      >\r\n        {attendees.length} {attendees.length === 1 ? \"Person\" : \"People\"} Going\r\n      </Segment>\r\n      <Segment attached>\r\n        <List relaxed divided>\r\n          {attendees.map((attendee) => (\r\n            <Item key={attendee.username} style={{ position: \"relative\" }}>\r\n              {attendee.isHost && (\r\n                <Label\r\n                  style={{ position: \"absolute\" }}\r\n                  color=\"orange\"\r\n                  ribbon=\"right\"\r\n                >\r\n                  Host\r\n                </Label>\r\n              )}\r\n              <Image size=\"tiny\" src={attendee.image || \"/assets/user.png\"} />\r\n              <Item.Content verticalAlign=\"middle\">\r\n                <Item.Header as=\"h3\">\r\n                  <Link to={`/profile/${attendee.username}`}>{attendee.displayName}</Link>\r\n                </Item.Header>\r\n                <Item.Extra style={{ color: \"orange\" }}>Following</Item.Extra>\r\n              </Item.Content>\r\n            </Item>\r\n          ))}\r\n\r\n        </List>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(BlogDetailedSidebar);\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Grid} from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport LoadingComponent from \"../../../Layout/LoadingComponent\";\r\nimport BlogDetailedHeader from \"./BlogDetailedHeader\";\r\nimport BlogDetailedInfo from \"./BlogDetailedInfo\";\r\nimport BlogDetailedChat from \"./BlogDetailedChat\";\r\nimport BlogDetailedSidebar from \"./BlogDetailedSidebar\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst BlogDetails: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {loadblog, loadingInitialBlog, blog} = rootStore.blogStore;\r\n  const [ initialLoad, setInitialLoad] = useState(true);\r\n  useEffect(() => {\r\n    loadblog(match.params.id).then(()=>setInitialLoad(false));\r\n  }, [loadblog, match.params.id, history]);\r\n\r\n  if (loadingInitialBlog || !blog || initialLoad)\r\n    return <LoadingComponent content=\"Loading blog...\" />;\r\n\r\n  if (!blog)\r\n  return <h2>Blog not found</h2>\r\n\r\n  return (\r\n <Grid>\r\n   <Grid.Column width={10}>\r\n      <BlogDetailedHeader blog={blog} />\r\n      <BlogDetailedInfo blog={blog} />\r\n      {!initialLoad && <BlogDetailedChat />}\r\n   </Grid.Column>\r\n   <Grid.Column width={6}>\r\n      <BlogDetailedSidebar\r\n        attendees={blog.liked}\r\n      />\r\n   </Grid.Column>\r\n </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(BlogDetails);\r\n","import React from \"react\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { ILikedBlog } from \"../../../models/blog\";\r\n\r\ninterface IProps {\r\n  peopleWhoLiked: ILikedBlog[];\r\n}\r\n\r\nconst BlogListItemAttendees: React.FC<IProps> = ({ peopleWhoLiked }) => {\r\n  return (\r\n    <List horizontal>\r\n      {peopleWhoLiked.map((attendee) => (\r\n        <List.Item key={attendee.username}>\r\n          <Popup\r\n            header={attendee.username}\r\n            trigger={\r\n              <Image\r\n                size=\"mini\"\r\n                circular\r\n                src={attendee.image || \"/assets/user.png\"}\r\n              />\r\n            }\r\n          />\r\n        </List.Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default BlogListItemAttendees;\r\n","import React from \"react\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n// import BlogStore from \"../../../../App/stores/blogStore\";\r\nimport { IBlog } from \"../../../models/blog\";\r\nimport {format} from 'date-fns'\r\nimport BlogListItemAttendees from './BlogListItemAttendees';\r\n// import { RootStore } from \"../../../stores/rootStore\";\r\n\r\nconst BlogListItem: React.FC<{ blog: IBlog }> = ({ blog }) => {\r\n  const host = blog.liked.filter(x => x.isHost)[0];\r\n  return (\r\n    <Segment.Group>\r\n      <Segment>\r\n          <Item.Group>\r\n        <Item>\r\n          <Item.Image size=\"tiny\" circular src={host.image || \"/assets/user.png\"} />\r\n          <Item.Content>\r\n            <Item.Header as={Link} to={`/blogs/${blog.id}`}>{blog.title}</Item.Header>\r\n            <Item.Description>\r\n            Hosted By \r\n            <Link to={`/profile/${host.username}`}>\r\n            {host.displayName}\r\n            </Link>\r\n            </Item.Description>\r\n            {blog.isHost &&\r\n            <Item.Description>\r\n              <Label \r\n                basic\r\n                color='orange'\r\n                content='You are hosting this blog'\r\n              />\r\n            </Item.Description>\r\n              }\r\n                {blog.liked && !blog.isHost &&\r\n            <Item.Description>\r\n              <Label \r\n                basic\r\n                color='orange'\r\n                content='You liked this blog'\r\n              />\r\n            </Item.Description>\r\n              }\r\n          \r\n          </Item.Content>\r\n        </Item>\r\n\r\n          </Item.Group>\r\n      </Segment>\r\n      <Segment>\r\n          <Icon name='clock' /> {format(new Date(blog.date), 'H:mm a')}\r\n          {/* <Icon name='marker' /> {blog.venue}, {blog.city} */}\r\n      </Segment>\r\n      <Segment secondary>\r\n            <BlogListItemAttendees\r\n              peopleWhoLiked={blog.liked}\r\n            />\r\n      </Segment>\r\n      <Segment clearing>\r\n          <span>{blog.description}</span>\r\n          <Button\r\n                as={Link}\r\n                to={`/blogs/${blog.id}`}\r\n                floated=\"right\"\r\n                content=\"View\"\r\n                color=\"black\"\r\n              />\r\n      </Segment>\r\n    </Segment.Group>\r\n  );\r\n};\r\n\r\nexport default BlogListItem;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment, useContext } from \"react\";\r\nimport { Item, Label } from \"semantic-ui-react\";\r\n// import BlogStore from \"../../../../App/stores/blogStore\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nimport BlogListItem from \"./BlogListItem\";\r\nimport {format} from 'date-fns';\r\n\r\nconst BlogList: React.FC = () => {\r\n  // const blogStore = useContext(BlogStore);\r\n  // const { blogsByDate } = blogStore;\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {BlogsByDate} = rootStore.blogStore;\r\n\r\n  return (\r\n    <Fragment>\r\n      {BlogsByDate.map(([group, blogs]) => (\r\n        <Fragment key={group}>\r\n          <Label  size=\"large\" color=\"black\">\r\n            {format(new Date(group), 'eeee do MMMM')}\r\n          </Label>\r\n            <Item.Group divided>\r\n              {blogs.map((blog) => (\r\n                <BlogListItem key={blog.id} blog={blog} />\r\n              ))}\r\n            </Item.Group>\r\n        </Fragment>\r\n      ))}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(BlogList);\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\nconst BlogListItemPlaceholder = () => {\r\n  return (\r\n    <Fragment>\r\n      <Placeholder fluid style={{ marginTop: 50 }}>\r\n        <Segment.Group>\r\n          <Segment style={{ minHeight: 110 }}>\r\n            <Placeholder>\r\n              <Placeholder.Header image>\r\n                <Placeholder.Line />\r\n                <Placeholder.Line />\r\n              </Placeholder.Header>\r\n              <Placeholder.Paragraph>\r\n                <Placeholder.Line />\r\n              </Placeholder.Paragraph>\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment>\r\n            <Placeholder>\r\n              <Placeholder.Line />\r\n              <Placeholder.Line />\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment secondary style={{ minHeight: 70 }} />\r\n          <Segment clearing>\r\n            <Button disabled color='black' floated='right' content='View' />\r\n          </Segment>\r\n        </Segment.Group>\r\n      </Placeholder>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default BlogListItemPlaceholder;","import React, { Fragment, useContext } from 'react';\r\nimport { Menu, Header, Button } from 'semantic-ui-react';\r\n// import { Calendar } from 'react-widgets';\r\n\r\nimport { RootStoreContext } from '../../../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst BlogFilters = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { predicateBlog, setPredicateBlog } = rootStore.blogStore;\r\n  return (\r\n    <Fragment>\r\n      <Menu vertical size={'large'} style={{ width: '100%', marginTop: 50 }}>\r\n       \r\n        <Header icon={'filter'} attached color={'grey'} content={'Filters'} />\r\n        <Menu.Item\r\n          active={predicateBlog.size === 0}\r\n          onClick={() => setPredicateBlog('all', 'true')}\r\n          color={'black'}\r\n          name={'all'}\r\n          content={'All Blogs'}\r\n        />\r\n        <Menu.Item\r\n          active={predicateBlog.has('isLiked')}\r\n          onClick={() => setPredicateBlog('isLiked', 'true')}\r\n          color={'black'}\r\n          name={'username'}\r\n          content={\"I Liked this blog\"}\r\n        />\r\n        <Menu.Item\r\n          active={predicateBlog.has('isHost')}\r\n          onClick={() => setPredicateBlog('isHost', 'true')}\r\n          color={'black'}\r\n          name={'host'}\r\n          content={\"I'm hosting\"}\r\n        />\r\n      </Menu>\r\n      <Header\r\n    icon={'add'}\r\n    attached\r\n    color={'grey'}\r\n    content={'Create'}\r\n  />\r\n      <Button\r\n        as={NavLink}\r\n        to={\"/createBlog\"}\r\n        positive\r\n        content=\"Create Blog\"\r\n      />\r\n      {/* <Header\r\n        icon={'calendar'}\r\n        attached\r\n        color={'grey'}\r\n        content={'Select Date'}\r\n      /> */}\r\n      {/* <Calendar\r\n        onChange={date => setPredicateBlog('startDate', date!)}\r\n        value={predicateBlog.get('startDate') || new Date()}\r\n      /> */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(BlogFilters);\r\n","// start typing rafc\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport BlogList from \"./BlogList\";\r\nimport { observer } from \"mobx-react-lite\";\r\n// import LoadingComponent from \"../../../Layout/LoadingComponent\";\r\nimport BlogListItemPlaceholder from './BlogListItemPlaceholder';\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport BlogFilters from './BlogFilters';\r\n\r\n\r\nconst BlogDashboard: React.FC = () => {\r\n    // MOBX\r\n    // const blogStore = useContext(BlogStore);\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n      loadBlogs,\r\n      loadingInitialBlog,\r\n      setPageBlog,\r\n      pageBlog,\r\n      totalPagesBlog\r\n    } = rootStore.blogStore;\r\n    const [loadingNextBlog, setLoadingNextBlog] =useState(false);\r\n\r\n    const handleGetNext = () => {\r\n      setLoadingNextBlog(true);\r\n      setPageBlog(pageBlog + 1);\r\n      loadBlogs().then(() => setLoadingNextBlog(false));\r\n    };\r\n\r\n    // LIFECYCLE\r\n    useEffect(() => {\r\n     loadBlogs();\r\n    }, [loadBlogs]);\r\n  \r\n    // if (loadingInitial)\r\n    //   return <LoadingComponent content=\"Loading blogs...\" />;\r\n  return (\r\n      <Grid>\r\n        <Grid.Column width={10}>\r\n          {loadingInitialBlog && pageBlog === 0 ? (\r\n            <BlogListItemPlaceholder />\r\n          ) : (\r\n            <InfiniteScroll\r\n            pageStart={0}\r\n            loadMore={handleGetNext}\r\n            hasMore={!loadingNextBlog && pageBlog + 1 < totalPagesBlog}\r\n            initialLoad={false}\r\n              >\r\n                <BlogList />\r\n              </InfiniteScroll>\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={6}>\r\n          <BlogFilters />\r\n        </Grid.Column>\r\n        <Grid.Column width={10}>\r\n          <Loader active={loadingNextBlog} />\r\n        </Grid.Column>\r\n      </Grid>\r\n  );\r\n};\r\nexport default observer(BlogDashboard);\r\n","\r\nexport interface IJobsEnvelope {\r\n    jobs: IJob[];\r\n    jobCount: number;\r\n  }\r\n\r\n\r\nexport interface IJob {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    category: string;\r\n    date: Date;\r\n    city: string;\r\n    isApplied: boolean;\r\n    isHost: boolean;\r\n    applied: IApplied[];\r\n    jobComments: IJobComment[];\r\n}\r\n\r\nexport interface IJobComment {\r\n    id: string;\r\n    createdAt: Date;\r\n    body: string;\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n  }\r\n\r\nexport interface IJobFormValues extends Partial<IJob> {\r\n    time?: Date;\r\n}\r\nexport class JobFormValues implements IJobFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = \"\";\r\n    description: string = \"\";\r\n    date?: Date = undefined;\r\n    time?: Date = undefined;\r\n    city: string = \"\";\r\n    // venue:string = \"\";\r\n\r\n    constructor(init?: IJobFormValues) {\r\n        if (init && init.date){\r\n            init.time = init.date\r\n        }\r\n        Object.assign(this, init);\r\n    } \r\n}\r\n\r\nexport interface IApplied {\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n    isHost: boolean;\r\n    following?: boolean;\r\n}\r\n\r\n// export interface IEmployee {\r\n//     username: string;\r\n//     displayName: string;\r\n//     image: string;\r\n//     isHost: boolean;\r\n//     following?: boolean;\r\n// }\r\n\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, Form, Grid, Segment } from \"semantic-ui-react\";\r\nimport {JobFormValues} from \"../../../models/jobs\";\r\nimport { v4 as uuid } from \"uuid\";\r\n// import LoadingComponent from \"../../../../LoadingComponent\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport TextInput from \"../../../common/form/TextInput\";\r\nimport TextAreaInput from \"../../../common/form/TextAreaInput\";\r\nimport SelectInput from \"../../../common/form/SelectInput\";\r\nimport DateInput from \"../../../common/form/DateInput\";\r\n\r\nimport { category } from \"../../../common/options/categoryOptions\";\r\nimport { combineDateAndTime } from \"../../../common/util/util\";\r\nimport {combineValidators, isRequired, composeValidators, hasLengthGreaterThan} from 'revalidate';\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\n\r\nconst validate = combineValidators({\r\n  title: isRequired({message: 'The event title is required'}),\r\n  category: isRequired('Category'),\r\n  description: composeValidators(\r\n    isRequired('Description'),\r\n    hasLengthGreaterThan(4)({message: 'Description nneds to be at least 5 charectors'})\r\n  )(),\r\n  city: isRequired('City'),\r\n  // venue: isRequired('Venue'),\r\n  // date: isRequired('Date'),\r\n  // time: isRequired('Time'),\r\n})\r\n\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst JobForm: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    createJob,\r\n    editJob,\r\n    submittingJob,\r\n    loadJob,\r\n    deletejob\r\n  } = rootStore.jobStore;\r\n\r\n  const [job, setJob] = useState(new JobFormValues());\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n    if (match.params.id) {\r\n      setLoading(true);\r\n      loadJob(match.params.id)\r\n        .then(job => {\r\n          setJob(new JobFormValues(job));\r\n        })\r\n        .finally(() => setLoading(false));\r\n    }\r\n  }, [loadJob, match.params.id]);\r\n\r\n  const handleFinalFormSubmit = (values: any) => {\r\n    const dateAndTime = combineDateAndTime(values.date, values.time);\r\n    // const dateAndTime = combineDateAndTime( new Date(Date.now()),new Date(Date.now()));\r\n    const { date, time, ...job } = values;\r\n    // const {...job} = values;\r\n    job.date = dateAndTime;\r\n    // job.date = new Date(Date.now());\r\n\r\n    if (!job.id) {\r\n      let newJob = {\r\n        ...job,\r\n        id: uuid(),\r\n      };\r\n      createJob(newJob);\r\n    } else {\r\n      editJob(job);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <Segment clearing>\r\n          <FinalForm\r\n          validate={validate}\r\n            initialValues={job}\r\n            onSubmit={handleFinalFormSubmit}\r\n            render={({ handleSubmit, invalid, pristine }) => (\r\n              <Form onSubmit={handleSubmit} loading={loading}>\r\n                <Field\r\n                  name=\"title\"\r\n                  placeholder=\"Title\"\r\n                  value={job.title}\r\n                  component={TextInput}\r\n                />\r\n                <Field\r\n                  name=\"description\"\r\n                  placeholder=\"Description\"\r\n                  value={job.description}\r\n                  rows={3}\r\n                  component={TextAreaInput}\r\n                />\r\n                <Field\r\n                  name=\"category\"\r\n                  placeholder=\"Category\"\r\n                  options={category}\r\n                  value={job.category}\r\n                  component={SelectInput}\r\n                />\r\n                <Form.Group width=\"equal\">\r\n                  <Field\r\n                    name=\"date\"\r\n                    placeholder=\"Date\"\r\n                    value={job.time}\r\n                    component={DateInput}\r\n                    date={true}\r\n                  />\r\n                  <Field\r\n                    name=\"timr\"\r\n                    placeholder=\"Time\"\r\n                    value={job.time}\r\n                    component={DateInput}\r\n                    time={true}\r\n                  />\r\n                </Form.Group>\r\n                <Field\r\n                  name=\"city\"\r\n                  component={TextInput}\r\n                  placeholder=\"City\"\r\n                  value={job.city}\r\n                />\r\n                {/* <Field\r\n                  name=\"venue\"\r\n                  placeholder=\"Venue\"\r\n                  value={job.venue}\r\n                  component={TextInput}\r\n                /> */}\r\n                <Button\r\n                  loading={submittingJob}\r\n                  disabled={loading || invalid || pristine}\r\n                  floated=\"right\"\r\n                  positive\r\n                  type=\"submit\"\r\n                  content=\"Submit\"\r\n                />\r\n                <Button\r\n                  onClick={job.id ? () => history.push(`/jobs/${job.id}`) : () => history.push(\"/jobs\")}\r\n                  disabled={loading}\r\n                  floated=\"right\"\r\n                  type=\"button\"\r\n                  content=\"Cancel\"\r\n                />\r\n                    {job.id && \r\n                <Button\r\n                 onClick={(e)=>deletejob(e,job.id!).then(()=> history.push('/jobs'))}\r\n                 \r\n                 disabled={loading}\r\n                 floated=\"right\"\r\n                 type=\"button\"\r\n                 content=\"Delete\"\r\n                />\r\n                }\r\n              </Form>\r\n            )}\r\n          />\r\n        </Segment>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(JobForm);\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image } from 'semantic-ui-react'\r\nimport { IJob } from '../../../models/jobs';\r\nimport {format} from 'date-fns';\r\nimport { RootStoreContext } from '../../../stores/rootStore';\r\n\r\nconst jobImageStyle = {\r\n  filter: 'brightness(30%)'\r\n};\r\n\r\nconst jobImageTextStyle = {\r\n  position: 'absolute',\r\n  bottom: '5%',\r\n  left: '5%',\r\n  width: '100%',\r\n  height: 'auto',\r\n  color: 'white'\r\n};\r\n\r\nconst JobDetailedHeader: React.FC<{job: IJob}> = ({job}) => {\r\n  const host = job.applied.filter(x => x.isHost)[0];\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { applyjob, unlikeJob, loadingJob } = rootStore.jobStore;\r\n    return (\r\n        <Segment.Group>\r\n          <Segment basic attached='top' style={{ padding: '0' }}>\r\n            <Image src={`/assets/categoryImages/${job.category}.jpg`} fluid style={jobImageStyle}/>\r\n            <Segment basic style={jobImageTextStyle}>\r\n              <Item.Group>\r\n                <Item>\r\n                  <Item.Content>\r\n                    <Header\r\n                      size='huge'\r\n                      content={job.title}\r\n                      style={{ color: 'white' }}\r\n                    />\r\n                    <p>{format(job.date, 'eeee do MMMM')}</p>\r\n                    <p>\r\n                    Hosted by {' '}\r\n                    <Link to={`/profile/${host.username}`}>\r\n                      <strong>{host.displayName}</strong>\r\n                    </Link>\r\n                    </p>\r\n                  </Item.Content>\r\n                </Item>\r\n              </Item.Group>\r\n            </Segment>\r\n          </Segment>\r\n          <Segment clearing attached='bottom'>\r\n            {job.isHost ? (\r\n              <Button as={Link} to={`/job/manage/${job.id}`} color='orange' floated='right'>\r\n              Manage Event\r\n            </Button>\r\n              ) : job.isApplied ? (\r\n                <Button loading={loadingJob} onClick={unlikeJob}>Cancel application</Button>\r\n                ) : (\r\n                <Button loading={loadingJob} onClick={applyjob} color='grey'>Apply</Button>\r\n              )}\r\n          </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default observer(JobDetailedHeader);\r\n","import React from 'react';\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react';\r\nimport { IJob } from '../../../models/jobs';\r\nimport {format} from 'date-fns';\r\n\r\nconst JobDetailedInfo: React.FC<{job: IJob}> = ({job}) => {\r\n    return (\r\n        <div>\r\n            <Segment.Group>\r\n                  <Segment attached='top'>\r\n                    <Grid>\r\n                      <Grid.Column width={1}>\r\n                        <Icon size='large' color='grey' name='info' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={15}>\r\n                        <p>{job.description}</p>\r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                  <Segment attached>\r\n                    <Grid verticalAlign='middle'>\r\n                      <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='grey' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={15}>\r\n                        <span>\r\n                          {format(job.date, 'eeee do MMMM')} at {format(job.date, 'h:mm a')}\r\n                        </span>\r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                  <Segment attached>\r\n                    <Grid verticalAlign='middle'>\r\n                      <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='grey' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={11}>\r\n                        <span> {job.city}</span>\r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                </Segment.Group>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JobDetailedInfo\r\n","import React, { Fragment, useContext, useEffect } from \"react\";\r\nimport { Segment, Header, Form, Button, Comment } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport { Link } from \"react-router-dom\";\r\nimport TextAreaInput from \"../../../common/form/TextAreaInput\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { formatDistance } from \"date-fns\";\r\n\r\nconst JobDetailedChat = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    createHubConnectionJob,\r\n    stopHubConnectionJob,\r\n    addCommentJob,\r\n    job,\r\n  } = rootStore.jobStore;\r\n\r\n  useEffect(() => {\r\n    createHubConnectionJob(job!.id);\r\n    return () => {\r\n      stopHubConnectionJob();\r\n    };\r\n  }, [createHubConnectionJob, stopHubConnectionJob, job]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        textAlign=\"center\"\r\n        attached=\"top\"\r\n        inverted\r\n        color=\"grey\"\r\n        style={{ border: \"none\" }}\r\n      >\r\n        <Header>Chat about this event</Header>\r\n      </Segment>\r\n      <Segment attached>\r\n        <Comment.Group>\r\n          {job &&\r\n            job.jobComments &&\r\n            job.jobComments.map((comment) => (\r\n              <Comment key={comment.id}>\r\n                <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\r\n                <Comment.Content>\r\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\r\n                    {comment.displayName}\r\n                  </Comment.Author>\r\n                  <Comment.Metadata>\r\n                    <div>\r\n                      {formatDistance(new Date(comment.createdAt), new Date())}\r\n                    </div>\r\n                  </Comment.Metadata>\r\n                  <Comment.Text>{comment.body}</Comment.Text>\r\n                </Comment.Content>\r\n              </Comment>\r\n            ))}\r\n\r\n          <FinalForm\r\n            onSubmit={addCommentJob}\r\n            render={({ handleSubmit, submitting, form }) => (\r\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\r\n                <Field\r\n                  name=\"body\"\r\n                  component={TextAreaInput}\r\n                  rows={2}\r\n                  placeholder=\"Add your comment\"\r\n                />\r\n                <Button\r\n                  loading={submitting}\r\n                  content=\"Add Reply\"\r\n                  labelPosition=\"left\"\r\n                  icon=\"edit\"\r\n                  primary\r\n                />\r\n              </Form>\r\n            )}\r\n          />\r\n        </Comment.Group>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(JobDetailedChat);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Segment, List, Item, Label, Image } from \"semantic-ui-react\";\r\nimport { IApplied } from \"../../../models/jobs\";\r\n\r\ninterface IProps {\r\n  applicants: IApplied[];\r\n}\r\n\r\nconst JobDetailedSidebar: React.FC<IProps> = ({ applicants }) => {\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        textAlign=\"center\"\r\n        style={{ border: \"none\" }}\r\n        attached=\"top\"\r\n        secondary\r\n        inverted\r\n        color=\"grey\"\r\n      >\r\n        {applicants.length} {applicants.length === 1 ? \"Person\" : \"People\"} Applying\r\n      </Segment>\r\n      <Segment attached>\r\n        <List relaxed divided>\r\n          {applicants.map((applicant) => (\r\n            <Item key={applicant.username} style={{ position: \"relative\" }}>\r\n              {applicant.isHost && (\r\n                <Label\r\n                  style={{ position: \"absolute\" }}\r\n                  color=\"orange\"\r\n                  ribbon=\"right\"\r\n                >\r\n                  Host\r\n                </Label>\r\n              )}\r\n              <Image size=\"tiny\" src={applicant.image || \"/assets/user.png\"} />\r\n              <Item.Content verticalAlign=\"middle\">\r\n                <Item.Header as=\"h3\">\r\n                  <Link to={`/profile/${applicant.username}`}>{applicant.displayName}</Link>\r\n                </Item.Header>\r\n                <Item.Extra style={{ color: \"orange\" }}>Following</Item.Extra>\r\n              </Item.Content>\r\n            </Item>\r\n          ))}\r\n\r\n        </List>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(JobDetailedSidebar);\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { Grid} from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport LoadingComponent from \"../../../Layout/LoadingComponent\";\r\nimport JobDetailedHeader from \"./JobDetailedHeader\";\r\nimport JobDetailedInfo from \"./JobDetailedInfo\";\r\nimport JobDetailedChat from \"./JobDetailedChat\";\r\nimport JobDetailedSidebar from \"./JobDetailedSidebar\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst JobDetails: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {loadJob, loadingInitialJob, job} = rootStore.jobStore;\r\n\r\n  useEffect(() => {\r\n    loadJob(match.params.id);\r\n  }, [loadJob, match.params.id, history]);\r\n\r\n  if (loadingInitialJob || !job)\r\n    return <LoadingComponent content=\"Loading job...\" />;\r\n\r\n  if (!job)\r\n  return <h2>Job not found</h2>\r\n\r\n  return (\r\n <Grid>\r\n   <Grid.Column width={10}>\r\n      <JobDetailedHeader job={job} />\r\n      <JobDetailedInfo job={job} />\r\n      <JobDetailedChat />\r\n   </Grid.Column>\r\n   <Grid.Column width={6}>\r\n      <JobDetailedSidebar\r\n        applicants={job.applied}\r\n      />\r\n   </Grid.Column>\r\n </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(JobDetails);\r\n","import React from \"react\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { IApplied } from \"../../../models/jobs\";\r\n\r\ninterface IProps {\r\n  applicants: IApplied[];\r\n}\r\n\r\nconst JobListItemAttendees: React.FC<IProps> = ({ applicants }) => {\r\n  return (\r\n    <List horizontal>\r\n      {applicants.map((applicant) => (\r\n        <List.Item key={applicant.username}>\r\n          <Popup\r\n            header={applicant.username}\r\n            trigger={\r\n              <Image\r\n                size=\"mini\"\r\n                circular\r\n                src={applicant.image || \"/assets/user.png\"}\r\n              />\r\n            }\r\n          />\r\n        </List.Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default JobListItemAttendees;\r\n","import React from \"react\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n// import JobStore from \"../../../../App/stores/jobStore\";\r\nimport { IJob } from \"../../../models/jobs\";\r\nimport {format} from 'date-fns'\r\nimport JobListItemAttendees from './JobListItemAttendees';\r\n// import { RootStore } from \"../../../stores/rootStore\";\r\n\r\nconst JobListItem: React.FC<{ job: IJob }> = ({ job }) => {\r\n  const host = job.applied.filter(x => x.isHost)[0];\r\n  return (\r\n    <Segment.Group>\r\n      <Segment>\r\n          <Item.Group>\r\n        <Item>\r\n          <Item.Image size=\"tiny\" circular src={host.image || \"/assets/user.png\"} />\r\n          <Item.Content>\r\n            <Item.Header as={Link} to={`/jobs/${job.id}`}>{job.title}</Item.Header>\r\n            <Item.Description>\r\n            Hosted By \r\n            <Link to={`/profile/${host.username}`}>\r\n            {host.displayName}\r\n            </Link>\r\n            </Item.Description>\r\n            {job.isHost &&\r\n            <Item.Description>\r\n              <Label \r\n                basic\r\n                color='orange'\r\n                content='You are hosting this job'\r\n              />\r\n            </Item.Description>\r\n              }\r\n                {job.applied && !job.isHost &&\r\n            <Item.Description>\r\n              <Label \r\n                basic\r\n                color='orange'\r\n                content='You are going to this job'\r\n              />\r\n            </Item.Description>\r\n              }\r\n          \r\n          </Item.Content>\r\n        </Item>\r\n\r\n          </Item.Group>\r\n      </Segment>\r\n      <Segment>\r\n          <Icon name='clock' /> {format(job.date, 'H:mm a')}\r\n          <Icon name='marker' /> , {job.city}\r\n      </Segment>\r\n      <Segment secondary>\r\n            <JobListItemAttendees\r\n              applicants={job.applied}\r\n            />\r\n      </Segment>\r\n      <Segment clearing>\r\n          <span>{job.description}</span>\r\n          <Button\r\n                as={Link}\r\n                to={`/jobs/${job.id}`}\r\n                floated=\"right\"\r\n                content=\"View\"\r\n                color=\"black\"\r\n              />\r\n      </Segment>\r\n    </Segment.Group>\r\n  );\r\n};\r\n\r\nexport default JobListItem;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment, useContext } from \"react\";\r\nimport { Item, Label } from \"semantic-ui-react\";\r\n// import JobStore from \"../../../../App/stores/jobStore\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nimport JobListItem from \"./JobListItem\";\r\nimport {format} from 'date-fns';\r\n\r\nconst JobList: React.FC = () => {\r\n  // const jobStore = useContext(JobStore);\r\n  // const { jobsByDate } = jobStore;\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {jobsByDate} = rootStore.jobStore;\r\n\r\n  return (\r\n    <Fragment>\r\n      {jobsByDate.map(([group, jobs]) => (\r\n        <Fragment key={group}>\r\n          <Label  size=\"large\" color=\"black\">\r\n            {format(new Date(group), 'eeee do MMMM')}\r\n          </Label>\r\n            <Item.Group divided>\r\n              {jobs.map((job) => (\r\n                <JobListItem key={job.id} job={job} />\r\n              ))}\r\n            </Item.Group>\r\n        </Fragment>\r\n      ))}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(JobList);\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\nconst JobListItemPlaceholder = () => {\r\n  return (\r\n    <Fragment>\r\n      <Placeholder fluid style={{ marginTop: 50 }}>\r\n        <Segment.Group>\r\n          <Segment style={{ minHeight: 110 }}>\r\n            <Placeholder>\r\n              <Placeholder.Header image>\r\n                <Placeholder.Line />\r\n                <Placeholder.Line />\r\n              </Placeholder.Header>\r\n              <Placeholder.Paragraph>\r\n                <Placeholder.Line />\r\n              </Placeholder.Paragraph>\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment>\r\n            <Placeholder>\r\n              <Placeholder.Line />\r\n              <Placeholder.Line />\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment secondary style={{ minHeight: 70 }} />\r\n          <Segment clearing>\r\n            <Button disabled color='black' floated='right' content='View' />\r\n          </Segment>\r\n        </Segment.Group>\r\n      </Placeholder>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default JobListItemPlaceholder;","import React, { Fragment, useContext } from 'react';\r\nimport { Menu, Header, Button } from 'semantic-ui-react';\r\n// import { Calendar } from 'react-widgets';\r\nimport { RootStoreContext } from '../../../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst JobFilters = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { predicateJob, setpredicateJob } = rootStore.jobStore;\r\n  return (\r\n    <Fragment>\r\n      <Menu vertical size={'large'} style={{ width: '100%', marginTop: 50 }}>\r\n        <Header icon={'filter'} attached color={'grey'} content={'Filters'} />\r\n        <Menu.Item\r\n          active={predicateJob.size === 0}\r\n          onClick={() => setpredicateJob('all', 'true')}\r\n          color={'black'}\r\n          name={'all'}\r\n          content={'All Jobs'}\r\n        />\r\n        <Menu.Item\r\n          active={predicateJob.has('isApplied')}\r\n          onClick={() => setpredicateJob('isApplied', 'true')}\r\n          color={'black'}\r\n          name={'username'}\r\n          content={\"Applied Jobs\"}\r\n        />\r\n        <Menu.Item\r\n          active={predicateJob.has('isHost')}\r\n          onClick={() => setpredicateJob('isHost', 'true')}\r\n          color={'black'}\r\n          name={'host'}\r\n          content={\"My Posted Jobs\"}\r\n        />\r\n      </Menu>\r\n      <Header\r\n    icon={'add'}\r\n    attached\r\n    color={'grey'}\r\n    content={'Create'}\r\n  />\r\n      <Button\r\n        as={NavLink}\r\n        to={\"/createJob\"}\r\n        positive\r\n        content=\"Create Job\"\r\n      />\r\n      {/* <Header\r\n        icon={'calendar'}\r\n        attached\r\n        color={'grey'}\r\n        content={'Select Date'}\r\n      />\r\n      <Calendar\r\n        onChange={date => setpredicateJob('startDate', date!)}\r\n        value={predicateJob.get('startDate') || new Date()}\r\n      /> */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(JobFilters);\r\n","// start typing rafc\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport JobList from \"./JobList\";\r\nimport { observer } from \"mobx-react-lite\";\r\n// import LoadingComponent from \"../../../Layout/LoadingComponent\";\r\nimport JobListItemPlaceholder from './JobListItemPlaceholder';\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport JobFilters from './JobFilters';\r\n\r\n\r\nconst JobDashboard: React.FC = () => {\r\n    // MOBX\r\n    // const jobStore = useContext(JobStore);\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n      loadJobs,\r\n      loadingInitialJob,\r\n      setpageJob,\r\n      pageJob,\r\n      totalpageJobs\r\n    } = rootStore.jobStore;\r\n    const [loadingNextJob, setLoadingNextJob] =useState(false);\r\n\r\n    const handleGetNext = () => {\r\n      setLoadingNextJob(true);\r\n      setpageJob(pageJob + 1);\r\n      loadJobs().then(() => setLoadingNextJob(false));\r\n    };\r\n\r\n    // LIFECYCLE\r\n    useEffect(() => {\r\n     loadJobs();\r\n    }, [loadJobs]);\r\n  \r\n    // if (loadingInitial)\r\n    //   return <LoadingComponent content=\"Loading jobs...\" />;\r\n  return (\r\n      <Grid>\r\n        <Grid.Column width={10}>\r\n          {loadingInitialJob && pageJob === 0 ? (\r\n            <JobListItemPlaceholder />\r\n          ) : (\r\n            <InfiniteScroll\r\n            pageStart={0}\r\n            loadMore={handleGetNext}\r\n            hasMore={!loadingNextJob && pageJob + 1 < totalpageJobs}\r\n            initialLoad={false}\r\n              >\r\n                <JobList />\r\n                {/* <h1>Hello</h1> */}\r\n              </InfiniteScroll>\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={6}>\r\n          <JobFilters />\r\n        </Grid.Column>\r\n        <Grid.Column width={10}>\r\n          <Loader active={loadingNextJob} />\r\n        </Grid.Column>\r\n      </Grid>\r\n  );\r\n};\r\nexport default observer(JobDashboard);\r\n","\r\nexport interface IExperiencesEnvelope {\r\n    experiences: IExperience[];\r\n    experienceCount: number;\r\n  }\r\n\r\nexport interface IExperience {\r\n    id: string;\r\n    title: string;\r\n    main: string;\r\n    main2: string;\r\n    category: string;\r\n    date: Date;\r\n    dateStarted: Date;\r\n    dateEnded: Date;\r\n    isHost: boolean;\r\n    isLiked: boolean;\r\n    liked: IAttendee[];\r\n    comments: IComment[];\r\n    link1: string;\r\n    link1Name: string;\r\n    link2: string;\r\n    link2Name: string;\r\n    skills: string;\r\n    image: string;\r\n}\r\n\r\nexport interface IComment {\r\n    id: string;\r\n    createdAt: Date;\r\n    body: string;\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n  }\r\n\r\nexport interface IExperienceFormValues extends Partial<IExperience> {\r\n    time?: Date;\r\n}\r\nexport class experienceFormValues implements IExperienceFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = \"\";\r\n    description: string = \"\";\r\n    date?: Date = undefined;\r\n    time?: Date = undefined;\r\n    city?: string = '';\r\n    image?: string = '';\r\n    main2?: string = '';\r\n    main?: string = '';\r\n    link1?: string = '';\r\n    link1Name?: string = '';\r\n    link2?: string = '';\r\n    link2Name?: string = '';\r\n    skills?: string = '';\r\n    dateEnded?: Date = undefined;\r\n    dateStarted?: Date = undefined;\r\n\r\n    constructor(init?: IExperienceFormValues) {\r\n        if (init && init.date){\r\n            init.time = init.date\r\n        }\r\n        Object.assign(this, init);\r\n    } \r\n}\r\n\r\nexport interface IAttendee {\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n    isHost: boolean;\r\n    following?: boolean;\r\n}","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, Form, Grid, Segment } from \"semantic-ui-react\";\r\nimport {experienceFormValues} from \"../../../models/experience\";\r\nimport { v4 as uuid } from \"uuid\";\r\n// import LoadingComponent from \"../../../../LoadingComponent\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport TextInput from \"../../../common/form/TextInput\";\r\nimport TextAreaInput from \"../../../common/form/TextAreaInput\";\r\nimport SelectInput from \"../../../common/form/SelectInput\";\r\nimport DateInput from \"../../../common/form/DateInput\";\r\n\r\nimport { category } from \"../../../common/options/categoryOptions\";\r\nimport { combineDateAndTime } from \"../../../common/util/util\";\r\nimport {combineValidators, isRequired, composeValidators, hasLengthGreaterThan} from 'revalidate';\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nconst validate = combineValidators({\r\n    title: isRequired({message: 'The event title is required'}),\r\n    category: isRequired('Category'),\r\n    description: composeValidators(\r\n      isRequired('Description'),\r\n      hasLengthGreaterThan(4)({message: 'Description nneds to be at least 5 charectors'})\r\n    )(),\r\n    city: isRequired('City'),\r\n    // venue: isRequired('Venue'),\r\n    date: isRequired('Date'),\r\n    time: isRequired('Time'),\r\n  })\r\n\r\n  interface DetailParams {\r\n    id: string;\r\n  }\r\n\r\n  const ExperienceForm: React.FC<RouteComponentProps<DetailParams>> = ({\r\n    match,\r\n    history,\r\n  }) => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n      createExperience,\r\n      editExperience,\r\n      submitting,\r\n      loadExperience,\r\n      deleteExperience\r\n    } = rootStore.experienceStore;\r\n  \r\n    const [experience, setExperience] = useState(new experienceFormValues());\r\n    const [loading, setLoading] = useState(false);\r\n    useEffect(() => {\r\n      if (match.params.id) {\r\n        setLoading(true);\r\n        loadExperience(match.params.id)\r\n          .then(experience => {\r\n            setExperience(new experienceFormValues(experience));\r\n          })\r\n          .finally(() => setLoading(false));\r\n      }\r\n    }, [loadExperience, match.params.id]);\r\n  \r\n    const handleFinalFormSubmit = (values: any) => {\r\n      const dateAndTime = combineDateAndTime(values.date, values.time);\r\n      const { date, time, ...experience } = values;\r\n      experience.date = dateAndTime;\r\n  \r\n      if (!experience.id) {\r\n        let newExperience = {\r\n          ...experience,\r\n          id: uuid(),\r\n        };\r\n        createExperience(newExperience);\r\n      } else {\r\n        editExperience(experience);\r\n      }\r\n    };\r\n  \r\n    return (\r\n      <Grid>\r\n        <Grid.Column width={10}>\r\n          <Segment clearing>\r\n            <FinalForm\r\n            validate={validate}\r\n              initialValues={experience}\r\n              onSubmit={handleFinalFormSubmit}\r\n              render={({ handleSubmit, invalid, pristine }) => (\r\n                <Form onSubmit={handleSubmit} loading={loading}>\r\n                  <Field\r\n                    name=\"title\"\r\n                    placeholder=\"Title\"\r\n                    value={experience.title}\r\n                    component={TextInput}\r\n                  />\r\n                  <Field\r\n                    name=\"description\"\r\n                    placeholder=\"Description\"\r\n                    value={experience.description}\r\n                    rows={3}\r\n                    component={TextAreaInput}\r\n                  />\r\n                    <Field\r\n                    name=\"main\"\r\n                    placeholder=\"Main\"\r\n                    value={experience.main}\r\n                    rows={3}\r\n                    component={TextAreaInput}\r\n                  />\r\n                     <Field\r\n                    name=\"main2\"\r\n                    placeholder=\"Main2\"\r\n                    value={experience.main2}\r\n                    rows={3}\r\n                    component={TextAreaInput}\r\n                  />\r\n                     <Field\r\n                    name=\"skills\"\r\n                    placeholder=\"Skills\"\r\n                    value={experience.skills}\r\n                    rows={3}\r\n                    component={TextAreaInput}\r\n                  />\r\n                  \r\n                  <Field\r\n                    name=\"category\"\r\n                    placeholder=\"Category\"\r\n                    options={category}\r\n                    value={experience.category}\r\n                    component={SelectInput}\r\n                  />\r\n                  <Form.Group width=\"equal\">\r\n                    <Field\r\n                      name=\"date\"\r\n                      placeholder=\"Date\"\r\n                      value={experience.date}\r\n                      component={DateInput}\r\n                      date={true}\r\n                    />\r\n                    <Field\r\n                      name=\"time\"\r\n                      placeholder=\"Time\"\r\n                      value={experience.time}\r\n                      component={DateInput}\r\n                      time={true}\r\n                    />\r\n                  </Form.Group>\r\n                  <Form.Group width=\"equal\">\r\n                  <Field\r\n                    name=\"link1\"\r\n                    placeholder=\"Link1\"\r\n                    value={experience.link1}\r\n                    component={TextInput}\r\n                  />\r\n                   <Field\r\n                    name=\"link1Name\"\r\n                    placeholder=\"Link1Name\"\r\n                    value={experience.link1Name}\r\n                    component={TextInput}\r\n                  />\r\n                  </Form.Group>\r\n                  <Form.Group width=\"equal\">\r\n                  <Field\r\n                    name=\"link2\"\r\n                    placeholder=\"Link2\"\r\n                    value={experience.link2}\r\n                    component={TextInput}\r\n                  />\r\n                   <Field\r\n                    name=\"link2Name\"\r\n                    placeholder=\"Link2Name\"\r\n                    value={experience.link2Name}\r\n                    component={TextInput}\r\n                  />\r\n                  </Form.Group>\r\n                  <Form.Group width=\"equal\">\r\n                  <Field\r\n                      name=\"dateStarted\"\r\n                      placeholder=\"DateStarted\"\r\n                      value={experience.dateStarted}\r\n                      component={DateInput}\r\n                      date={true}\r\n                    />\r\n                     <Field\r\n                      name=\"dateEnded\"\r\n                      placeholder=\"DateEnded\"\r\n                      value={experience.dateEnded}\r\n                      component={DateInput}\r\n                      date={true}\r\n                    />\r\n                    </Form.Group>\r\n\r\n\r\n\r\n                  <Field\r\n                    name=\"city\"\r\n                    component={TextInput}\r\n                    placeholder=\"City\"\r\n                    value={experience.city}\r\n                  />\r\n                  <Field\r\n                    name=\"image\"\r\n                    placeholder=\"Image\"\r\n                    value={experience.image}\r\n                    component={TextInput}\r\n                  />\r\n                  <Button\r\n                    loading={submitting}\r\n                    disabled={loading || invalid || pristine}\r\n                    floated=\"right\"\r\n                    positive\r\n                    type=\"submit\"\r\n                    content=\"Submit\"\r\n                  />\r\n                  <Button\r\n                    onClick={experience.id ? () => history.push(`/experiences/${experience.id}`) : () => history.push(\"/experiences\")}\r\n                    disabled={loading}\r\n                    floated=\"right\"\r\n                    type=\"button\"\r\n                    content=\"Cancel\"\r\n                  />\r\n                      {experience.id && \r\n                <Button\r\n                 onClick={(e)=>deleteExperience(e,experience.id!).then(()=> history.push('/experiences'))}\r\n                 \r\n                 disabled={loading}\r\n                 floated=\"right\"\r\n                 type=\"button\"\r\n                 content=\"Delete\"\r\n                />\r\n                }\r\n                </Form>\r\n              )}\r\n            />\r\n          </Segment>\r\n        </Grid.Column>\r\n      </Grid>\r\n    );\r\n  };\r\n  \r\n  export default observer(ExperienceForm);","export interface IPostsEnvelope {\r\n    posts: IPost[];\r\n    postCount: number;\r\n  }\r\n\r\nexport interface IPost {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    image: string;\r\n    main2: string;\r\n    main: string;\r\n    category: string;\r\n    date: Date;\r\n    isHost: boolean;\r\n    isLiked: boolean;\r\n    liked: ILikedPost[];\r\n    postComments: IComment[];\r\n}\r\n\r\nexport interface IComment {\r\n    id: string;\r\n    createdAt: Date;\r\n    body: string;\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n  }\r\n\r\nexport interface IPostFormValues extends Partial<IPost> {\r\n    time?: Date;\r\n}\r\nexport class PostFormValues implements IPostFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = \"\";\r\n    description: string = \"\";\r\n    date?: Date = undefined;\r\n    time?: Date = undefined;\r\n    main?: string = '';\r\n    main2?: string = '';\r\n    image?: string = '';\r\n    link?: string = '';\r\n\r\n\r\n    constructor(init?: IPostFormValues) {\r\n        if (init && init.date){\r\n            init.time = init.date\r\n        }\r\n        Object.assign(this, init);\r\n    } \r\n}\r\n\r\nexport interface ILikedPost {\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n    isHost: boolean;\r\n    following?: boolean;\r\n}","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, Form, Grid, Segment } from \"semantic-ui-react\";\r\nimport { PostFormValues } from \"../../../models/post\";\r\nimport { v4 as uuid } from \"uuid\";\r\n// import LoadingComponent from \"../../../../LoadingComponent\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport TextInput from \"../../../common/form/TextInput\";\r\nimport TextAreaInput from \"../../../common/form/TextAreaInput\";\r\nimport SelectInput from \"../../../common/form/SelectInput\";\r\nimport DateInput from \"../../../common/form/DateInput\";\r\n\r\nimport { categoryPrograms } from \"../../../common/options/categoryOptions\";\r\nimport { combineDateAndTime } from \"../../../common/util/util\";\r\nimport {combineValidators, isRequired, composeValidators, hasLengthGreaterThan} from 'revalidate';\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\n\r\nconst validate = combineValidators({\r\n  title: isRequired({message: 'The event title is required'}),\r\n  category: isRequired('Category'),\r\n  description: composeValidators(\r\n    isRequired('Description'),\r\n    hasLengthGreaterThan(4)({message: 'Description nneds to be at least 5 charectors'})\r\n  )(),\r\n  // city: isRequired('City'),\r\n  // venue: isRequired('Venue'),\r\n  date: isRequired('Date'),\r\n  time: isRequired('Time'),\r\n})\r\n\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst PostForm: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    createProgram,\r\n    editpost,\r\n    submittingPost,\r\n    loadpost,\r\n    deletepost\r\n  } = rootStore.postStore;\r\n\r\n  const [post, setpost] = useState(new PostFormValues());\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n    if (match.params.id) {\r\n      setLoading(true);\r\n      loadpost(match.params.id)\r\n        .then(post => {\r\n          setpost(new PostFormValues(post));\r\n        })\r\n        .finally(() => setLoading(false));\r\n    }\r\n  }, [loadpost, match.params.id]);\r\n\r\n  const handleFinalFormSubmit = (values: any) => {\r\n    const dateAndTime = combineDateAndTime(values.date, values.time);\r\n    // const dateAndTime = combineDateAndTime( new Date(Date.now()),new Date(Date.now()));\r\n    const { date, time, ...post } = values;\r\n    post.date = dateAndTime;\r\n    // const {...post} =values;\r\n    // post.date = new Date(Date.now());\r\n\r\n    if (!post.id) {\r\n      let newpost = {\r\n        ...post,\r\n        id: uuid(),\r\n      };\r\n      createProgram(newpost);\r\n    } else {\r\n      editpost(post);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <Segment clearing>\r\n          <FinalForm\r\n          validate={validate}\r\n            initialValues={post}\r\n            onSubmit={handleFinalFormSubmit}\r\n            render={({ handleSubmit, invalid, pristine }) => (\r\n              <Form onSubmit={handleSubmit} loading={loading}>\r\n                <Field\r\n                  name=\"title\"\r\n                  placeholder=\"Title\"\r\n                  value={post.title}\r\n                  component={TextInput}\r\n                />\r\n                <Field\r\n                  name=\"description\"\r\n                  placeholder=\"Description\"\r\n                  value={post.description}\r\n                  rows={3}\r\n                  component={TextAreaInput}\r\n                />\r\n                <Field\r\n                  name=\"main\"\r\n                  placeholder=\"Main\"\r\n                  value={post.main}\r\n                  rows={3}\r\n                  component={TextAreaInput}\r\n                />\r\n                   <Field\r\n                  name=\"main2\"\r\n                  placeholder=\"Main2\"\r\n                  value={post.main2}\r\n                  rows={3}\r\n                  component={TextAreaInput}\r\n                />\r\n                <Field\r\n                  name=\"category\"\r\n                  placeholder=\"Category\"\r\n                  options={categoryPrograms}\r\n                  value={post.category}\r\n                  component={SelectInput}\r\n                />\r\n                    <Field\r\n                    name=\"image\"\r\n                    placeholder=\"Image\"\r\n                    value={post.image}\r\n                    component={TextInput}\r\n                  />\r\n                     <Field\r\n                    name=\"link\"\r\n                    placeholder=\"Link\"\r\n                    value={post.link}\r\n                    component={TextInput}\r\n                  />\r\n                <Form.Group width=\"equal\">\r\n                  <Field\r\n                    name=\"date\"\r\n                    placeholder=\"Date\"\r\n                    value={post.time}\r\n                    component={DateInput}\r\n                    date={true}\r\n                  />\r\n                  <Field\r\n                    name=\"time\"\r\n                    placeholder=\"Time\"\r\n                    value={post.time}\r\n                    component={DateInput}\r\n                    time={true}\r\n                  />\r\n                </Form.Group>\r\n                {/* <Field\r\n                  name=\"city\"\r\n                  component={TextInput}\r\n                  placeholder=\"City\"\r\n                  value={post.city}\r\n                /> */}\r\n                {/* <Field\r\n                  name=\"venue\"\r\n                  placeholder=\"Venue\"\r\n                  value={post.venue}\r\n                  component={TextInput}\r\n                /> */}\r\n                <Button\r\n                  loading={submittingPost}\r\n                  disabled={loading || invalid || pristine}\r\n                  floated=\"right\"\r\n                  positive\r\n                  type=\"submit\"\r\n                  content=\"Submit\"\r\n                />\r\n                <Button\r\n                  onClick={post.id ? () => history.push(`/programs/${post.id}`) : () => history.push(\"/programs\")}\r\n                  disabled={loading}\r\n                  floated=\"right\"\r\n                  type=\"button\"\r\n                  content=\"Cancel\"\r\n                />\r\n                    {post.id && \r\n                <Button\r\n                 onClick={(e)=>deletepost(e,post.id!).then(()=> history.push('/posts'))}\r\n                 \r\n                 disabled={loading}\r\n                 floated=\"right\"\r\n                 type=\"button\"\r\n                 content=\"Delete\"\r\n                />\r\n                }\r\n              </Form>\r\n            )}\r\n          />\r\n        </Segment>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(PostForm);\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image } from 'semantic-ui-react'\r\nimport { IPost } from '../../../models/post';\r\nimport {format} from 'date-fns';\r\nimport { RootStoreContext } from '../../../stores/rootStore';\r\n\r\nconst PostImageStyle = {\r\n  filter: 'brightness(30%)'\r\n};\r\n\r\nconst PostImageTextStyle = {\r\n  position: 'absolute',\r\n  bottom: '5%',\r\n  left: '5%',\r\n  width: '100%',\r\n  height: 'auto',\r\n  color: 'white'\r\n};\r\n\r\nconst PostDetailedHeader: React.FC<{post: IPost}> = ({post}) => {\r\n  const host = post.liked.filter(x => x.isHost)[0];\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { likePost, unlikePost, loadingPost } = rootStore.postStore;\r\n    return (\r\n        <Segment.Group>\r\n          <Segment basic attached='top' style={{ padding: '0' }}>\r\n            <Image src={`/assets/categoryImages/${post.category}.jpg`} fluid style={PostImageStyle}/>\r\n            <Segment basic style={PostImageTextStyle}>\r\n              <Item.Group>\r\n                <Item>\r\n                  <Item.Content>\r\n                    <Header\r\n                      size='huge'\r\n                      content={post.title}\r\n                      style={{ color: 'white' }}\r\n                    />\r\n                    <p>{format(new Date(post.date), 'eeee do MMMM')}</p>\r\n                    <p>\r\n                    Hosted by {' '}\r\n                    <Link to={`/profile/${host.username}`}>\r\n                      <strong>{host.displayName}</strong>\r\n                    </Link>\r\n                    </p>\r\n                  </Item.Content>\r\n                </Item>\r\n              </Item.Group>\r\n            </Segment>\r\n          </Segment>\r\n          <Segment clearing attached='bottom'>\r\n            {post.isHost ? (\r\n              <Button as={Link} to={`/program/manage/${post.id}`} color='orange' floated='right'>\r\n              Manage Event\r\n            </Button>\r\n              ) : post.isLiked ? (\r\n                <Button loading={loadingPost} onClick={unlikePost}>Cancel attendance</Button>\r\n                ) : (\r\n                <Button loading={loadingPost} onClick={likePost} color='grey'>Join post</Button>\r\n              )}\r\n          </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default observer(PostDetailedHeader);\r\n","import React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { IPost } from '../../../models/post'\r\nimport {format} from 'date-fns'\r\n\r\n\r\nconst PostDetailedInfo: React.FC<{post: IPost}> = ({post}) => {\r\n    return (\r\n        <div>\r\n            <Segment.Group>\r\n                  <Segment attached='top'>\r\n                    <Grid>\r\n                      <Grid.Column width={1}>\r\n                        <Icon size='large' color='grey' name='info' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={15}>\r\n                        <p>{post.description}</p>\r\n                        <p>{post.main}</p>\r\n                        \r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                  <Segment attached>\r\n                    <Grid verticalAlign='middle'>\r\n                      <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='grey' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={15}>\r\n                        <span>\r\n                          {format(new Date(post.date), 'eeee do MMMM')} at {format(new Date(post.date), 'h:mm a')}\r\n                        </span>\r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                  <Segment attached>\r\n                    <Grid verticalAlign='middle'>\r\n                      <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='grey' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={11}>\r\n                        <span>{post.main2}</span>\r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                </Segment.Group>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostDetailedInfo\r\n","import React, { Fragment, useContext, useEffect } from \"react\";\r\nimport { Segment, Header, Form, Button, Comment } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport { Link } from \"react-router-dom\";\r\nimport TextAreaInput from \"../../../common/form/TextAreaInput\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { formatDistance } from \"date-fns\";\r\n\r\nconst PostDetailedChat = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    createHubConnectionPost,\r\n    stopHubConnectionPost,\r\n    addCommentPost,\r\n    post,\r\n  } = rootStore.postStore;\r\n\r\n  useEffect(() => {\r\n    createHubConnectionPost(post!.id);\r\n    return () => {\r\n      stopHubConnectionPost();\r\n    };\r\n  }, [createHubConnectionPost, stopHubConnectionPost, post]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        textAlign=\"center\"\r\n        attached=\"top\"\r\n        inverted\r\n        color=\"grey\"\r\n        style={{ border: \"none\" }}\r\n      >\r\n        <Header>Chat about this event</Header>\r\n      </Segment>\r\n      <Segment attached>\r\n        <Comment.Group>\r\n          {post &&\r\n            post.postComments &&\r\n            post.postComments.map((comment) => (\r\n              <Comment key={comment.id}>\r\n                <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\r\n                <Comment.Content>\r\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\r\n                    {comment.displayName}\r\n                  </Comment.Author>\r\n                  <Comment.Metadata>\r\n                    <div>\r\n                      {formatDistance(new Date(comment.createdAt), new Date())}\r\n                    </div>\r\n                  </Comment.Metadata>\r\n                  <Comment.Text>{comment.body}</Comment.Text>\r\n                </Comment.Content>\r\n              </Comment>\r\n            ))}\r\n\r\n          <FinalForm\r\n            onSubmit={addCommentPost}\r\n            render={({ handleSubmit, submitting, form }) => (\r\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\r\n                <Field\r\n                  name=\"body\"\r\n                  component={TextAreaInput}\r\n                  rows={2}\r\n                  placeholder=\"Add your comment\"\r\n                />\r\n                <Button\r\n                  loading={submitting}\r\n                  content=\"Add Reply\"\r\n                  labelPosition=\"left\"\r\n                  icon=\"edit\"\r\n                  primary\r\n                />\r\n              </Form>\r\n            )}\r\n          />\r\n        </Comment.Group>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(PostDetailedChat);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Segment, List, Item, Label, Image } from \"semantic-ui-react\";\r\nimport { ILikedPost } from \"../../../models/post\";\r\n\r\ninterface IProps {\r\n  attendees: ILikedPost[];\r\n}\r\n\r\nconst PostDetailedSidebar: React.FC<IProps> = ({ attendees }) => {\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        textAlign=\"center\"\r\n        style={{ border: \"none\" }}\r\n        attached=\"top\"\r\n        secondary\r\n        inverted\r\n        color=\"grey\"\r\n      >\r\n        {attendees.length} {attendees.length === 1 ? \"Person\" : \"People\"} Going\r\n      </Segment>\r\n      <Segment attached>\r\n        <List relaxed divided>\r\n          {attendees.map((attendee) => (\r\n            <Item key={attendee.username} style={{ position: \"relative\" }}>\r\n              {attendee.isHost && (\r\n                <Label\r\n                  style={{ position: \"absolute\" }}\r\n                  color=\"orange\"\r\n                  ribbon=\"right\"\r\n                >\r\n                  Host\r\n                </Label>\r\n              )}\r\n              <Image size=\"tiny\" src={attendee.image || \"/assets/user.png\"} />\r\n              <Item.Content verticalAlign=\"middle\">\r\n                <Item.Header as=\"h3\">\r\n                  <Link to={`/profile/${attendee.username}`}>{attendee.displayName}</Link>\r\n                </Item.Header>\r\n                <Item.Extra style={{ color: \"orange\" }}>Following</Item.Extra>\r\n              </Item.Content>\r\n            </Item>\r\n          ))}\r\n\r\n        </List>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(PostDetailedSidebar);\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Grid} from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport LoadingComponent from \"../../../Layout/LoadingComponent\";\r\nimport PostDetailedHeader from \"./PostDetailedHeader\";\r\nimport PostDetailedInfo from \"./PostDetailedInfo\";\r\nimport PostDetailedChat from \"./PostDetailedChat\";\r\nimport PostDetailedSidebar from \"./PostDetailedSidebar\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst PostDetails: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {loadpost, loadingInitialPost, post} = rootStore.postStore;\r\n  const [ initialLoad, setInitialLoad] = useState(true);\r\n  useEffect(() => {\r\n    loadpost(match.params.id).then(()=>setInitialLoad(false));\r\n  }, [loadpost, match.params.id, history]);\r\n\r\n  if (loadingInitialPost || !post || initialLoad)\r\n    return <LoadingComponent content=\"Loading post...\" />;\r\n\r\n  if (!post)\r\n  return <h2>post not found</h2>\r\n\r\n  return (\r\n <Grid>\r\n   <Grid.Column width={10}>\r\n      <PostDetailedHeader post={post} />\r\n      <PostDetailedInfo post={post} />\r\n      {!initialLoad && <PostDetailedChat />}\r\n   </Grid.Column>\r\n   <Grid.Column width={6}>\r\n      <PostDetailedSidebar\r\n        attendees={post.liked}\r\n      />\r\n   </Grid.Column>\r\n </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(PostDetails);\r\n","import React from \"react\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { ILikedPost } from \"../../../models/post\";\r\n\r\ninterface IProps {\r\n  peopleWhoLiked: ILikedPost[];\r\n}\r\n\r\nconst PostListItemAttendees: React.FC<IProps> = ({ peopleWhoLiked }) => {\r\n  return (\r\n    <List horizontal>\r\n      {peopleWhoLiked.map((attendee) => (\r\n        <List.Item key={attendee.username}>\r\n          <Popup\r\n            header={attendee.username}\r\n            trigger={\r\n              <Image\r\n                size=\"mini\"\r\n                circular\r\n                src={attendee.image || \"/assets/user.png\"}\r\n              />\r\n            }\r\n          />\r\n        </List.Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default PostListItemAttendees;\r\n","import React from \"react\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n// import poststore from \"../../../../App/stores/poststore\";\r\nimport { IPost } from \"../../../models/post\";\r\nimport {format} from 'date-fns'\r\nimport PostListItemAttendees from './PostListItemAttendees';\r\n// import { RootStore } from \"../../../stores/rootStore\";\r\n\r\nconst PostListItem: React.FC<{ post: IPost }> = ({ post }) => {\r\n  const host = post.liked.filter(x => x.isHost)[0];\r\n  return (\r\n    <Segment.Group>\r\n      <Segment>\r\n          <Item.Group>\r\n        <Item>\r\n          <Item.Image size=\"tiny\" circular src={host.image || \"/assets/user.png\"} />\r\n          <Item.Content>\r\n            <Item.Header as={Link} to={`/programs/${post.id}`}>{post.title}</Item.Header>\r\n            <Item.Description>\r\n            Hosted By \r\n            <Link to={`/profile/${host.username}`}>\r\n            {host.displayName}\r\n            </Link>\r\n            </Item.Description>\r\n            {post.isHost &&\r\n            <Item.Description>\r\n              <Label \r\n                basic\r\n                color='orange'\r\n                content='You are hosting this post'\r\n              />\r\n            </Item.Description>\r\n              }\r\n                {post.liked && !post.isHost &&\r\n            <Item.Description>\r\n              <Label \r\n                basic\r\n                color='orange'\r\n                content='You liked this post'\r\n              />\r\n            </Item.Description>\r\n              }\r\n          \r\n          </Item.Content>\r\n        </Item>\r\n\r\n          </Item.Group>\r\n      </Segment>\r\n      <Segment>\r\n          <Icon name='clock' /> {format(new Date(post.date), 'H:mm a')}\r\n          {/* <Icon name='marker' /> {post.venue}, {post.city} */}\r\n      </Segment>\r\n      <Segment secondary>\r\n            <PostListItemAttendees\r\n              peopleWhoLiked={post.liked}\r\n            />\r\n      </Segment>\r\n      <Segment clearing>\r\n          <span>{post.description}</span>\r\n          <Button\r\n                as={Link}\r\n                to={`/programs/${post.id}`}\r\n                floated=\"right\"\r\n                content=\"View\"\r\n                color=\"black\"\r\n              />\r\n      </Segment>\r\n    </Segment.Group>\r\n  );\r\n};\r\n\r\nexport default PostListItem;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment, useContext } from \"react\";\r\nimport { Item, Label } from \"semantic-ui-react\";\r\n// import poststore from \"../../../../App/stores/poststore\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nimport PostListItem from \"./PostListItem\";\r\nimport {format} from 'date-fns';\r\n\r\nconst PostList: React.FC = () => {\r\n  // const poststore = useContext(poststore);\r\n  // const { postsByDate } = poststore;\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {PostsByDate} = rootStore.postStore;\r\n\r\n  return (\r\n    <Fragment>\r\n      {PostsByDate.map(([group, posts]) => (\r\n        <Fragment key={group}>\r\n          <Label  size=\"large\" color=\"black\">\r\n            {format(new Date(group), 'eeee do MMMM')}\r\n          </Label>\r\n            <Item.Group divided>\r\n              {posts.map((post) => (\r\n                <PostListItem key={post.id} post={post} />\r\n              ))}\r\n            </Item.Group>\r\n        </Fragment>\r\n      ))}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(PostList);\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\nconst PostListItemPlaceholder = () => {\r\n  return (\r\n    <Fragment>\r\n      <Placeholder fluid style={{ marginTop: 50 }}>\r\n        <Segment.Group>\r\n          <Segment style={{ minHeight: 110 }}>\r\n            <Placeholder>\r\n              <Placeholder.Header image>\r\n                <Placeholder.Line />\r\n                <Placeholder.Line />\r\n              </Placeholder.Header>\r\n              <Placeholder.Paragraph>\r\n                <Placeholder.Line />\r\n              </Placeholder.Paragraph>\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment>\r\n            <Placeholder>\r\n              <Placeholder.Line />\r\n              <Placeholder.Line />\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment secondary style={{ minHeight: 70 }} />\r\n          <Segment clearing>\r\n            <Button disabled color='black' floated='right' content='View' />\r\n          </Segment>\r\n        </Segment.Group>\r\n      </Placeholder>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default PostListItemPlaceholder;","import React, { Fragment, useContext} from 'react';\r\nimport { Menu, Header, Button } from 'semantic-ui-react';\r\n// import { Calendar } from 'react-widgets';\r\nimport { RootStoreContext } from '../../../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {categoryPrograms} from '../../../common/options/categoryOptions';\r\n// import ProgramCard from '../details/ProgramCard';\r\n\r\nconst PostFilters = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { predicatePost, setPredicatePost } = rootStore.postStore;\r\n  // const [myCategory, setMyCategory] = useState('');\r\n  return (\r\n    <Fragment>\r\n      <Menu vertical size={'large'} style={{ width: '100%', marginTop: 50 }}>\r\n        <Header icon={'filter'} attached color={'grey'} content={'Filters'} />\r\n        <Menu.Item\r\n          active={predicatePost.size === 0}\r\n          onClick={() => setPredicatePost('all', 'true')}\r\n          color={'black'}\r\n          name={'all'}\r\n          content={'All posts'}\r\n        />\r\n        <Menu.Item\r\n          active={predicatePost.has('isLiked')}\r\n          onClick={() => setPredicatePost('isLiked', 'true')}\r\n          color={'black'}\r\n          name={'username'}\r\n          content={\"My Liked Posts\"}\r\n        />\r\n        <Menu.Item\r\n          active={predicatePost.has('isHost')}\r\n          onClick={() => setPredicatePost('isHost', 'true')}\r\n          color={'black'}\r\n          name={'host'}\r\n          content={\"My Posts\"}\r\n        />\r\n      </Menu>\r\n\r\n{/* add categoryPrograms in card here as filter */}\r\n\r\n<Menu vertical size={'large'} style={{ width: '100%', marginTop: 50 }}>\r\n        <Header icon={'filter'} attached color={'grey'} content={'Programs'} />\r\n        {categoryPrograms.map((cat => (\r\n\r\n          <Menu.Item\r\n          key={cat.key}\r\n          active={predicatePost.has('myCat')}\r\n          onClick={() => setPredicatePost('myCat', cat.value)}          color={'black'}\r\n          name={cat.text}\r\n          content={cat.text}\r\n          // add donate link\r\n          />\r\n          )))}\r\n        </Menu>\r\n\r\n<Header\r\nicon={'add'}\r\nattached\r\ncolor={'grey'}\r\ncontent={'Create'}\r\n/>\r\n      <Button\r\n        as={NavLink}\r\n        to={\"/createProgram\"}\r\n        positive\r\n        content=\"Create Post\"\r\n      />\r\n\r\n      {/* <Header\r\n        icon={'calendar'}\r\n        attached\r\n        color={'grey'}\r\n        content={'Select Date'}\r\n      />\r\n      <Calendar\r\n        onChange={date => setPredicatePost('startDate', date!)}\r\n        value={predicatePost.get('startDate') || new Date()}\r\n      /> */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(PostFilters);\r\n","// start typing rafc\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport PostList from \"./PostList\";\r\nimport { observer } from \"mobx-react-lite\";\r\n// import LoadingComponent from \"../../../Layout/LoadingComponent\";\r\nimport PostListItemPlaceholder from './PostListItemPlaceholder';\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport PostFilters from './PostFilters';\r\n\r\n\r\nconst PostDashboard: React.FC = () => {\r\n    // MOBX\r\n    // const poststore = useContext(poststore);\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n      loadPosts,\r\n      loadingInitialPost,\r\n      setPagePost,\r\n      pagePost,\r\n      totalPagesPost\r\n    } = rootStore.postStore;\r\n    const [loadingNextpost, setLoadingNextpost] =useState(false);\r\n\r\n    const handleGetNext = () => {\r\n      setLoadingNextpost(true);\r\n      setPagePost(pagePost + 1);\r\n      loadPosts().then(() => setLoadingNextpost(false));\r\n    };\r\n\r\n    // LIFECYCLE\r\n    useEffect(() => {\r\n     loadPosts();\r\n    }, [loadPosts]);\r\n  \r\n    // if (loadingInitial)\r\n    //   return <LoadingComponent content=\"Loading posts...\" />;\r\n  return (\r\n      <Grid>\r\n        <Grid.Column width={10}>\r\n          {loadingInitialPost && pagePost === 0 ? (\r\n            <PostListItemPlaceholder />\r\n          ) : (\r\n            <InfiniteScroll\r\n            pageStart={0}\r\n            loadMore={handleGetNext}\r\n            hasMore={!loadingNextpost && pagePost + 1 < totalPagesPost}\r\n            initialLoad={false}\r\n              >\r\n                <PostList />\r\n              </InfiniteScroll>\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={6}>\r\n          <PostFilters />\r\n        </Grid.Column>\r\n        <Grid.Column width={10}>\r\n          <Loader active={loadingNextpost} />\r\n        </Grid.Column>\r\n      </Grid>\r\n  );\r\n};\r\nexport default observer(PostDashboard);\r\n","export interface IProductsEnvelope {\r\n    products: IProduct[];\r\n    productCount: number;\r\n  }\r\n\r\nexport interface IProduct {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    stock: Number;\r\n    madeBy: string;\r\n    image: string;\r\n    link: string;\r\n    category: string;\r\n    date: Date;\r\n    isHost: boolean;\r\n    isLiked: boolean;\r\n    liked: ILikedProduct[];\r\n    productComments: IComment[];\r\n}\r\n\r\nexport interface IComment {\r\n    id: string;\r\n    createdAt: Date;\r\n    body: string;\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n  }\r\n\r\nexport interface IProductFormValues extends Partial<IProduct> {\r\n    time?: Date;\r\n}\r\nexport class ProductFormValues implements IProductFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = \"\";\r\n    description: string = \"\";\r\n    date?: Date = undefined;\r\n    time?: Date = undefined;\r\n\r\n    constructor(init?: IProductFormValues) {\r\n        if (init && init.date){\r\n            init.time = init.date\r\n        }\r\n        Object.assign(this, init);\r\n    } \r\n}\r\n\r\nexport interface ILikedProduct {\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n    isHost: boolean;\r\n    following?: boolean;\r\n}","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, Form, Grid, Segment } from \"semantic-ui-react\";\r\nimport {ProductFormValues} from \"../../../models/product\";\r\nimport { v4 as uuid } from \"uuid\";\r\n// import LoadingComponent from \"../../../../LoadingComponent\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport TextInput from \"../../../common/form/TextInput\";\r\nimport TextAreaInput from \"../../../common/form/TextAreaInput\";\r\nimport SelectInput from \"../../../common/form/SelectInput\";\r\nimport DateInput from \"../../../common/form/DateInput\";\r\n\r\nimport { category } from \"../../../common/options/categoryOptions\";\r\nimport { combineDateAndTime } from \"../../../common/util/util\";\r\nimport {combineValidators, isRequired, composeValidators, hasLengthGreaterThan} from 'revalidate';\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\n\r\nconst validate = combineValidators({\r\n  title: isRequired({message: 'The event title is required'}),\r\n  category: isRequired('Category'),\r\n  description: composeValidators(\r\n    isRequired('Description'),\r\n    hasLengthGreaterThan(4)({message: 'Description nneds to be at least 5 charectors'})\r\n  )(),\r\n  city: isRequired('City'),\r\n  venue: isRequired('Venue'),\r\n  date: isRequired('Date'),\r\n  time: isRequired('Time'),\r\n})\r\n\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst ProductForm: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    createproduct,\r\n    editproduct,\r\n    submittingProduct,\r\n    loadproduct,\r\n    deleteproduct\r\n  } = rootStore.productStore;\r\n\r\n  const [product, setproduct] = useState(new ProductFormValues());\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n    if (match.params.id) {\r\n      setLoading(true);\r\n      loadproduct(match.params.id)\r\n        .then(product => {\r\n          setproduct(new ProductFormValues(product));\r\n        })\r\n        .finally(() => setLoading(false));\r\n    }\r\n  }, [loadproduct, match.params.id]);\r\n\r\n  const handleFinalFormSubmit = (values: any) => {\r\n    const dateAndTime = combineDateAndTime(values.date, values.time);\r\n    // const dateAndTime = combineDateAndTime( new Date(Date.now()),new Date(Date.now()));\r\n    const { date, time, ...product } = values;\r\n    product.date = dateAndTime;\r\n\r\n    if (!product.id) {\r\n      let newproduct = {\r\n        ...product,\r\n        id: uuid(),\r\n      };\r\n      createproduct(newproduct);\r\n    } else {\r\n      editproduct(product);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <Segment clearing>\r\n          <FinalForm\r\n          validate={validate}\r\n            initialValues={product}\r\n            onSubmit={handleFinalFormSubmit}\r\n            render={({ handleSubmit, invalid, pristine }) => (\r\n              <Form onSubmit={handleSubmit} loading={loading}>\r\n                <Field\r\n                  name=\"title\"\r\n                  placeholder=\"Title\"\r\n                  value={product.title}\r\n                  component={TextInput}\r\n                />\r\n                <Field\r\n                  name=\"description\"\r\n                  placeholder=\"Description\"\r\n                  value={product.description}\r\n                  rows={3}\r\n                  component={TextAreaInput}\r\n                />\r\n                <Field\r\n                  name=\"category\"\r\n                  placeholder=\"Category\"\r\n                  options={category}\r\n                  value={product.category}\r\n                  component={SelectInput}\r\n                />\r\n                <Form.Group width=\"equal\">\r\n                  <Field\r\n                    name=\"date\"\r\n                    placeholder=\"Date\"\r\n                    value={product.time}\r\n                    component={DateInput}\r\n                    date={true}\r\n                  />\r\n                  <Field\r\n                    name=\"time\"\r\n                    placeholder=\"Time\"\r\n                    value={product.time}\r\n                    component={DateInput}\r\n                    time={true}\r\n                  />\r\n                </Form.Group>\r\n                {/* <Field\r\n                  name=\"city\"\r\n                  component={TextInput}\r\n                  placeholder=\"City\"\r\n                  value={product.city}\r\n                /> */}\r\n                {/* <Field\r\n                  name=\"venue\"\r\n                  placeholder=\"Venue\"\r\n                  value={product.venue}\r\n                  component={TextInput}\r\n                /> */}\r\n                <Button\r\n                  loading={submittingProduct}\r\n                  disabled={loading || invalid || pristine}\r\n                  floated=\"right\"\r\n                  positive\r\n                  type=\"submit\"\r\n                  content=\"Submit\"\r\n                />\r\n                <Button\r\n                  onClick={product.id ? () => history.push(`/products/${product.id}`) : () => history.push(\"/products\")}\r\n                  disabled={loading}\r\n                  floated=\"right\"\r\n                  type=\"button\"\r\n                  content=\"Cancel\"\r\n                />\r\n                    {product.id && \r\n                <Button\r\n                 onClick={(e)=>deleteproduct(e,product.id!).then(()=> history.push('/products'))}\r\n                 \r\n                 disabled={loading}\r\n                 floated=\"right\"\r\n                 type=\"button\"\r\n                 content=\"Delete\"\r\n                />\r\n                }\r\n              </Form>\r\n            )}\r\n          />\r\n        </Segment>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ProductForm);\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image } from 'semantic-ui-react'\r\nimport { IProduct } from '../../../models/product';\r\nimport {format} from 'date-fns';\r\nimport { RootStoreContext } from '../../../stores/rootStore';\r\n\r\nconst productImageStyle = {\r\n  filter: 'brightness(30%)'\r\n};\r\n\r\nconst productImageTextStyle = {\r\n  position: 'absolute',\r\n  bottom: '5%',\r\n  left: '5%',\r\n  width: '100%',\r\n  height: 'auto',\r\n  color: 'white'\r\n};\r\n\r\nconst ProductDetailedHeader: React.FC<{product: IProduct}> = ({product}) => {\r\n  const host = product.liked.filter(x => x.isHost)[0];\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { likeProduct, unlikeProduct, loadingProduct } = rootStore.productStore;\r\n    return (\r\n        <Segment.Group>\r\n          <Segment basic attached='top' style={{ padding: '0' }}>\r\n            <Image src={`/assets/categoryImages/${product.category}.jpg`} fluid style={productImageStyle}/>\r\n            <Segment basic style={productImageTextStyle}>\r\n              <Item.Group>\r\n                <Item>\r\n                  <Item.Content>\r\n                    <Header\r\n                      size='huge'\r\n                      content={product.title}\r\n                      style={{ color: 'white' }}\r\n                    />\r\n                    <p>{format(product.date, 'eeee do MMMM')}</p>\r\n                    <p>\r\n                    Hosted by {' '}\r\n                    <Link to={`/profile/${host.username}`}>\r\n                      <strong>{host.displayName}</strong>\r\n                    </Link>\r\n                    </p>\r\n                  </Item.Content>\r\n                </Item>\r\n              </Item.Group>\r\n            </Segment>\r\n          </Segment>\r\n          <Segment clearing attached='bottom'>\r\n            {product.isHost ? (\r\n              <Button as={Link} to={`/product/manage/${product.id}`} color='orange' floated='right'>\r\n              Manage Event\r\n            </Button>\r\n              ) : product.isLiked ? (\r\n                <Button loading={loadingProduct} onClick={unlikeProduct}>Cancel attendance</Button>\r\n                ) : (\r\n                <Button loading={loadingProduct} onClick={likeProduct} color='grey'>Join product</Button>\r\n              )}\r\n          </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default observer(ProductDetailedHeader);\r\n","import React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { IProduct } from '../../../models/product'\r\nimport {format} from 'date-fns'\r\n\r\n\r\nconst ProductDetailedInfo: React.FC<{product: IProduct}> = ({product}) => {\r\n    return (\r\n        <div>\r\n            <Segment.Group>\r\n                  <Segment attached='top'>\r\n                    <Grid>\r\n                      <Grid.Column width={1}>\r\n                        <Icon size='large' color='grey' name='info' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={15}>\r\n                        <p>{product.description}</p>\r\n                \r\n                        <p>Made By: {product.madeBy}</p>\r\n                        \r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                  <Segment attached>\r\n                    <Grid verticalAlign='middle'>\r\n                      <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='grey' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={15}>\r\n                        <span>\r\n                          {format(product.date, 'eeee do MMMM')} at {format(product.date, 'h:mm a')}\r\n                        </span>\r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                  <Segment attached>\r\n                    <Grid verticalAlign='middle'>\r\n                      <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='grey' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={11}>\r\n                        <span>{product.category}</span>\r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                </Segment.Group>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductDetailedInfo\r\n","import React, { Fragment, useContext, useEffect } from \"react\";\r\nimport { Segment, Header, Form, Button, Comment } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport { Link } from \"react-router-dom\";\r\nimport TextAreaInput from \"../../../common/form/TextAreaInput\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { formatDistance } from \"date-fns\";\r\n\r\nconst ProductDetailedChat = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    createHubConnectionProduct,\r\n    stopHubConnectionProduct,\r\n    addCommentProduct,\r\n    product,\r\n  } = rootStore.productStore;\r\n\r\n  useEffect(() => {\r\n    createHubConnectionProduct(product!.id);\r\n    return () => {\r\n      stopHubConnectionProduct();\r\n    };\r\n  }, [createHubConnectionProduct, stopHubConnectionProduct, product]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        textAlign=\"center\"\r\n        attached=\"top\"\r\n        inverted\r\n        color=\"grey\"\r\n        style={{ border: \"none\" }}\r\n      >\r\n        <Header>Chat about this event</Header>\r\n      </Segment>\r\n      <Segment attached>\r\n        <Comment.Group>\r\n          {product &&\r\n            product.productComments &&\r\n            product.productComments.map((comment) => (\r\n              <Comment key={comment.id}>\r\n                <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\r\n                <Comment.Content>\r\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\r\n                    {comment.displayName}\r\n                  </Comment.Author>\r\n                  <Comment.Metadata>\r\n                    <div>\r\n                      {formatDistance(new Date(comment.createdAt), new Date())}\r\n                    </div>\r\n                  </Comment.Metadata>\r\n                  <Comment.Text>{comment.body}</Comment.Text>\r\n                </Comment.Content>\r\n              </Comment>\r\n            ))}\r\n\r\n          <FinalForm\r\n            onSubmit={addCommentProduct}\r\n            render={({ handleSubmit, submitting, form }) => (\r\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\r\n                <Field\r\n                  name=\"body\"\r\n                  component={TextAreaInput}\r\n                  rows={2}\r\n                  placeholder=\"Add your comment\"\r\n                />\r\n                <Button\r\n                  loading={submitting}\r\n                  content=\"Add Reply\"\r\n                  labelPosition=\"left\"\r\n                  icon=\"edit\"\r\n                  primary\r\n                />\r\n              </Form>\r\n            )}\r\n          />\r\n        </Comment.Group>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ProductDetailedChat);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Segment, List, Item, Label, Image } from \"semantic-ui-react\";\r\nimport { ILikedProduct } from \"../../../models/product\";\r\n\r\ninterface IProps {\r\n  attendees: ILikedProduct[];\r\n}\r\n\r\nconst ProductDetailedSidebar: React.FC<IProps> = ({ attendees }) => {\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        textAlign=\"center\"\r\n        style={{ border: \"none\" }}\r\n        attached=\"top\"\r\n        secondary\r\n        inverted\r\n        color=\"grey\"\r\n      >\r\n        {attendees.length} {attendees.length === 1 ? \"Person\" : \"People\"} Going\r\n      </Segment>\r\n      <Segment attached>\r\n        <List relaxed divided>\r\n          {attendees.map((attendee) => (\r\n            <Item key={attendee.username} style={{ position: \"relative\" }}>\r\n              {attendee.isHost && (\r\n                <Label\r\n                  style={{ position: \"absolute\" }}\r\n                  color=\"orange\"\r\n                  ribbon=\"right\"\r\n                >\r\n                  Host\r\n                </Label>\r\n              )}\r\n              <Image size=\"tiny\" src={attendee.image || \"/assets/user.png\"} />\r\n              <Item.Content verticalAlign=\"middle\">\r\n                <Item.Header as=\"h3\">\r\n                  <Link to={`/profile/${attendee.username}`}>{attendee.displayName}</Link>\r\n                </Item.Header>\r\n                <Item.Extra style={{ color: \"orange\" }}>Following</Item.Extra>\r\n              </Item.Content>\r\n            </Item>\r\n          ))}\r\n\r\n        </List>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ProductDetailedSidebar);\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Grid} from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport LoadingComponent from \"../../../Layout/LoadingComponent\";\r\nimport ProductDetailedHeader from \"./ProductDetailedHeader\";\r\nimport ProductDetailedInfo from \"./ProductDetailedInfo\";\r\nimport ProductDetailedChat from \"./ProductDetailedChat\";\r\nimport ProductDetailedSidebar from \"./ProductDetailedSidebar\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst ProductDetails: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {loadproduct, loadingInitialProduct, product} = rootStore.productStore;\r\n  const [ initialLoad, setInitialLoad] = useState(true);\r\n  useEffect(() => {\r\n    loadproduct(match.params.id).then(()=>setInitialLoad(false));\r\n  }, [loadproduct, match.params.id, history]);\r\n\r\n  if (loadingInitialProduct || !product || initialLoad)\r\n    return <LoadingComponent content=\"Loading product...\" />;\r\n\r\n  if (!product)\r\n  return <h2>product not found</h2>\r\n\r\n  return (\r\n <Grid>\r\n   <Grid.Column width={10}>\r\n      <ProductDetailedHeader product={product} />\r\n      <ProductDetailedInfo product={product} />\r\n      {!initialLoad && <ProductDetailedChat />}\r\n   </Grid.Column>\r\n   <Grid.Column width={6}>\r\n      <ProductDetailedSidebar\r\n        attendees={product.liked}\r\n      />\r\n   </Grid.Column>\r\n </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ProductDetails);\r\n","import React from \"react\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { ILikedProduct } from \"../../../models/product\";\r\n\r\ninterface IProps {\r\n  peopleWhoLiked: ILikedProduct[];\r\n}\r\n\r\nconst ProductListItemAttendees: React.FC<IProps> = ({ peopleWhoLiked }) => {\r\n  return (\r\n    <List horizontal>\r\n      {peopleWhoLiked.map((attendee) => (\r\n        <List.Item key={attendee.username}>\r\n          <Popup\r\n            header={attendee.username}\r\n            trigger={\r\n              <Image\r\n                size=\"mini\"\r\n                circular\r\n                src={attendee.image || \"/assets/user.png\"}\r\n              />\r\n            }\r\n          />\r\n        </List.Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default ProductListItemAttendees;\r\n","import React from \"react\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n// import productstore from \"../../../../App/stores/productstore\";\r\nimport { IProduct } from \"../../../models/product\";\r\nimport {format} from 'date-fns'\r\nimport ProductListItemAttendees from './ProductListItemAttendees';\r\n// import { RootStore } from \"../../../stores/rootStore\";\r\n\r\nconst ProductListItem: React.FC<{ product: IProduct }> = ({ product }) => {\r\n  const host = product.liked.filter(x => x.isHost)[0];\r\n  return (\r\n    <Segment.Group>\r\n      <Segment>\r\n          <Item.Group>\r\n        <Item>\r\n          <Item.Image size=\"tiny\" circular src={host.image || \"/assets/user.png\"} />\r\n          <Item.Content>\r\n            <Item.Header as={Link} to={`/products/${product.id}`}>{product.title}</Item.Header>\r\n            <Item.Description>\r\n            Hosted By \r\n            <Link to={`/profile/${host.username}`}>\r\n            {host.displayName}\r\n            </Link>\r\n            </Item.Description>\r\n            {product.isHost &&\r\n            <Item.Description>\r\n              <Label \r\n                basic\r\n                color='orange'\r\n                content='You are hosting this product'\r\n              />\r\n            </Item.Description>\r\n              }\r\n                {product.liked && !product.isHost &&\r\n            <Item.Description>\r\n              <Label \r\n                basic\r\n                color='orange'\r\n                content='You liked this product'\r\n              />\r\n            </Item.Description>\r\n              }\r\n          \r\n          </Item.Content>\r\n        </Item>\r\n\r\n          </Item.Group>\r\n      </Segment>\r\n      <Segment>\r\n          <Icon name='clock' /> {format(product.date, 'H:mm a')}\r\n          {/* <Icon name='marker' /> {product.venue}, {product.city} */}\r\n      </Segment>\r\n      <Segment secondary>\r\n            <ProductListItemAttendees\r\n              peopleWhoLiked={product.liked}\r\n            />\r\n      </Segment>\r\n      <Segment clearing>\r\n          <span>{product.description}</span>\r\n          <Button\r\n                as={Link}\r\n                to={`/products/${product.id}`}\r\n                floated=\"right\"\r\n                content=\"View\"\r\n                color=\"black\"\r\n              />\r\n      </Segment>\r\n    </Segment.Group>\r\n  );\r\n};\r\n\r\nexport default ProductListItem;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment, useContext } from \"react\";\r\nimport { Item, Label } from \"semantic-ui-react\";\r\n// import productstore from \"../../../../App/stores/productstore\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nimport ProductListItem from \"./ProductListItem\";\r\nimport {format} from 'date-fns';\r\n\r\nconst ProductList: React.FC = () => {\r\n  // const productstore = useContext(productstore);\r\n  // const { productsByDate } = productstore;\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {ProductsByDate} = rootStore.productStore;\r\n\r\n  return (\r\n    <Fragment>\r\n      {ProductsByDate.map(([group, products]) => (\r\n        <Fragment key={group}>\r\n          <Label  size=\"large\" color=\"black\">\r\n            {format(new Date(group), 'eeee do MMMM')}\r\n          </Label>\r\n            <Item.Group divided>\r\n              {products.map((product) => (\r\n                <ProductListItem key={product.id} product={product} />\r\n              ))}\r\n            </Item.Group>\r\n        </Fragment>\r\n      ))}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ProductList);\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\nconst ProductListItemPlaceholder = () => {\r\n  return (\r\n    <Fragment>\r\n      <Placeholder fluid style={{ marginTop: 50 }}>\r\n        <Segment.Group>\r\n          <Segment style={{ minHeight: 110 }}>\r\n            <Placeholder>\r\n              <Placeholder.Header image>\r\n                <Placeholder.Line />\r\n                <Placeholder.Line />\r\n              </Placeholder.Header>\r\n              <Placeholder.Paragraph>\r\n                <Placeholder.Line />\r\n              </Placeholder.Paragraph>\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment>\r\n            <Placeholder>\r\n              <Placeholder.Line />\r\n              <Placeholder.Line />\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment secondary style={{ minHeight: 70 }} />\r\n          <Segment clearing>\r\n            <Button disabled color='black' floated='right' content='View' />\r\n          </Segment>\r\n        </Segment.Group>\r\n      </Placeholder>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default ProductListItemPlaceholder;","import React, { Fragment, useContext } from 'react';\r\nimport { Menu, Header } from 'semantic-ui-react';\r\n// import { Calendar } from 'react-widgets';\r\nimport { RootStoreContext } from '../../../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n// import { NavLink } from 'react-router-dom';\r\n\r\nconst ProductFilters = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { predicateProduct, setPredicateProduct } = rootStore.productStore;\r\n  return (\r\n    <Fragment>\r\n      <Menu vertical size={'large'} style={{ width: '100%', marginTop: 50 }}>\r\n        <Header icon={'filter'} attached color={'grey'} content={'Filters'} />\r\n        <Menu.Item\r\n          active={predicateProduct.size === 0}\r\n          onClick={() => setPredicateProduct('all', 'true')}\r\n          color={'black'}\r\n          name={'all'}\r\n          content={'All products'}\r\n        />\r\n        <Menu.Item\r\n          active={predicateProduct.has('isLiked')}\r\n          onClick={() => setPredicateProduct('isLiked', 'true')}\r\n          color={'black'}\r\n          name={'username'}\r\n          content={\"I Liked this product\"}\r\n        />\r\n        <Menu.Item\r\n          active={predicateProduct.has('isHost')}\r\n          onClick={() => setPredicateProduct('isHost', 'true')}\r\n          color={'black'}\r\n          name={'host'}\r\n          content={\"I'm hosting\"}\r\n        />\r\n      </Menu>\r\n\r\n      {/* edit make user roles and if this user roles == admin then show */}\r\n      {/* <Header\r\n    icon={'add'}\r\n    attached\r\n    color={'grey'}\r\n    content={'Create'}\r\n  />\r\n      <Button\r\n        as={NavLink}\r\n        to={\"/createProduct\"}\r\n        positive\r\n        content=\"Create Product\"\r\n      /> */}\r\n\r\n\r\n\r\n\r\n      {/* <Header\r\n        icon={'calendar'}\r\n        attached\r\n        color={'grey'}\r\n        content={'Select Date'}\r\n      />\r\n      <Calendar\r\n        onChange={date => setPredicateProduct('startDate', date!)}\r\n        value={predicateProduct.get('startDate') || new Date()}\r\n      /> */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(ProductFilters);\r\n","// start typing rafc\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport ProductList from \"./ProductList\";\r\nimport { observer } from \"mobx-react-lite\";\r\n// import LoadingComponent from \"../../../Layout/LoadingComponent\";\r\nimport ProductListItemPlaceholder from './ProductListItemPlaceholder';\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport ProductFilters from './ProductFilters';\r\n\r\n\r\nconst ProductDashboard: React.FC = () => {\r\n    // MOBX\r\n    // const productstore = useContext(productstore);\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n      loadProducts,\r\n      loadingInitialProduct,\r\n      setPageProduct,\r\n      pageProduct,\r\n      totalPagesProduct\r\n    } = rootStore.productStore;\r\n    const [loadingNextproduct, setLoadingNextproduct] =useState(false);\r\n\r\n    const handleGetNext = () => {\r\n      setLoadingNextproduct(true);\r\n      setPageProduct(pageProduct + 1);\r\n      loadProducts().then(() => setLoadingNextproduct(false));\r\n    };\r\n\r\n    // LIFECYCLE\r\n    useEffect(() => {\r\n     loadProducts();\r\n    }, [loadProducts]);\r\n  \r\n    // if (loadingInitial)\r\n    //   return <LoadingComponent content=\"Loading products...\" />;\r\n  return (\r\n      <Grid>\r\n        <Grid.Column width={10}>\r\n          {loadingInitialProduct && pageProduct === 0 ? (\r\n            <ProductListItemPlaceholder />\r\n          ) : (\r\n            <InfiniteScroll\r\n            pageStart={0}\r\n            loadMore={handleGetNext}\r\n            hasMore={!loadingNextproduct && pageProduct + 1 < totalPagesProduct}\r\n            initialLoad={false}\r\n              >\r\n                <ProductList />\r\n              </InfiniteScroll>\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={6}>\r\n          <ProductFilters />\r\n        </Grid.Column>\r\n        <Grid.Column width={10}>\r\n          <Loader active={loadingNextproduct} />\r\n        </Grid.Column>\r\n      </Grid>\r\n  );\r\n};\r\nexport default observer(ProductDashboard);\r\n","export interface IBusinessesEnvelope {\r\n    businesses: IBusiness[];\r\n    businessCount: number;\r\n  }\r\n\r\nexport interface IBusiness {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n    featuredPost: string;\r\n    street: string;\r\n    hours: string;\r\n    city: string;\r\n    image: string;\r\n    state: string;\r\n    website: string;\r\n    isService: boolean;\r\n    category: string;\r\n    date: Date;\r\n    isHost: boolean;\r\n    isLiked: boolean;\r\n    liked: ILikedBusiness[];\r\n    businessComments: IComment[];\r\n}\r\n\r\nexport interface IComment {\r\n    id: string;\r\n    createdAt: Date;\r\n    body: string;\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n  }\r\n\r\nexport interface IBusinessFormValues extends Partial<IBusiness> {\r\n    time?: Date;\r\n}\r\nexport class BusinessFormValues implements IBusinessFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = \"\";\r\n    description: string = \"\";\r\n    date?: Date = undefined;\r\n    time?: Date = undefined;\r\n    featuredPost?: string = \"\";\r\n    image?: string = \"\";\r\n    state?: string = \"\";\r\n    street?: string = \"\";\r\n    city?: string = \"\";\r\n    website?: string = \"\";\r\n    hours?: string = \"\";\r\n\r\n\r\n    constructor(init?: IBusinessFormValues) {\r\n        if (init && init.date){\r\n            init.time = init.date\r\n        }\r\n        Object.assign(this, init);\r\n    } \r\n}\r\n\r\nexport interface ILikedBusiness {\r\n    username: string;\r\n    displayName: string;\r\n    image: string;\r\n    isHost: boolean;\r\n    following?: boolean;\r\n}","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Button, Form, Grid, Segment } from \"semantic-ui-react\";\r\nimport {BusinessFormValues} from \"../../../models/business\";\r\nimport { v4 as uuid } from \"uuid\";\r\n// import LoadingComponent from \"../../../../LoadingComponent\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport TextInput from \"../../../common/form/TextInput\";\r\nimport TextAreaInput from \"../../../common/form/TextAreaInput\";\r\nimport SelectInput from \"../../../common/form/SelectInput\";\r\nimport DateInput from \"../../../common/form/DateInput\";\r\n\r\nimport { category } from \"../../../common/options/categoryOptions\";\r\nimport { combineDateAndTime } from \"../../../common/util/util\";\r\nimport {combineValidators, isRequired, composeValidators, hasLengthGreaterThan} from 'revalidate';\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\n\r\nconst validate = combineValidators({\r\n  title: isRequired({message: 'The event title is required'}),\r\n  category: isRequired('Category'),\r\n  description: composeValidators(\r\n    isRequired('Description'),\r\n    hasLengthGreaterThan(4)({message: 'Description needs to be at least 5 charectors'})\r\n  )(),\r\n  city: isRequired('City'),\r\n  // venue: isRequired('Venue'),\r\n  date: isRequired('Date'),\r\n  time: isRequired('Time'),\r\n})\r\n\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst BusinessForm: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    createbusiness,\r\n    editbusiness,\r\n    submittingBusiness,\r\n    loadbusiness,\r\n    deletebusiness\r\n  } = rootStore.businessStore;\r\n\r\n  const [business, setBusiness] = useState(new BusinessFormValues());\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n    if (match.params.id) {\r\n      setLoading(true);\r\n      loadbusiness(match.params.id)\r\n        .then(business => {\r\n          setBusiness(new BusinessFormValues(business));\r\n        })\r\n        .finally(() => setLoading(false));\r\n    }\r\n  }, [loadbusiness, match.params.id]);\r\n\r\n  const handleFinalFormSubmit = (values: any) => {\r\n    const dateAndTime = combineDateAndTime(values.date, values.time);\r\n    // const dateAndTime = combineDateAndTime( Date,Date;\r\n    const { date, time, ...business } = values;\r\n    business.date = dateAndTime;\r\n    // const {...business } = values;\r\n    // business.date = new Date(Date.now());\r\n    // Business.isService = false;\r\n\r\n    if (!business.id) {\r\n      let newBusiness = {\r\n        ...business,\r\n        id: uuid(),\r\n      };\r\n      createbusiness(newBusiness);\r\n    } else {\r\n      editbusiness(business);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <Segment clearing>\r\n          <FinalForm\r\n          validate={validate}\r\n            initialValues={business}\r\n            onSubmit={handleFinalFormSubmit}\r\n            render={({ handleSubmit, invalid, pristine }) => (\r\n              <Form onSubmit={handleSubmit} loading={loading}>\r\n                <Field\r\n                  name=\"title\"\r\n                  placeholder=\"Title\"\r\n                  value={business.title}\r\n                  component={TextInput}\r\n                />\r\n                <Field\r\n                  name=\"description\"\r\n                  placeholder=\"Description\"\r\n                  value={business.description}\r\n                  rows={3}\r\n                  component={TextAreaInput}\r\n                />\r\n                <Field\r\n                  name=\"category\"\r\n                  placeholder=\"Category\"\r\n                  options={category}\r\n                  value={business.category}\r\n                  component={SelectInput}\r\n                />\r\n                <Form.Group width=\"equal\">\r\n                  <Field\r\n                    name=\"street\"\r\n                    placeholder=\"Street\"\r\n                    value={business.street}\r\n                    component={TextInput}\r\n                  />\r\n                     <Field\r\n                    name=\"city\"\r\n                    placeholder=\"City\"\r\n                    value={business.city}\r\n                    component={TextInput}\r\n                  />\r\n                  <Field\r\n                    name=\"state\"\r\n                    placeholder=\"State\"\r\n                    value={business.state}\r\n                    component={TextInput}\r\n                  />\r\n                </Form.Group>\r\n                <Field\r\n                    name=\"website\"\r\n                    placeholder=\"Website\"\r\n                    value={business.website}\r\n                    component={TextInput}\r\n                  />\r\n                   <Field\r\n                    name=\"image\"\r\n                    placeholder=\"Image\"\r\n                    value={business.image}\r\n                    component={TextInput}\r\n                  />\r\n                <Form.Group width=\"equal\">\r\n                  <Field\r\n                    name=\"date\"\r\n                    placeholder=\"Date\"\r\n                    value={business.date}\r\n                    component={DateInput}\r\n                    date={true}\r\n                  />\r\n                  <Field\r\n                    name=\"time\"\r\n                    placeholder=\"Time\"\r\n                    value={business.time}\r\n                    component={DateInput}\r\n                    time={true}\r\n                  />\r\n                </Form.Group>\r\n                {/* <Field\r\n                  name=\"city\"\r\n                  component={TextInput}\r\n                  placeholder=\"City\"\r\n                  value={Business.city}\r\n                /> */}\r\n                {/* <Field\r\n                  name=\"venue\"\r\n                  placeholder=\"Venue\"\r\n                  value={Business.venue}\r\n                  component={TextInput}\r\n                /> */}\r\n                         <Field\r\n                  name=\"hours\"\r\n                  placeholder=\"Hours\"\r\n                  value={business.hours}\r\n                  rows={2}\r\n                  component={TextAreaInput}\r\n                />\r\n                    <Field\r\n                  name=\"featuredPost\"\r\n                  placeholder=\"FeaturedPost\"\r\n                  value={business.featuredPost}\r\n                  rows={3}\r\n                  component={TextAreaInput}\r\n                />\r\n                <Button\r\n                  loading={submittingBusiness}\r\n                  disabled={loading || invalid || pristine}\r\n                  floated=\"right\"\r\n                  positive\r\n                  type=\"submit\"\r\n                  content=\"Submit\"\r\n                />\r\n                <Button\r\n                  onClick={business.id ? () => history.push(`/businesses/${business.id}`) : () => history.push(\"/businesses\")}\r\n                  disabled={loading}\r\n                  floated=\"right\"\r\n                  type=\"button\"\r\n                  content=\"Cancel\"\r\n                />\r\n                    {business.id && \r\n                <Button\r\n                 onClick={(e)=>deletebusiness(e,business.id!).then(()=> history.push('/businesses'))}\r\n                 \r\n                 disabled={loading}\r\n                 floated=\"right\"\r\n                 type=\"button\"\r\n                 content=\"Delete\"\r\n                />\r\n                }\r\n              </Form>\r\n            )}\r\n          />\r\n        </Segment>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(BusinessForm);\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image } from 'semantic-ui-react'\r\nimport { IBusiness } from '../../../models/business';\r\nimport {format} from 'date-fns';\r\nimport { RootStoreContext } from '../../../stores/rootStore';\r\n\r\nconst BusinessImageStyle = {\r\n  filter: 'brightness(30%)'\r\n};\r\n\r\nconst BusinessImageTextStyle = {\r\n  position: 'absolute',\r\n  bottom: '5%',\r\n  left: '5%',\r\n  width: '100%',\r\n  height: 'auto',\r\n  color: 'white'\r\n};\r\n\r\nconst BusinessDetailedHeader: React.FC<{Business: IBusiness}> = ({Business}) => {\r\n  const host = Business.liked.filter(x => x.isHost)[0];\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { likeBusiness, unlikeBusiness, loadingBusiness } = rootStore.businessStore;\r\n    return (\r\n        <Segment.Group>\r\n          <Segment basic attached='top' style={{ padding: '0' }}>\r\n            <Image src={`/assets/categoryImages/${Business.category}.jpg`} fluid style={BusinessImageStyle}/>\r\n            <Segment basic style={BusinessImageTextStyle}>\r\n              <Item.Group>\r\n                <Item>\r\n                  <Item.Content>\r\n                    <Header\r\n                      size='huge'\r\n                      content={Business.title}\r\n                      style={{ color: 'white' }}\r\n                    />\r\n                    <p>{format(Business.date, 'eeee do MMMM')}</p>\r\n                    <p>\r\n                    Hosted by {' '}\r\n                    <Link to={`/profile/${host.username}`}>\r\n                      <strong>{host.displayName}</strong>\r\n                    </Link>\r\n                    </p>\r\n                  </Item.Content>\r\n                </Item>\r\n              </Item.Group>\r\n            </Segment>\r\n          </Segment>\r\n          <Segment clearing attached='bottom'>\r\n            {Business.isHost ? (\r\n              <Button as={Link} to={`/Business/manage/${Business.id}`} color='orange' floated='right'>\r\n              Manage Event\r\n            </Button>\r\n              ) : Business.isLiked ? (\r\n                <Button loading={loadingBusiness} onClick={unlikeBusiness}>Cancel attendance</Button>\r\n                ) : (\r\n                <Button loading={loadingBusiness} onClick={likeBusiness} color='grey'>Join Business</Button>\r\n              )}\r\n          </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default observer(BusinessDetailedHeader);\r\n","import React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { IBusiness } from '../../../models/business'\r\nimport {format} from 'date-fns'\r\n\r\n\r\nconst BusinessDetailedInfo: React.FC<{Business: IBusiness}> = ({Business}) => {\r\n    return (\r\n        <div>\r\n            <Segment.Group>\r\n                  <Segment attached='top'>\r\n                    <Grid>\r\n                      <Grid.Column width={1}>\r\n                        <Icon size='large' color='grey' name='info' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={15}>\r\n                        <p>{Business.description}</p>\r\n                        <p>{Business.featuredPost}</p>\r\n                        \r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                  <Segment attached>\r\n                    <Grid verticalAlign='middle'>\r\n                      <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='grey' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={15}>\r\n                        <span>\r\n                          {format(Business.date, 'eeee do MMMM')} at {format(Business.date, 'h:mm a')}\r\n                        </span>\r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                  <Segment attached>\r\n                    <Grid verticalAlign='middle'>\r\n                      <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='grey' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={11}>\r\n                        <span>{Business.website}</span>\r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                </Segment.Group>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BusinessDetailedInfo\r\n","import React, { Fragment, useContext, useEffect } from \"react\";\r\nimport { Segment, Header, Form, Button, Comment } from \"semantic-ui-react\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nimport { Form as FinalForm, Field } from \"react-final-form\";\r\nimport { Link } from \"react-router-dom\";\r\nimport TextAreaInput from \"../../../common/form/TextAreaInput\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { formatDistance } from \"date-fns\";\r\n\r\nconst BusinessDetailedChat = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    createHubConnectionBusiness,\r\n    stopHubConnectionBusiness,\r\n    addCommentBusiness,\r\n    business,\r\n  } = rootStore.businessStore;\r\n\r\n  useEffect(() => {\r\n    createHubConnectionBusiness(business!.id);\r\n    return () => {\r\n      stopHubConnectionBusiness();\r\n    };\r\n  }, [createHubConnectionBusiness, stopHubConnectionBusiness, business]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        textAlign=\"center\"\r\n        attached=\"top\"\r\n        inverted\r\n        color=\"grey\"\r\n        style={{ border: \"none\" }}\r\n      >\r\n        <Header>Chat about this event</Header>\r\n      </Segment>\r\n      <Segment attached>\r\n        <Comment.Group>\r\n          {business &&\r\n            business.businessComments &&\r\n            business.businessComments.map((comment) => (\r\n              <Comment key={comment.id}>\r\n                <Comment.Avatar src={comment.image || \"/assets/user.png\"} />\r\n                <Comment.Content>\r\n                  <Comment.Author as={Link} to={`/profile/${comment.username}`}>\r\n                    {comment.displayName}\r\n                  </Comment.Author>\r\n                  <Comment.Metadata>\r\n                    <div>\r\n                      {formatDistance(new Date(comment.createdAt), new Date())}\r\n                    </div>\r\n                  </Comment.Metadata>\r\n                  <Comment.Text>{comment.body}</Comment.Text>\r\n                </Comment.Content>\r\n              </Comment>\r\n            ))}\r\n\r\n          <FinalForm\r\n            onSubmit={addCommentBusiness}\r\n            render={({ handleSubmit, submitting, form }) => (\r\n              <Form onSubmit={() => handleSubmit()!.then(() => form.reset())}>\r\n                <Field\r\n                  name=\"body\"\r\n                  component={TextAreaInput}\r\n                  rows={2}\r\n                  placeholder=\"Add your comment\"\r\n                />\r\n                <Button\r\n                  loading={submitting}\r\n                  content=\"Add Reply\"\r\n                  labelPosition=\"left\"\r\n                  icon=\"edit\"\r\n                  primary\r\n                />\r\n              </Form>\r\n            )}\r\n          />\r\n        </Comment.Group>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(BusinessDetailedChat);\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Segment, List, Item, Label, Image } from \"semantic-ui-react\";\r\nimport { ILikedBusiness } from \"../../../models/business\";\r\n\r\ninterface IProps {\r\n  attendees: ILikedBusiness[];\r\n}\r\n\r\nconst BusinessDetailedSidebar: React.FC<IProps> = ({ attendees }) => {\r\n  return (\r\n    <Fragment>\r\n      <Segment\r\n        textAlign=\"center\"\r\n        style={{ border: \"none\" }}\r\n        attached=\"top\"\r\n        secondary\r\n        inverted\r\n        color=\"grey\"\r\n      >\r\n        {attendees.length} {attendees.length === 1 ? \"Person\" : \"People\"} Going\r\n      </Segment>\r\n      <Segment attached>\r\n        <List relaxed divided>\r\n          {attendees.map((attendee) => (\r\n            <Item key={attendee.username} style={{ position: \"relative\" }}>\r\n              {attendee.isHost && (\r\n                <Label\r\n                  style={{ position: \"absolute\" }}\r\n                  color=\"orange\"\r\n                  ribbon=\"right\"\r\n                >\r\n                  Host\r\n                </Label>\r\n              )}\r\n              <Image size=\"tiny\" src={attendee.image || \"/assets/user.png\"} />\r\n              <Item.Content verticalAlign=\"middle\">\r\n                <Item.Header as=\"h3\">\r\n                  <Link to={`/profile/${attendee.username}`}>{attendee.displayName}</Link>\r\n                </Item.Header>\r\n                <Item.Extra style={{ color: \"orange\" }}>Following</Item.Extra>\r\n              </Item.Content>\r\n            </Item>\r\n          ))}\r\n\r\n        </List>\r\n      </Segment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(BusinessDetailedSidebar);\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Grid} from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport LoadingComponent from \"../../../Layout/LoadingComponent\";\r\nimport BusinessDetailedHeader from \"./BusinessDetailedHeader\";\r\nimport BusinessDetailedInfo from \"./BusinessDetailedInfo\";\r\nimport BusinessDetailedChat from \"./BusinessDetailedChat\";\r\nimport BusinessDetailedSidebar from \"./BusinessDetailedSidebar\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst BusinessDetails: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {loadbusiness, loadingInitialBusiness, business} = rootStore.businessStore;\r\n  const [ initialLoad, setInitialLoad] = useState(true);\r\n  useEffect(() => {\r\n    loadbusiness(match.params.id).then(()=>setInitialLoad(false));\r\n  }, [loadbusiness, match.params.id, history]);\r\n\r\n  if (loadingInitialBusiness || !business || initialLoad)\r\n    return <LoadingComponent content=\"Loading Business...\" />;\r\n\r\n  if (!business)\r\n  return <h2>Business not found</h2>\r\n\r\n  return (\r\n <Grid>\r\n   <Grid.Column width={10}>\r\n      <BusinessDetailedHeader Business={business} />\r\n      <BusinessDetailedInfo Business={business} />\r\n      {!initialLoad && <BusinessDetailedChat />}\r\n   </Grid.Column>\r\n   <Grid.Column width={6}>\r\n      <BusinessDetailedSidebar\r\n        attendees={business.liked}\r\n      />\r\n   </Grid.Column>\r\n </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(BusinessDetails);\r\n","import React from \"react\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { ILikedBusiness } from \"../../../models/business\";\r\n\r\ninterface IProps {\r\n  peopleWhoLiked: ILikedBusiness[];\r\n}\r\n\r\nconst BusinessListItemAttendees: React.FC<IProps> = ({ peopleWhoLiked }) => {\r\n  return (\r\n    <List horizontal>\r\n      {peopleWhoLiked.map((attendee) => (\r\n        <List.Item key={attendee.username}>\r\n          <Popup\r\n            header={attendee.username}\r\n            trigger={\r\n              <Image\r\n                size=\"mini\"\r\n                circular\r\n                src={attendee.image || \"/assets/user.png\"}\r\n              />\r\n            }\r\n          />\r\n        </List.Item>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nexport default BusinessListItemAttendees;\r\n","import React from \"react\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Link } from \"react-router-dom\";\r\n// import businessestore from \"../../../../App/stores/businessestore\";\r\nimport { IBusiness } from \"../../../models/business\";\r\nimport {format} from 'date-fns'\r\nimport BusinessListItemAttendees from './BusinessListItemAttendees';\r\n// import { RootStore } from \"../../../stores/rootStore\";\r\n\r\nconst BusinessListItem: React.FC<{ Business: IBusiness }> = ({ Business }) => {\r\n  const host = Business.liked.filter(x => x.isHost)[0];\r\n  return (\r\n    <Segment.Group>\r\n      <Segment>\r\n          <Item.Group>\r\n        <Item>\r\n          <Item.Image size=\"tiny\" circular src={host.image || \"/assets/user.png\"} />\r\n          <Item.Content>\r\n            <Item.Header as={Link} to={`/businesses/${Business.id}`}>{Business.title}</Item.Header>\r\n            <Item.Description>\r\n            Hosted By \r\n            <Link to={`/profile/${host.username}`}>\r\n            {host.displayName}\r\n            </Link>\r\n            </Item.Description>\r\n            {Business.isHost &&\r\n            <Item.Description>\r\n              <Label \r\n                basic\r\n                color='orange'\r\n                content='You are hosting this Business'\r\n              />\r\n            </Item.Description>\r\n              }\r\n                {Business.liked && !Business.isHost &&\r\n            <Item.Description>\r\n              <Label \r\n                basic\r\n                color='orange'\r\n                content='You liked this Business'\r\n              />\r\n            </Item.Description>\r\n              }\r\n          \r\n          </Item.Content>\r\n        </Item>\r\n\r\n          </Item.Group>\r\n      </Segment>\r\n      <Segment>\r\n          <Icon name='clock' /> {format(new Date(Business.date), 'H:mm a')}\r\n          {/* <Icon name='marker' /> {Business.venue}, {Business.city} */}\r\n      </Segment>\r\n      <Segment secondary>\r\n            <BusinessListItemAttendees\r\n              peopleWhoLiked={Business.liked}\r\n            />\r\n      </Segment>\r\n      <Segment clearing>\r\n          <span>{Business.description}</span>\r\n          <Button\r\n                as={Link}\r\n                to={`/businesses/${Business.id}`}\r\n                floated=\"right\"\r\n                content=\"View\"\r\n                color=\"black\"\r\n              />\r\n      </Segment>\r\n    </Segment.Group>\r\n  );\r\n};\r\n\r\nexport default BusinessListItem;\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment, useContext } from \"react\";\r\nimport { Item, Label } from \"semantic-ui-react\";\r\n// import businessestore from \"../../../../App/stores/businessestore\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nimport BusinessListItem from \"./BusinessListItem\";\r\nimport {format} from 'date-fns';\r\n\r\nconst BusinessList: React.FC = () => {\r\n  // const businessestore = useContext(businessestore);\r\n  // const { businessesByDate } = businessestore;\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {BusinessesByDate} = rootStore.businessStore;\r\n\r\n  return (\r\n    <Fragment>\r\n      {BusinessesByDate.map(([group, businesses]) => (\r\n        <Fragment key={group}>\r\n          <Label  size=\"large\" color=\"black\">\r\n            {format(new Date(group), 'eeee do MMMM')}\r\n          </Label>\r\n            <Item.Group divided>\r\n              {businesses.map((Business) => (\r\n                <BusinessListItem key={Business.id} Business={Business} />\r\n              ))}\r\n            </Item.Group>\r\n        </Fragment>\r\n      ))}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(BusinessList);\r\n","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\nconst BusinessListItemPlaceholder = () => {\r\n  return (\r\n    <Fragment>\r\n      <Placeholder fluid style={{ marginTop: 50 }}>\r\n        <Segment.Group>\r\n          <Segment style={{ minHeight: 110 }}>\r\n            <Placeholder>\r\n              <Placeholder.Header image>\r\n                <Placeholder.Line />\r\n                <Placeholder.Line />\r\n              </Placeholder.Header>\r\n              <Placeholder.Paragraph>\r\n                <Placeholder.Line />\r\n              </Placeholder.Paragraph>\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment>\r\n            <Placeholder>\r\n              <Placeholder.Line />\r\n              <Placeholder.Line />\r\n            </Placeholder>\r\n          </Segment>\r\n          <Segment secondary style={{ minHeight: 70 }} />\r\n          <Segment clearing>\r\n            <Button disabled color='black' floated='right' content='View' />\r\n          </Segment>\r\n        </Segment.Group>\r\n      </Placeholder>\r\n    </Fragment>\r\n  );\r\n};\r\nexport default BusinessListItemPlaceholder;","import React, { Fragment, useContext } from 'react';\r\nimport { Menu, Header, Button } from 'semantic-ui-react';\r\n// import { Calendar } from 'react-widgets';\r\nimport { RootStoreContext } from '../../../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst BusinessFilters = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { predicateBusiness, setPredicateBusiness } = rootStore.businessStore;\r\n  return (\r\n    <Fragment>\r\n      <Menu vertical size={'large'} style={{ width: '100%', marginTop: 50 }}>\r\n        <Header icon={'filter'} attached color={'grey'} content={'Filters'} />\r\n        <Menu.Item\r\n          active={predicateBusiness.size === 0}\r\n          onClick={() => setPredicateBusiness('all', 'true')}\r\n          color={'black'}\r\n          name={'all'}\r\n          content={'All businesses'}\r\n        />\r\n        <Menu.Item\r\n          active={predicateBusiness.has('isLiked')}\r\n          onClick={() => setPredicateBusiness('isLiked', 'true')}\r\n          color={'black'}\r\n          name={'username'}\r\n          content={\"My Liked Businesses\"}\r\n        />\r\n        <Menu.Item\r\n          active={predicateBusiness.has('isHost')}\r\n          onClick={() => setPredicateBusiness('isHost', 'true')}\r\n          color={'black'}\r\n          name={'host'}\r\n          content={\"My Businesses\"}\r\n        />\r\n      </Menu>\r\n      <Header\r\n    icon={'add'}\r\n    attached\r\n    color={'grey'}\r\n    content={'Create'}\r\n  />\r\n      <Button\r\n        as={NavLink}\r\n        to={\"/createBusiness\"}\r\n        positive\r\n        content=\"Create Business\"\r\n      />\r\n      {/* <Header\r\n        icon={'calendar'}\r\n        attached\r\n        color={'grey'}\r\n        content={'Select Date'}\r\n      />\r\n      <Calendar\r\n        onChange={date => setPredicateBusiness('startDate', date!)}\r\n        value={predicateBusiness.get('startDate') || new Date()}\r\n      /> */}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(BusinessFilters);\r\n","// start typing rafc\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport BusinessList from \"./BusinessList\";\r\nimport { observer } from \"mobx-react-lite\";\r\n// import LoadingComponent from \"../../../Layout/LoadingComponent\";\r\nimport BusinessListItemPlaceholder from './BusinessListItemPlaceholder';\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport BusinessFilters from './BusinessFilters';\r\n\r\n\r\nconst BusinessDashboard: React.FC = () => {\r\n    // MOBX\r\n    // const businessestore = useContext(businessestore);\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n      loadBusinesses,\r\n      loadingInitialBusiness,\r\n      setPageBusiness,\r\n      pageBusiness,\r\n      totalPagesBusiness\r\n    } = rootStore.businessStore;\r\n    const [loadingNextBusiness, setLoadingNextBusiness] =useState(false);\r\n\r\n    const handleGetNext = () => {\r\n      setLoadingNextBusiness(true);\r\n      setPageBusiness(pageBusiness + 1);\r\n      loadBusinesses().then(() => setLoadingNextBusiness(false));\r\n    };\r\n\r\n    // LIFECYCLE\r\n    useEffect(() => {\r\n     loadBusinesses();\r\n    }, [loadBusinesses]);\r\n  \r\n    // if (loadingInitial)\r\n    //   return <LoadingComponent content=\"Loading businesses...\" />;\r\n  return (\r\n      <Grid>\r\n        <Grid.Column width={10}>\r\n          {loadingInitialBusiness && pageBusiness === 0 ? (\r\n            <BusinessListItemPlaceholder />\r\n          ) : (\r\n            <InfiniteScroll\r\n            pageStart={0}\r\n            loadMore={handleGetNext}\r\n            hasMore={!loadingNextBusiness && pageBusiness + 1 < totalPagesBusiness}\r\n            initialLoad={false}\r\n              >\r\n                <BusinessList />\r\n              </InfiniteScroll>\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={6}>\r\n          <BusinessFilters />\r\n        </Grid.Column>\r\n        <Grid.Column width={10}>\r\n          <Loader active={loadingNextBusiness} />\r\n        </Grid.Column>\r\n      </Grid>\r\n  );\r\n};\r\nexport default observer(BusinessDashboard);\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image } from 'semantic-ui-react'\r\nimport { IExperience } from '../../../models/experience';\r\nimport {format} from 'date-fns';\r\n// import { RootStoreContext } from '../../../stores/rootStore';\r\n\r\nconst ExperienceImageStyle = {\r\n  filter: 'brightness(30%)'\r\n};\r\n\r\nconst ExperienceImageTextStyle = {\r\n  position: 'absolute',\r\n  bottom: '5%',\r\n  left: '5%',\r\n  width: '100%',\r\n  height: 'auto',\r\n  color: 'white'\r\n};\r\n\r\nconst ExperienceDetailedHeader: React.FC<{Experience: IExperience}> = ({Experience}) => {\r\n  const host = Experience.liked.filter(x => x.isHost)[0];\r\n  // const rootStore = useContext(RootStoreContext);\r\n  // const { loadExperiences } = rootStore.experienceStore;\r\n    return (\r\n        <Segment.Group>\r\n          <Segment basic attached='top' style={{ padding: '0' }}>\r\n            <Image src={`/assets/categoryImages/${Experience.category}.jpg`} fluid style={ExperienceImageStyle}/>\r\n            <Segment basic style={ExperienceImageTextStyle}>\r\n              <Item.Group>\r\n                <Item>\r\n                  <Item.Content>\r\n                    <Header\r\n                      size='huge'\r\n                      content={Experience.title}\r\n                      style={{ color: 'white' }}\r\n                    />\r\n                    <p>{format(new Date(Experience.date), 'eeee do MMMM')}</p>\r\n                    <p>\r\n                    Hosted by {' '}\r\n                    <Link to={`/profile/${host.username}`}>\r\n                      <strong>{host.displayName}</strong>\r\n                    </Link>\r\n                    </p>\r\n                  </Item.Content>\r\n                </Item>\r\n              </Item.Group>\r\n            </Segment>\r\n          </Segment>\r\n          <Segment clearing attached='bottom'>\r\n            {/* {Experience.isHost ? ( */}\r\n            {Experience.isHost && \r\n              <Button as={Link} to={`/experience/manage/${Experience.id}`} color='orange' floated='right'>\r\n              Manage Event\r\n            </Button>\r\n}\r\n            {/* //   ) : Experience.isLiked ? ( */}\r\n                {/* // <Button loading={loadingExperience} onClick={unlikeExperience}>Cancel attendance</Button> */}\r\n                {/* // ) : ( */}\r\n                {/* // <Button loading={loadingExperience} onClick={likeExperience} color='grey'>Join Experience</Button> */}\r\n            {/* //   )} */}\r\n          </Segment>\r\n        </Segment.Group>\r\n    );\r\n};\r\n\r\nexport default observer(ExperienceDetailedHeader);\r\n","import React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { IExperience } from '../../../models/experience'\r\nimport {format} from 'date-fns'\r\n\r\n\r\nconst ExperienceDetailedInfo: React.FC<{Experience: IExperience}> = ({Experience}) => {\r\n    return (\r\n        <div>\r\n            <Segment.Group>\r\n                  <Segment attached='top'>\r\n                    <Grid>\r\n                      <Grid.Column width={1}>\r\n                        <Icon size='large' color='grey' name='info' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={15}>\r\n                        <p>{Experience.main}</p>\r\n                        <p>{Experience.main2}</p>\r\n                        \r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                  <Segment attached>\r\n                    <Grid verticalAlign='middle'>\r\n                      <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='grey' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={15}>\r\n                        <span>\r\n                          {format(new Date(Experience.date), 'eeee do MMMM')} \r\n                          at {format(new Date(Experience.date), 'h:mm a')}\r\n                        </span>\r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                  <Segment attached>\r\n                    <Grid verticalAlign='middle'>\r\n                      <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='grey' />\r\n                      </Grid.Column>\r\n                      <Grid.Column width={11}>\r\n                        <span>{Experience.link1}</span>\r\n                      </Grid.Column>\r\n                    </Grid>\r\n                  </Segment>\r\n                </Segment.Group>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ExperienceDetailedInfo\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Grid} from \"semantic-ui-react\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\nimport LoadingComponent from \"../../../Layout/LoadingComponent\";\r\nimport ExperienceDetailedHeader from \"./ExperienceDetailedHeader\";\r\nimport ExperienceDetailedInfo from \"./ExperienceDetailedInfo\";\r\n// import ExperienceDetailedChat from \"./ExperienceDetailedChat\";\r\n// import ExperienceDetailedSidebar from \"./ExperienceDetailedSidebar\";\r\nimport { RootStoreContext } from \"../../../stores/rootStore\";\r\n\r\ninterface DetailParams {\r\n  id: string;\r\n}\r\n\r\nconst ExperienceDetails: React.FC<RouteComponentProps<DetailParams>> = ({\r\n  match,\r\n  history,\r\n}) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {loadExperience, loadingInitialExperience, experience} = rootStore.experienceStore;\r\n  const [ initialLoad, setInitialLoad] = useState(true);\r\n  useEffect(() => {\r\n    loadExperience(match.params.id).then(()=>setInitialLoad(false));\r\n  }, [loadExperience, match.params.id, history]);\r\n\r\n  if (loadingInitialExperience || !experience || initialLoad)\r\n    return <LoadingComponent content=\"Loading Experience...\" />;\r\n\r\n  if (!experience)\r\n  return <h2>Experience not found</h2>\r\n\r\n  return (\r\n <Grid>\r\n   <Grid.Column width={10}>\r\n      <ExperienceDetailedHeader Experience={experience} />\r\n      <ExperienceDetailedInfo Experience={experience} />\r\n      {/* {!initialLoad && <ExperienceDetailedChat />} */}\r\n   </Grid.Column>\r\n   {/* <Grid.Column width={6}>\r\n      <ExperienceDetailedSidebar\r\n        attendees={experience.liked}\r\n      />\r\n   </Grid.Column> */}\r\n </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ExperienceDetails);\r\n","import React from 'react';\r\nimport { Segment, Button, Header, Icon } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere but couldn't find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to Activities page\r\n                </Button>\r\n                <Button as={Link} to='/blogs' primary>\r\n                    Return to Blogs page\r\n                </Button>\r\n                <Button as={Link} to='/jobs' primary>\r\n                    Return to Jobs page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    );\r\n};\r\n\r\nexport default NotFound;","import React, { useContext } from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ModalContainer = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {modal: {open, body}, closeModal} = rootStore.modalStore;\r\n    return (\r\n       <Modal open={open} onClose={closeModal} size='mini'>\r\n           <Modal.Content>\r\n               {body}\r\n           </Modal.Content>\r\n       </Modal>\r\n    );\r\n};\r\n\r\nexport default observer(ModalContainer)\r\n","import React from 'react';\r\nimport {\r\n  Segment,\r\n  Item,\r\n  Header,\r\n  Button,\r\n  Grid,\r\n  Statistic,\r\n  Divider,\r\n  Reveal\r\n} from 'semantic-ui-react';\r\nimport { IProfile } from '../../models/profile';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps {\r\n  profile: IProfile;\r\n  isCurrentUser: boolean;\r\n  loading: boolean;\r\n  follow: (username: string) => void;\r\n  unfollow: (username: string) => void;\r\n}\r\n\r\nconst ProfileHeader: React.FC<IProps> = ({\r\n  profile,\r\n  isCurrentUser,\r\n  loading,\r\n  follow,\r\n  unfollow\r\n}) => {\r\n  return (\r\n    <Segment>\r\n      <Grid>\r\n        <Grid.Column width={12}>\r\n          <Item.Group>\r\n            <Item>\r\n              <Item.Image\r\n                avatar\r\n                size='small'\r\n                src={profile.image || '/assets/user.png'}\r\n              />\r\n              <Item.Content verticalAlign='middle'>\r\n                <Header as='h1'>{profile.displayName}</Header>\r\n              </Item.Content>\r\n            </Item>\r\n          </Item.Group>\r\n        </Grid.Column>\r\n        <Grid.Column width={4}>\r\n          <Statistic.Group widths={2}>\r\n            <Statistic label='Followers' value={profile.followersCount} />\r\n            <Statistic label='Following' value={profile.followingCount} />\r\n          </Statistic.Group>\r\n          <Divider />\r\n          {!isCurrentUser && (\r\n            <Reveal animated='move'>\r\n              <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button\r\n                  fluid\r\n                  color='grey'\r\n                  content={profile.following ? 'Following' : 'Not following'}\r\n                />\r\n              </Reveal.Content>\r\n              <Reveal.Content hidden>\r\n                <Button\r\n                  loading={loading}\r\n                  fluid\r\n                  basic\r\n                  color={profile.following ? 'red' : 'green'}\r\n                  content={profile.following ? 'Unfollow' : 'Follow'}\r\n                  onClick={\r\n                    profile.following\r\n                      ? () => unfollow(profile.username)\r\n                      : () => follow(profile.username)\r\n                  }\r\n                />\r\n              </Reveal.Content>\r\n            </Reveal>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileHeader);\r\n","import React, { useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Icon, Header } from 'semantic-ui-react';\r\n\r\ninterface IProps {\r\n  setFiles: (files: object[]) => void;\r\n}\r\n\r\nconst dropzoneStyles = {\r\n  border: 'dashed 3px',\r\n  borderColor: '#eee',\r\n  borderRadius: '5px',\r\n  paddingTop: '30px',\r\n  textAlign: 'center' as 'center',\r\n  height: '200px'\r\n};\r\n\r\nconst dropzoneActive = {\r\n  borderColor: 'green'\r\n};\r\n\r\nconst PhotoWidgetDropzone: React.FC<IProps> = ({ setFiles }) => {\r\n  const onDrop = useCallback(acceptedFiles => {\r\n    setFiles(\r\n      acceptedFiles.map((file: object) =>\r\n        Object.assign(file, {\r\n          preview: URL.createObjectURL(file)\r\n        })\r\n      )\r\n    );\r\n  }, [setFiles]);\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  return (\r\n    <div\r\n      {...getRootProps()}\r\n      style={\r\n        isDragActive ? { ...dropzoneStyles, ...dropzoneActive } : dropzoneStyles\r\n      }\r\n    >\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here' />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PhotoWidgetDropzone;\r\n","import React, { useRef } from 'react';\r\nimport Cropper from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface IProps {\r\n  setImage: (file: Blob) => void;\r\n  imagePreview: string;\r\n}\r\n\r\nconst PhotoWidgetCropper: React.FC<IProps> = ({ setImage, imagePreview }) => {\r\n  const cropper = useRef<Cropper>(null);\r\n\r\n  const cropImage = () => {\r\n    if (\r\n      cropper.current &&\r\n      typeof cropper.current.getCroppedCanvas() === 'undefined'\r\n    ) {\r\n      return;\r\n    }\r\n    cropper &&\r\n      cropper.current &&\r\n      cropper.current.getCroppedCanvas().toBlob((blob: any) => {\r\n        setImage(blob);\r\n      }, 'image/jpeg');\r\n  };\r\n\r\n  return (\r\n    <Cropper\r\n      ref={cropper}\r\n      src={imagePreview}\r\n      style={{ height: 200, width: '100%' }}\r\n      // Cropper.js options\r\n      aspectRatio={1 / 1}\r\n      preview='.img-preview'\r\n      guides={false}\r\n      viewMode={1}\r\n      dragMode='move'\r\n      scalable={true}\r\n      cropBoxMovable={true}\r\n      cropBoxResizable={true}\r\n      crop={cropImage}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PhotoWidgetCropper;","import React, { Fragment, useState, useEffect } from 'react';\r\nimport { Header, Grid, Button } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\n\r\ninterface IProps {\r\n  loading: boolean;\r\n  uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nconst PhotoUploadWidget: React.FC<IProps> = ({ loading, uploadPhoto }) => {\r\n  const [files, setFiles] = useState<any[]>([]);\r\n  const [image, setImage] = useState<Blob | null>(null);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      files.forEach(file => URL.revokeObjectURL(file.preview));\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Fragment>\r\n      <Grid>\r\n        <Grid.Column width={4}>\r\n          <Header color='grey' sub content='Step 1 - Add Photo' />\r\n          <PhotoWidgetDropzone setFiles={setFiles} />\r\n        </Grid.Column>\r\n        <Grid.Column width={1} />\r\n        <Grid.Column width={4}>\r\n          <Header sub color='grey' content='Step 2 - Resize image' />\r\n          {files.length > 0 && (\r\n            <PhotoWidgetCropper\r\n              setImage={setImage}\r\n              imagePreview={files[0].preview}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={1} />\r\n        <Grid.Column width={4}>\r\n          <Header sub color='grey' content='Step 3 - Preview & Upload' />\r\n          {files.length > 0 && (\r\n            <Fragment>\r\n              <div\r\n                className='img-preview'\r\n                style={{ minHeight: '200px', overflow: 'hidden' }}\r\n              />\r\n              <Button.Group widths={2}>\r\n                <Button\r\n                  positive\r\n                  icon='check'\r\n                  loading={loading}\r\n                  onClick={() => uploadPhoto(image!)}\r\n                />\r\n                <Button\r\n                  icon='close'\r\n                  disabled={loading}\r\n                  onClick={() => setFiles([])}\r\n                />\r\n              </Button.Group>\r\n            </Fragment>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default observer(PhotoUploadWidget);\r\n","import React, { useContext, useState } from 'react';\r\nimport { Tab, Header, Card, Image, Button, Grid } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../stores/rootStore';\r\n// import PhotoUploadWidget from '../../common/photoUpload/PhotoUploadWidget';\r\nimport PhotoUploadWidget from '../../common/PhotoUpload/PhotoUploadWidget';\r\n\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ProfilePhotos = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    profile,\r\n    isCurrentUser,\r\n    uploadPhoto,\r\n    uploadingPhoto,\r\n    setMainPhoto,\r\n    deletePhoto,\r\n    loading\r\n  } = rootStore.profileStore;\r\n  const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n  const [target, setTarget] = useState<string | undefined>(undefined);\r\n  const [deleteTarget, setDeleteTarget] = useState<string | undefined>(\r\n    undefined\r\n  );\r\n\r\n  const handleUploadImage = (photo: Blob) => {\r\n    uploadPhoto(photo).then(() => setAddPhotoMode(false));\r\n  };\r\n\r\n  return (\r\n    <Tab.Pane>\r\n      <Grid>\r\n        <Grid.Column width={16} style={{ paddingBottom: 0 }}>\r\n          <Header floated='left' icon='image' content='Photos' />\r\n          {isCurrentUser && (\r\n            <Button\r\n              onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n              floated='right'\r\n              basic\r\n              content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          {addPhotoMode ? (\r\n            <PhotoUploadWidget\r\n              uploadPhoto={handleUploadImage}\r\n              loading={uploadingPhoto}\r\n            />\r\n          ) : (\r\n            <Card.Group itemsPerRow={5}>\r\n              {profile &&\r\n                profile.photos.map(photo => (\r\n                  <Card key={photo.id}>\r\n                    <Image src={photo.url} />\r\n                    {isCurrentUser && (\r\n                      <Button.Group fluid widths={2}>\r\n                        <Button\r\n                          onClick={e => {\r\n                            setMainPhoto(photo);\r\n                            setTarget(e.currentTarget.name);\r\n                          }}\r\n                          name={photo.id}\r\n                          disabled={photo.isMain}\r\n                          loading={loading && target === photo.id}\r\n                          basic\r\n                          positive\r\n                          content='Main'\r\n                        />\r\n                        <Button\r\n                          name={photo.id}\r\n                          disabled={photo.isMain}\r\n                          onClick={(e) => {\r\n                            deletePhoto(photo);\r\n                            setDeleteTarget(e.currentTarget.name)\r\n                          }}\r\n                          loading={loading && deleteTarget === photo.id}\r\n                          basic\r\n                          negative\r\n                          icon='trash'\r\n                        />\r\n                      </Button.Group>\r\n                    )}\r\n                  </Card>\r\n                ))}\r\n            </Card.Group>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default observer(ProfilePhotos);\r\n","import React from 'react';\r\nimport { IProfile } from '../../models/profile';\r\nimport { Form as FinalForm, Field } from 'react-final-form';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { combineValidators, isRequired } from 'revalidate';\r\nimport { Form, Button } from 'semantic-ui-react';\r\nimport TextInput from '../../common/form/TextInput';\r\nimport TextAreaInput from '../../common/form/TextAreaInput';\r\n\r\nconst validate = combineValidators({\r\n  displayName: isRequired('displayName')\r\n});\r\n\r\ninterface IProps {\r\n  updateProfile: (profile: Partial<IProfile>) => void;\r\n  profile: IProfile;\r\n}\r\n\r\nconst ProfileEditForm: React.FC<IProps> = ({ updateProfile, profile }) => {\r\n  return (\r\n    <FinalForm\r\n      onSubmit={updateProfile}\r\n      validate={validate}\r\n      initialValues={profile!}\r\n      render={({ handleSubmit, invalid, pristine, submitting }) => (\r\n        <Form onSubmit={handleSubmit} error>\r\n          <Field\r\n            name='displayName'\r\n            component={TextInput}\r\n            placeholder='Display Name'\r\n            value={profile!.displayName}\r\n          />\r\n          <Field\r\n            name='bio'\r\n            component={TextAreaInput}\r\n            rows={3}\r\n            placeholder='Bio'\r\n            value={profile!.bio}\r\n          />\r\n             <Field\r\n            name='longBio'\r\n            component={TextAreaInput}\r\n            rows={5}\r\n            placeholder='Long Bio'\r\n            value={profile!.LongBio}\r\n          />\r\n          {/* <Button \r\n          content='Are You a Business?'\r\n          value={profile!.isBusiness}\r\n          // onClick={() => }\r\n          /> */}\r\n          <Button \r\n            loading={submitting}\r\n            floated='right'\r\n            disabled={invalid || pristine}\r\n            positive\r\n            content='Update profile'\r\n          />\r\n        </Form>\r\n      )}\r\n    />\r\n  );\r\n};\r\n\r\nexport default observer(ProfileEditForm);\r\n","import React, { useContext, useState } from 'react';\r\nimport { Tab, Grid, Header, Button } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../stores/rootStore';\r\nimport ProfileEditForm from './ProfileEditForm';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst ProfileDescription = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const { updateProfile, profile, isCurrentUser } = rootStore.profileStore;\r\n  const [editMode, setEditMode] = useState(false);\r\n  return (\r\n    <Tab.Pane>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header\r\n            floated='left'\r\n            icon='user'\r\n            content={`About ${profile!.displayName}`}\r\n          />\r\n          {isCurrentUser && (\r\n            <Button\r\n              floated='right'\r\n              basic\r\n              content={editMode ? 'Cancel' : 'Edit Profile'}\r\n              onClick={() => setEditMode(!editMode)}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          {editMode ? (\r\n            <ProfileEditForm updateProfile={updateProfile} profile={profile!} />\r\n          ) : (\r\n            <div>\r\n              {/* {profile! && profile?.isBusiness === true ? ( \r\n            <span>Business</span>\r\n               ):(\r\n                <span>Personal</span>\r\n               ) } */}\r\n            <span>{profile!.bio}</span>\r\n            <div />\r\n            <span>{profile!.LongBio}</span>\r\n            </div>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileDescription);\r\n","import React from 'react';\r\nimport { Card, Image, Icon} from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { IProfile } from '../../models/profile';\r\n\r\ninterface IProps {\r\n    profile: IProfile\r\n}\r\n\r\nconst ProfileCard: React.FC<IProps> = ({profile}) => {\r\n  return (\r\n    <Card as={Link} to={`/profile/${profile.username}`}>\r\n      <Image src={profile.image || '/assets/user.png'} />\r\n      <Card.Content>\r\n        <Card.Header>{profile.displayName}</Card.Header>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <div>\r\n          <Icon name='user' />\r\n          {profile.followersCount} Followers\r\n        </div>\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ProfileCard;\r\n","import React, { useContext } from 'react';\r\nimport { Tab, Grid, Header, Card } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../stores/rootStore';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nconst ProfileFollowings = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    profile,\r\n    followings,\r\n    loading,\r\n    activeTab\r\n  } = rootStore.profileStore;\r\n\r\n  return (\r\n    <Tab.Pane loading={loading}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header\r\n            floated='left'\r\n            icon='user'\r\n            content={\r\n              activeTab === 3\r\n                ? `People following ${profile!.displayName}`\r\n                : `People ${profile!.displayName} is following`\r\n            }\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Card.Group itemsPerRow={5}>\r\n            {followings.map(profile => (\r\n              <ProfileCard key={profile.username} profile={profile} />\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default ProfileFollowings;\r\n","import React, { useEffect, useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps, Button } from 'semantic-ui-react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { IUserActivity } from '../../models/profile';\r\nimport { format } from 'date-fns';\r\nimport { RootStoreContext } from '../../stores/rootStore';\r\n\r\nconst panes = [\r\n  { menuItem: 'Future Events', pane: { key: 'futureEvents' } },\r\n  { menuItem: 'Past Events', pane: { key: 'pastEvents' } },\r\n  { menuItem: 'Hosting', pane: { key: 'hosted' } }\r\n];\r\n\r\nconst ProfileEvents = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    loadUserActivities,\r\n    profile,\r\n    isCurrentUser,\r\n    loadingActivities,\r\n    userActivities\r\n  } = rootStore.profileStore!;\r\n\r\n  useEffect(() => {\r\n    loadUserActivities(profile!.username);\r\n  }, [loadUserActivities, profile]);\r\n\r\n  const handleTabChange = (\r\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n    data: TabProps\r\n  ) => {\r\n    let predicate;\r\n    switch (data.activeIndex) {\r\n      case 1:\r\n        predicate = 'past';\r\n        break;\r\n      case 2:\r\n        predicate = 'hosting';\r\n        break;\r\n      default:\r\n        predicate = 'future';\r\n        break;\r\n    }\r\n    loadUserActivities(profile!.username, predicate);\r\n  };\r\n\r\n  return (\r\n    <Tab.Pane loading={loadingActivities}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated='left' icon='calendar' content={'Activities'} />\r\n       {isCurrentUser && (\r\n                   <Button\r\n                   as={NavLink}\r\n                   to={\"/createActivity\"}\r\n                   basic\r\n                   floated='right'\r\n                   content=\"Create Activity\"\r\n                 />\r\n       )}\r\n       \r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Tab\r\n            panes={panes}\r\n            menu={{ secondary: true, pointing: true }}\r\n            onTabChange={(e, data) => handleTabChange(e, data)}\r\n          />\r\n          <br />\r\n          <Card.Group itemsPerRow={4}>\r\n            {userActivities.map((activity: IUserActivity) => (\r\n              <Card\r\n                as={Link}\r\n                to={`/activities/${activity.id}`}\r\n                key={activity.id}\r\n              >\r\n                <Image\r\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                  style={{ minHeight: 100, objectFit: 'cover' }}\r\n                />\r\n                <Card.Content>\r\n                  <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n                  <Card.Meta textAlign='center'>\r\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                  </Card.Meta>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileEvents);","import React, { useEffect, useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps, Button } from 'semantic-ui-react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { IUserBlog } from '../../models/profile';\r\nimport { format } from 'date-fns';\r\nimport { RootStoreContext } from '../../stores/rootStore';\r\n\r\n\r\nconst panes = [\r\n  { menuItem: 'Future Events', pane: { key: 'futureEvents' } },\r\n  { menuItem: 'Past Events', pane: { key: 'pastEvents' } },\r\n  { menuItem: 'Hosting', pane: { key: 'hosted' } }\r\n];\r\n\r\nconst ProfileBlogs = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    loadUserBlogs,\r\n    profile,\r\n    loadingBlogs,\r\n    isCurrentUser,\r\n    userBlogs\r\n  } = rootStore.profileStore!;\r\n\r\n  useEffect(() => {\r\n    loadUserBlogs(profile!.username);\r\n  }, [loadUserBlogs, profile]);\r\n\r\n  const handleTabChange = (\r\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n    data: TabProps\r\n  ) => {\r\n    let predicate;\r\n    switch (data.activeIndex) {\r\n      case 1:\r\n        predicate = 'past';\r\n        break;\r\n      case 2:\r\n        predicate = 'hosting';\r\n        break;\r\n      default:\r\n        predicate = 'future';\r\n        break;\r\n    }\r\n    loadUserBlogs(profile!.username, predicate);\r\n  };\r\n\r\n  return (\r\n    <Tab.Pane loading={loadingBlogs}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated='left' icon='calendar' content={'Blogs'} />\r\n          {isCurrentUser && (\r\n                   <Button\r\n                   as={NavLink}\r\n                   to={\"/createJob\"}\r\n                   basic\r\n                   floated='right'\r\n                   content=\"Create Job\"\r\n                 />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Tab\r\n            panes={panes}\r\n            menu={{ secondary: true, pointing: true }}\r\n            onTabChange={(e, data) => handleTabChange(e, data)}\r\n          />\r\n          <br />\r\n          <Card.Group itemsPerRow={4}>\r\n            {userBlogs.map((blog: IUserBlog) => (\r\n              <Card\r\n                as={Link}\r\n                to={`/blogs/${blog.id}`}\r\n                key={blog.id}\r\n              >\r\n                <Image\r\n                  src={`/assets/categoryImages/${blog.category}.jpg`}\r\n                  style={{ minHeight: 100, objectFit: 'cover' }}\r\n                />\r\n                <Card.Content>\r\n                  <Card.Header textAlign='center'>{blog.title}</Card.Header>\r\n                  <Card.Meta textAlign='center'>\r\n                    <div>{format(new Date(blog.date), 'do LLL')}</div>\r\n                    <div>{format(new Date(blog.date), 'h:mm a')}</div>\r\n                  </Card.Meta>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileBlogs);","import React, { useContext, useEffect } from 'react'\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Card, Grid, Header, Tab, Image, TabProps, Button } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../stores/rootStore';\r\nimport {IUserExperience} from '../../models/profile';\r\nimport { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'futureEvents' } },\r\n    { menuItem: 'Past Events', pane: { key: 'pastEvents' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosted' } }\r\n  ];\r\n\r\nconst ProfileExperience = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n        loadUserExperiences,\r\n        profile,\r\n        loadingExperiences,\r\n        isCurrentUser,\r\n        userExperiences\r\n    } = rootStore.profileStore!;\r\n\r\n    useEffect(() => {\r\n        loadUserExperiences(profile!.username);\r\n    }, [loadUserExperiences, profile])\r\n\r\n    const handleTabChange = (\r\n        e: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n        data: TabProps\r\n      ) => {\r\n        let predicate;\r\n        switch (data.activeIndex) {\r\n          case 1:\r\n            predicate = 'past';\r\n            break;\r\n          case 2:\r\n            predicate = 'hosting';\r\n            break;\r\n          default:\r\n            predicate = 'future';\r\n            break;\r\n        }\r\n        loadUserExperiences(profile!.username, predicate);\r\n      };\r\n    return (\r\n<Tab.Pane loading={loadingExperiences}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated='left' icon='calendar' content={'Experience'} />\r\n          {isCurrentUser && (\r\n                   <Button\r\n                   as={NavLink}\r\n                   to={\"/createExperience\"}\r\n                   basic\r\n                   floated='right'\r\n                   content=\"Create Experience\"\r\n                 />\r\n          )}\r\n       \r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Tab\r\n            panes={panes}\r\n            menu={{ secondary: true, pointing: true }}\r\n            onTabChange={(e, data) => handleTabChange(e, data)}\r\n          />\r\n          <br />\r\n          <Card.Group itemsPerRow={4}>\r\n            {userExperiences.map((experience: IUserExperience) => (\r\n              <Card\r\n                as={Link}\r\n                to={`/experiences/${experience.id}`}\r\n                key={experience.id}\r\n              >\r\n                <Image\r\n                  src={`/assets/categoryImages/${experience.category}.jpg`}\r\n                  style={{ minHeight: 100, objectFit: 'cover' }}\r\n                />\r\n                <Card.Content>\r\n                  <Card.Header textAlign='center'>{experience.title}</Card.Header>\r\n                  <Card.Meta textAlign='center'>\r\n                    <div>{format(new Date(experience.date), 'do LLL')}</div>\r\n                    <div>{format(new Date(experience.date), 'h:mm a')}</div>\r\n                  </Card.Meta>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileExperience);","import React, { useContext, useEffect } from 'react'\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Card, Grid, Header, Tab, Image, TabProps, Button } from 'semantic-ui-react';\r\nimport { RootStoreContext } from '../../stores/rootStore';\r\nimport {IUserJob} from '../../models/profile';\r\nimport { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'futureEvents' } },\r\n    { menuItem: 'Past Events', pane: { key: 'pastEvents' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosted' } }\r\n  ];\r\n\r\nconst ProfileJobs = () => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {\r\n        loadUserJobs,\r\n        profile,\r\n        loadingJobs,\r\n        isCurrentUser,\r\n        userJobs\r\n    } = rootStore.profileStore!;\r\n\r\n    useEffect(() => {\r\n        loadUserJobs(profile!.username);\r\n    }, [loadUserJobs, profile])\r\n\r\n    const handleTabChange = (\r\n        e: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n        data: TabProps\r\n      ) => {\r\n        let predicate;\r\n        switch (data.activeIndex) {\r\n          case 1:\r\n            predicate = 'past';\r\n            break;\r\n          case 2:\r\n            predicate = 'hosting';\r\n            break;\r\n          default:\r\n            predicate = 'future';\r\n            break;\r\n        }\r\n        loadUserJobs(profile!.username, predicate);\r\n      };\r\n    return (\r\n<Tab.Pane loading={loadingJobs}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated='left' icon='calendar' content={'Jobs'} />\r\n          {isCurrentUser && (\r\n                   <Button\r\n                   as={NavLink}\r\n                   to={\"/createJob\"}\r\n                   basic\r\n                   floated='right'\r\n                   content=\"Create Job\"\r\n                 />\r\n       )}\r\n        \r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Tab\r\n            panes={panes}\r\n            menu={{ secondary: true, pointing: true }}\r\n            onTabChange={(e, data) => handleTabChange(e, data)}\r\n          />\r\n          <br />\r\n          <Card.Group itemsPerRow={4}>\r\n            {userJobs.map((job: IUserJob) => (\r\n              <Card\r\n                as={Link}\r\n                to={`/activities/${job.id}`}\r\n                key={job.id}\r\n              >\r\n                <Image\r\n                  src={`/assets/categoryImages/${job.category}.jpg`}\r\n                  style={{ minHeight: 100, objectFit: 'cover' }}\r\n                />\r\n                <Card.Content>\r\n                  <Card.Header textAlign='center'>{job.title}</Card.Header>\r\n                  <Card.Meta textAlign='center'>\r\n                    <div>{format(new Date(job.date), 'do LLL')}</div>\r\n                    <div>{format(new Date(job.date), 'h:mm a')}</div>\r\n                  </Card.Meta>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n    )\r\n}\r\n\r\nexport default observer(ProfileJobs)","import React from 'react'\r\nimport ProfileJobs from './ProfileJobs';\r\n\r\nconst ProfileAppliedJobs = () => {\r\n    return (\r\n        <ProfileJobs />\r\n    )\r\n}\r\n\r\nexport default ProfileAppliedJobs\r\n","import React from 'react'\r\n\r\nconst ProfileMessages = () => {\r\n    return (\r\n        <div>\r\n            <h2>Any messages privatly will be sent here</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileMessages\r\n","import React, { useEffect, useContext } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps, Button } from 'semantic-ui-react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { IUserBusiness } from '../../models/profile';\r\nimport { format } from 'date-fns';\r\nimport { RootStoreContext } from '../../stores/rootStore';\r\n\r\n\r\nconst panes = [\r\n  { menuItem: 'Future Events', pane: { key: 'futureEvents' } },\r\n  { menuItem: 'Past Events', pane: { key: 'pastEvents' } },\r\n  { menuItem: 'Hosting', pane: { key: 'hosted' } }\r\n];\r\n\r\nconst ProfileBusinesses = () => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    loadUserBusinesses,\r\n    profile,\r\n    loadingBusinesses,\r\n    isCurrentUser,\r\n    userBusinesses\r\n  } = rootStore.profileStore!;\r\n\r\n  useEffect(() => {\r\n    loadUserBusinesses(profile!.username);\r\n  }, [loadUserBusinesses, profile]);\r\n\r\n  const handleTabChange = (\r\n    e: React.MouseEvent<HTMLDivElement, MouseEvent>,\r\n    data: TabProps\r\n  ) => {\r\n    let predicate;\r\n    switch (data.activeIndex) {\r\n      case 1:\r\n        predicate = 'past';\r\n        break;\r\n      case 2:\r\n        predicate = 'hosting';\r\n        break;\r\n      default:\r\n        predicate = 'future';\r\n        break;\r\n    }\r\n    loadUserBusinesses(profile!.username, predicate);\r\n  };\r\n\r\n  return (\r\n    <Tab.Pane loading={loadingBusinesses}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated='left' icon='calendar' content={'Businesses'} />\r\n          {isCurrentUser && (\r\n                   <Button\r\n                   as={NavLink}\r\n                   to={\"/createJob\"}\r\n                   basic\r\n                   floated='right'\r\n                   content=\"Create Job\"\r\n                 />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          <Tab\r\n            panes={panes}\r\n            menu={{ secondary: true, pointing: true }}\r\n            onTabChange={(e, data) => handleTabChange(e, data)}\r\n          />\r\n          <br />\r\n          <Card.Group itemsPerRow={4}>\r\n            {userBusinesses.map((business: IUserBusiness) => (\r\n              <Card\r\n                as={Link}\r\n                to={`/businesses/${business.id}`}\r\n                key={business.id}\r\n              >\r\n                <Image\r\n                  src={`/assets/categoryImages/${business.category}.jpg`}\r\n                  style={{ minHeight: 100, objectFit: 'cover' }}\r\n                />\r\n                <Card.Content>\r\n                  <Card.Header textAlign='center'>{business.title}</Card.Header>\r\n                  <Card.Meta textAlign='center'>\r\n                    <div>{format(new Date(business.date), 'do LLL')}</div>\r\n                    <div>{format(new Date(business.date), 'h:mm a')}</div>\r\n                  </Card.Meta>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n};\r\n\r\nexport default observer(ProfileBusinesses);","import React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport ProfilePhotos from './ProfilePhotos';\r\nimport ProfileDescription from './ProfileDescription';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileBlogs from './ProfileBlogs';\r\nimport ProfileExperience from './ProfileExperience';\r\nimport ProfileAppliedJobs from './ProfileAppliedJobs';\r\n// import ProfilePostedJobs from './ProfilePostedJobs';\r\nimport ProfileMessages from './ProfileMessages';\r\nimport ProfileBusinesses from './ProfileBusinesses'\r\n\r\n\r\nconst panes = [\r\n  { menuItem: 'About', render: () => <ProfileDescription /> },\r\n  { menuItem: 'Photos', render: () => <ProfilePhotos /> },\r\n  { menuItem: 'Experiences', render: () => <ProfileExperience /> },\r\n  { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n  { menuItem: 'Following', render: () => <ProfileFollowings /> },\r\n  { menuItem: 'Activities', render: () => <ProfileActivities />},\r\n  { menuItem: 'Blogs', render: () => <ProfileBlogs /> },\r\n  // { menuItem: 'MyStore', render: () => <ProfileStore /> }\r\n  { menuItem: 'Jobs ', render: () => <ProfileAppliedJobs /> },\r\n  // { menuItem: 'Posted Jobs ', render: () => <ProfilePostedJobs /> },\r\n  { menuItem: 'Messages ', render: () => <ProfileMessages /> },\r\n  { menuItem: 'Businesses ', render: () => <ProfileBusinesses /> }\r\n  // { menuItem: 'Posts ', render: () => <ProfilePosts /> }\r\n  // { menuItem: 'Products ', render: () => <ProfileProducts /> }\r\n  // { menuItem: 'Cart ', render: () => <ProfileCarts /> }\r\n\r\n\r\n\r\n];\r\n\r\ninterface IProps {\r\n    setActiveTab: (activeIndex: any) => void;\r\n}\r\n\r\nconst ProfileContent: React.FC<IProps> = ({setActiveTab}) => {\r\n  return (\r\n    <Tab\r\n      menu={{ fluid: true, vertical: true }}\r\n      menuPosition='right'\r\n      panes={panes}\r\n      onTabChange={(e, data) => setActiveTab(data.activeIndex)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProfileContent;\r\n","import React, { useContext, useEffect } from 'react';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport ProfileHeader from './ProfileHeader';\r\nimport ProfileContent from './ProfileContent';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { RootStoreContext } from '../../stores/rootStore';\r\nimport LoadingComponent from '../../Layout/LoadingComponent';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface RouteParams {\r\n  username: string;\r\n}\r\n\r\ninterface IProps extends RouteComponentProps<RouteParams> {}\r\n\r\nconst ProfilePage: React.FC<IProps> = ({ match }) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const {\r\n    loadingProfile,\r\n    profile,\r\n    loadProfile,\r\n    follow,\r\n    unfollow,\r\n    isCurrentUser,\r\n    loading,\r\n    setActiveTab\r\n  } = rootStore.profileStore;\r\n\r\n  useEffect(() => {\r\n    loadProfile(match.params.username);\r\n  }, [loadProfile, match]);\r\n\r\n  if (loadingProfile) return <LoadingComponent content='Loading profile...' />;\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={16}>\r\n        <ProfileHeader\r\n          profile={profile!}\r\n          isCurrentUser={isCurrentUser}\r\n          loading={loading}\r\n          follow={follow}\r\n          unfollow={unfollow}\r\n        />\r\n        <ProfileContent setActiveTab={setActiveTab} />\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default observer(ProfilePage);\r\n","import React, { useContext } from 'react'\r\nimport { RouteProps, RouteComponentProps, Route, Redirect } from 'react-router-dom';\r\nimport { RootStoreContext } from '../stores/rootStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface IProps extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>>\r\n}\r\n\r\nconst PrivateRoute: React.FC<IProps> = ({component: Component, ...rest}) => {\r\n    const rootStore = useContext(RootStoreContext);\r\n    const {isLoggedIn} = rootStore.userStore;\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props}/> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}\r\n\r\nexport default observer(PrivateRoute)\r\n","import React from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport queryString from 'query-string';\r\nimport { Segment, Header, Icon, Button } from 'semantic-ui-react';\r\nimport agent from '../../api/agent';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst RegisterSuccess: React.FC<RouteComponentProps> = ({ location }) => {\r\n  const { email } = queryString.parse(location.search);\r\n\r\n  const handleConfirmEmailResend = () => {\r\n    agent.User.resendVerifyEmailConfirm(email as string)\r\n      .then(() => {\r\n        toast.success('Verification email resent - please check your email');\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  return (\r\n    <Segment placeholder>\r\n      <Header icon>\r\n        <Icon name='check' />\r\n        Successfully registered!\r\n      </Header>\r\n\r\n      <Segment.Inline>\r\n        <div className='center'>\r\n          <p>\r\n            Please check your email (including junk folder) for the verication\r\n            email\r\n          </p>\r\n          {email && (\r\n            <>\r\n              <p>\r\n                Didn't receive the email? Please click below button to resend\r\n              </p>\r\n              <Button\r\n                onClick={handleConfirmEmailResend}\r\n                primary\r\n                content='Resend email'\r\n                size='huge'\r\n              />\r\n            </>\r\n          )}\r\n        </div>\r\n      </Segment.Inline>\r\n    </Segment>\r\n  );\r\n};\r\n\r\nexport default RegisterSuccess;","import React, { useContext, useState, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { RootStoreContext } from '../../stores/rootStore';\r\nimport queryString from 'query-string';\r\nimport agent from '../../api/agent';\r\nimport { Button, Segment, Header, Icon } from 'semantic-ui-react';\r\nimport LoginForm from './LoginForm';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst VerifyEmail: React.FC<RouteComponentProps> = ({ location }) => {\r\n  const rootStore = useContext(RootStoreContext);\r\n  const Status = {\r\n    Verifying: 'Verifying',\r\n    Failed: 'Failed',\r\n    Success: 'Success',\r\n  };\r\n\r\n  const [status, setStatus] = useState(Status.Verifying);\r\n  const { openModal } = rootStore.modalStore;\r\n  const { token, email } = queryString.parse(location.search);\r\n\r\n  useEffect(() => {\r\n    agent.User.verifyEmail(token as string, email as string)\r\n      .then(() => {\r\n        setStatus(Status.Success);\r\n      })\r\n      .catch(() => {\r\n        setStatus(Status.Failed);\r\n      });\r\n  }, [Status.Failed, Status.Success, token, email]);\r\n\r\n  const handleConfirmEmailResend = () => {\r\n    agent.User.resendVerifyEmailConfirm(email as string)\r\n      .then(() => {\r\n        toast.success('Verification email resent - please check your email');\r\n      })\r\n      .catch((error) => console.log(error));\r\n  };\r\n\r\n  const getBody = () => {\r\n    switch (status) {\r\n      case Status.Verifying:\r\n        return <p>Verifying...</p>;\r\n      case Status.Failed:\r\n        return (\r\n          <div className='center'>\r\n            <p>\r\n              Verication failed - you can try resending the verification email\r\n            </p>\r\n            <Button onClick={handleConfirmEmailResend} primary size='huge' content='Resend email' />\r\n          </div>\r\n        );\r\n      case Status.Success:\r\n        return (\r\n          <div className='center'>\r\n            <p>Email has been verified - you can now login</p>\r\n            <Button\r\n              primary\r\n              onClick={() => openModal(<LoginForm />)}\r\n              size='large'\r\n              content='Login'\r\n            />\r\n          </div>\r\n        );\r\n    }\r\n\r\n  };\r\n  return (\r\n    <Segment placeholder>\r\n        <Header icon>\r\n            <Icon name='envelope' />\r\n            Email verification\r\n        </Header>\r\n\r\n        <Segment.Inline>\r\n            {getBody()}\r\n        </Segment.Inline>\r\n    </Segment>\r\n)\r\n};\r\n\r\nexport default VerifyEmail","import React from 'react'\r\nimport { Grid } from \"semantic-ui-react\";\r\n\r\nconst AboutPage = () => {\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n           <h2>About Us</h2> \r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <h4>all we do is run run run</h4>\r\n        </Grid.Column>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default AboutPage\r\n","import React, { Fragment, useContext, useEffect } from \"react\";\nimport { Container } from \"semantic-ui-react\";\n// import \"./styles.css\";\nimport NavBar from \"../features/nav/NavBar\";\nimport { observer } from \"mobx-react-lite\";\nimport {\n  Route,\n  RouteComponentProps,\n  Switch,\n  withRouter,\n} from \"react-router-dom\";\nimport HomePage from \"../features/home/HomePage\";\nimport ActivityDashboard from \"../features/activities/dashboard/ActivityDashboard\";\nimport ActivityForm from \"../features/activities/form/ActivityForm\";\nimport ActivityDetails from \"../features/activities/details/ActivityDetails\";\nimport BlogForm from \"../features/blogs/form/BlogForm\";\nimport BlogDetails from \"../features/blogs/details/BlogDetails\";\nimport BlogDashboard from \"../features/blogs/dashboard/BlogDashboard\";\nimport JobForm from \"../features/jobs/form/JobForm\";\nimport JobDetails from \"../features/jobs/details/JobDetails\";\nimport JobDashboard from \"../features/jobs/dashboard/JobDashboard\";\nimport ExperienceForm from \"../features/experiences/form/ExperienceForm\";\n\nimport PostForm from \"../features/posts/form/PostForm\";\nimport PostDetails from \"../features/posts/details/PostDetails\";\nimport PostDashboard from \"../features/posts/dashboard/PostDashboard\";\n\nimport ProductForm from \"../features/products/form/ProductForm\";\nimport ProductDetails from \"../features/products/details/ProductDetails\";\nimport ProductDashboard from \"../features/products/dashboard/ProductDashboard\";\n\nimport BusinessForm from \"../features/businesses/form/BusinessForm\";\nimport BusinessDetails from \"../features/businesses/details/BusinessDetails\";\nimport BusinessDashboard from \"../features/businesses/dashboard/BusinessDashboard\";\nimport ExperienceDetails from \"../features/experiences/details/ExperienceDetails\";\nimport NotFound from \"./NotFound\";\nimport { ToastContainer } from \"react-toastify\";\nimport { RootStoreContext } from \"../stores/rootStore\";\nimport LoadingComponent from \"./LoadingComponent\";\nimport ModalContainer from \"../common/modals/ModalContainer\";\nimport ProfilePage from \"../features/profiles/ProfilePage\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport RegisterSuccess from \"../features/user/RegisterSuccess\";\nimport VerifyEmail from \"../features/user/VerifyEmail\";\nimport AboutPage from \"../features/about/AboutPage\";\n\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\n  const rootStore = useContext(RootStoreContext);\n  const { setAppLoaded, token, appLoaded } = rootStore.commonStore;\n  const { getUser } = rootStore.userStore;\n\n  useEffect(() => {\n    if (token && !appLoaded) {\n      getUser().finally(() => setAppLoaded());\n    } else {\n      setAppLoaded();\n    }\n  }, [getUser, setAppLoaded, token, appLoaded]);\n  if (!appLoaded) return <LoadingComponent content=\"Loading App\" />;\n\n  // APP\n  return (\n    <Fragment>\n      <ModalContainer />\n      <ToastContainer position=\"bottom-right\" />\n      <Route exact path=\"/\" component={HomePage} />\n      <Route\n        path={\"/(.+)\"}\n        render={() => (\n          <Fragment>\n            <NavBar />\n            <Container style={{ marginTop: \"7em\" }}>\n              <Switch>\n                <PrivateRoute\n                  exact\n                  path=\"/activities\"\n                  component={ActivityDashboard}\n                />\n                <PrivateRoute\n                  path=\"/activities/:id\"\n                  component={ActivityDetails}\n                />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/createActivity\", \"/activity/manage/:id\"]}\n                  component={ActivityForm}\n                />\n                <PrivateRoute exact path=\"/jobs\" component={JobDashboard} />\n                <PrivateRoute path=\"/jobs/:id\" component={JobDetails} />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/createJob\", \"/job/manage/:id\"]}\n                  component={JobForm}\n                />\n                <PrivateRoute exact path=\"/blogs\" component={BlogDashboard} />\n                <PrivateRoute path=\"/blogs/:id\" component={BlogDetails} />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/createBlog\", \"/blog/manage/:id\"]}\n                  component={BlogForm}\n                />\n                <PrivateRoute\n                  exact\n                  path=\"/products\"\n                  component={ProductDashboard}\n                />\n                <PrivateRoute path=\"/products/:id\" component={ProductDetails} />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/createProduct\", \"/product/manage/:id\"]}\n                  component={ProductForm}\n                />\n                <PrivateRoute exact path=\"/programs\" component={PostDashboard} />\n                <PrivateRoute path=\"/programs/:id\" component={PostDetails} />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/createProgram\", \"/program/manage/:id\"]}\n                  component={PostForm}\n                />\n                <PrivateRoute\n                  exact\n                  path=\"/businesses\"\n                  component={BusinessDashboard}\n                />\n                <PrivateRoute\n                  path=\"/businesses/:id\"\n                  component={BusinessDetails}\n                />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/createBusiness\", \"/business/manage/:id\"]}\n                  component={BusinessForm}\n                />\n                 <PrivateRoute\n                  path=\"/experiences/:id\"\n                  component={ExperienceDetails}\n                />\n                <PrivateRoute\n                  key={location.key}\n                  path={[\"/createExperience\", \"/experience/manage/:id\"]}\n                  component={ExperienceForm}\n                />\n                  <PrivateRoute\n                  exact\n                  path=\"/about\"\n                  component={AboutPage}\n                />\n                <PrivateRoute\n                  path=\"/profile/:username\"\n                  component={ProfilePage}\n                />\n                <Route\n                  path=\"/user/registerSuccess\"\n                  component={RegisterSuccess}\n                />\n                <Route path=\"/user/verifyEmail\" component={VerifyEmail} />{\" \"}\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </Fragment>\n        )}\n      />\n    </Fragment>\n  );\n};\n\nexport default withRouter(observer(App));\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst ScrollToTop = ({ children, location: { pathname} }: any) => {\r\n    useEffect(() => {\r\n        window.scrollTo(0,0);\r\n    }, [pathname]);\r\n    return children || null;\r\n}\r\n\r\nexport default withRouter(ScrollToTop);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// import React from 'react'\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-widgets/dist/css/react-widgets.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport App from './App/Layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport ScrollToTop from './App/Layout/ScrollToTop';\nimport dateFnsLocalizer from 'react-widgets-date-fns';\nimport * as serviceWorker from './serviceWorker';\nimport './App/Layout/styles.css';\nimport 'mobx-react-lite/batchingForReactDom';\n\ndateFnsLocalizer();\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  // <React.StrictMode>\n    <Router history={history}>\n     <ScrollToTop>\n    <App />\n     </ScrollToTop>\n     </Router>,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// https://github.com/TryCatchLearn/Reactivities30\nreportWebVitals();\nserviceWorker.unregister();\n"],"sourceRoot":""}